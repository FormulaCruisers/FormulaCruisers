
MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  00000ca4  00000d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ca4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000265  008001a8  008001a8  00000de0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dc3  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000103c  00000000  00000000  00002dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ce6  00000000  00000000  00003e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000450  00000000  00000000  00004aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007bc  00000000  00000000  00004f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013d1  00000000  00000000  000056f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00006ac9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	b3 c2       	rjmp	.+1382   	; 0x590 <__vector_10>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	9b c2       	rjmp	.+1334   	; 0x57c <__vector_17>
  46:	00 00       	nop
  48:	41 c1       	rjmp	.+642    	; 0x2cc <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e4 ea       	ldi	r30, 0xA4	; 164
  a8:	fc e0       	ldi	r31, 0x0C	; 12
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a8 3a       	cpi	r26, 0xA8	; 168
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	24 e0       	ldi	r18, 0x04	; 4
  bc:	a8 ea       	ldi	r26, 0xA8	; 168
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	ad 30       	cpi	r26, 0x0D	; 13
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	da d2       	rcall	.+1460   	; 0x680 <main>
  cc:	e9 c5       	rjmp	.+3026   	; 0xca0 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <can_init>:
	data_send_arr_nh(d, node, 2);
}

//***** CAN initalization *****************************************************
void can_init()
{	
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
	CANGCON = ( 1 << SWRES );   // Software reset
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	
	CANTCON = 0x00;				// CAN timing prescaler set to 0;
  da:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	
	CANBT1 = 0x02;	// Set baud rate to 500kb (assuming 16Mhz IOclk)
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x0C;
  e4:	8c e0       	ldi	r24, 0x0C	; 12
  e6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x37;
  ea:	87 e3       	ldi	r24, 0x37	; 55
  ec:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	for (int8_t mob=0; mob<14; mob++)
  f0:	80 e0       	ldi	r24, 0x00	; 0
	{
		CANPAGE = ( mob << 4 ); // Selects Message Object 0-14
  f2:	cd ee       	ldi	r28, 0xED	; 237
  f4:	d0 e0       	ldi	r29, 0x00	; 0
		CANCDMOB = 0x00;		// Disable mob
  f6:	af ee       	ldi	r26, 0xEF	; 239
  f8:	b0 e0       	ldi	r27, 0x00	; 0
		CANSTMOB = 0x00;		// Clear mob status register;
  fa:	ee ee       	ldi	r30, 0xEE	; 238
  fc:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT2 = 0x0C;
	CANBT3 = 0x37;

	for (int8_t mob=0; mob<14; mob++)
	{
		CANPAGE = ( mob << 4 ); // Selects Message Object 0-14
  fe:	98 2f       	mov	r25, r24
 100:	92 95       	swap	r25
 102:	90 7f       	andi	r25, 0xF0	; 240
 104:	98 83       	st	Y, r25
		CANCDMOB = 0x00;		// Disable mob
 106:	1c 92       	st	X, r1
		CANSTMOB = 0x00;		// Clear mob status register;
 108:	10 82       	st	Z, r1
 10a:	8f 5f       	subi	r24, 0xFF	; 255
	
	CANBT1 = 0x02;	// Set baud rate to 500kb (assuming 16Mhz IOclk)
	CANBT2 = 0x0C;
	CANBT3 = 0x37;

	for (int8_t mob=0; mob<14; mob++)
 10c:	8e 30       	cpi	r24, 0x0E	; 14
 10e:	b9 f7       	brne	.-18     	; 0xfe <can_init+0x2e>
		CANPAGE = ( mob << 4 ); // Selects Message Object 0-14
		CANCDMOB = 0x00;		// Disable mob
		CANSTMOB = 0x00;		// Clear mob status register;
	}
	
	CANIE2 = (( 1 << IEMOB1 ) | ( 0 << IEMOB0 ));  // IEMOB1 = MOB1 Enable interrupts on mob1 for reception and transmission
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	CANGIE = ( 1 << ENIT ) | ( 1 << ENRX ) | ( 0 << ENTX );   // Enable interrupts on receive
 116:	80 ea       	ldi	r24, 0xA0	; 160
 118:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	CANGCON |= ( 1 << 1 );	// Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
 11c:	e8 ed       	ldi	r30, 0xD8	; 216
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	82 60       	ori	r24, 0x02	; 2
 124:	80 83       	st	Z, r24
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <can_rx>:

//***** CAN Creating RX *****************************************************
void can_rx(uint16_t NODE_ID)
{
	CANPAGE = ( 1 << MOBNB0 ); // Select message object 0
 12c:	20 e1       	ldi	r18, 0x10	; 16
 12e:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
	CANIDT1 = NODE_ID >> 3; // Receive Address
 132:	9c 01       	movw	r18, r24
 134:	36 95       	lsr	r19
 136:	27 95       	ror	r18
 138:	36 95       	lsr	r19
 13a:	27 95       	ror	r18
 13c:	36 95       	lsr	r19
 13e:	27 95       	ror	r18
 140:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	CANIDT2 = NODE_ID << 5; //
 144:	82 95       	swap	r24
 146:	88 0f       	add	r24, r24
 148:	80 7e       	andi	r24, 0xE0	; 224
 14a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT3 = 0x00; 		// ""
 14e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT4 = 0x00; 		// ""
 152:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	
	CANIDM1 = 0b11111111;   // Receive Address
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDM2 = 0b11100000;	//
 15c:	80 ee       	ldi	r24, 0xE0	; 224
 15e:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>

	CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 3 << DLC0));  // Enable Reception | 11 bit | IDE DLC8
 162:	83 e8       	ldi	r24, 0x83	; 131
 164:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 168:	08 95       	ret

0000016a <can_tx>:
}

//***** CAN Creating TX *****************************************************
void can_tx(uint16_t Address, uint8_t DLC)
{	
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	9c 01       	movw	r18, r24
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 0 << MOBNB0 ); // select 0000 = CANMOB0
 170:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	while ( CANEN2 & ( 1 << ENMOB0 ) ); // Wait for MOb 0 to be free
 174:	ec ed       	ldi	r30, 0xDC	; 220
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	90 81       	ld	r25, Z
 17a:	90 fd       	sbrc	r25, 0
 17c:	fd cf       	rjmp	.-6      	; 0x178 <can_tx+0xe>
	
	CANSTMOB = 0x00;   // Clear mob status register
 17e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	
	CANIDT4 = 0x00;     		//
 182:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = 0x00;				//
 186:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = Address << 5;		//
 18a:	82 2f       	mov	r24, r18
 18c:	82 95       	swap	r24
 18e:	88 0f       	add	r24, r24
 190:	80 7e       	andi	r24, 0xE0	; 224
 192:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = Address >> 3;		//
 196:	36 95       	lsr	r19
 198:	27 95       	ror	r18
 19a:	36 95       	lsr	r19
 19c:	27 95       	ror	r18
 19e:	36 95       	lsr	r19
 1a0:	27 95       	ror	r18
 1a2:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 1a6:	eb ea       	ldi	r30, 0xAB	; 171
 1a8:	f1 e0       	ldi	r31, 0x01	; 1
 1aa:	23 eb       	ldi	r18, 0xB3	; 179
 1ac:	31 e0       	ldi	r19, 0x01	; 1
 1ae:	df 01       	movw	r26, r30
	
	for ( int8_t i = 0; i < 8; i++ ) CANMSG = TransmitData[i]; //CAN Data Message Register: setting the data in the message register
 1b0:	ca ef       	ldi	r28, 0xFA	; 250
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
 1b4:	8d 91       	ld	r24, X+
 1b6:	88 83       	st	Y, r24
 1b8:	a2 17       	cp	r26, r18
 1ba:	b3 07       	cpc	r27, r19
 1bc:	d9 f7       	brne	.-10     	; 0x1b4 <can_tx+0x4a>
	
	CANCDMOB = (( 1 << CONMOB0 ) | ( 0 << IDE ) | ( DLC << DLC0)); //CAN MOb Control and DLC Register: (1<<CONMOB1) = enable reception. (0<<IDE) = can standard rev 2.0A ( id length = 11 bits), (DLC << DLC0) Set *DLC* Bytes in the data field of the message.
 1be:	60 64       	ori	r22, 0x40	; 64
 1c0:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	while ( ! ( CANSTMOB & ( 1 << TXOK ) ) );	// wait for TXOK flag set	// JEROEN PAS NOU OP JONGE
 1c4:	ae ee       	ldi	r26, 0xEE	; 238
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	8c 91       	ld	r24, X
 1ca:	86 ff       	sbrs	r24, 6
 1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <can_tx+0x5e>
	
	CANCDMOB = 0x00; //Clear CAN Mob Control and DLC Register
 1ce:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	CANSTMOB = 0x00; // Clear TXOK flag
 1d2:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select 0001 = MOB1
 1d6:	80 e1       	ldi	r24, 0x10	; 16
 1d8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
	for (int8_t i = 0; i < 8; i++) TransmitData[i] = 0; //Resetting Transmit Data
 1dc:	11 92       	st	Z+, r1
 1de:	2e 17       	cp	r18, r30
 1e0:	3f 07       	cpc	r19, r31
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <can_tx+0x72>
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <data_send_arr>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "CAN.h"

void data_send_arr(uint8_t header, uint8_t buffer[], uint16_t node, uint8_t bufferlen)
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
	TransmitData[0] = header;
 1ee:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <TransmitData>
	for(uint8_t i = 0; i < bufferlen; i++) TransmitData[i+1] = buffer[i];
 1f2:	22 23       	and	r18, r18
 1f4:	79 f0       	breq	.+30     	; 0x214 <data_send_arr+0x2a>
 1f6:	fb 01       	movw	r30, r22
 1f8:	ac ea       	ldi	r26, 0xAC	; 172
 1fa:	b1 e0       	ldi	r27, 0x01	; 1
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	82 0f       	add	r24, r18
 200:	c8 2f       	mov	r28, r24
 202:	d0 e0       	ldi	r29, 0x00	; 0
 204:	21 96       	adiw	r28, 0x01	; 1
 206:	c6 0f       	add	r28, r22
 208:	d7 1f       	adc	r29, r23
 20a:	81 91       	ld	r24, Z+
 20c:	8d 93       	st	X+, r24
 20e:	ec 17       	cp	r30, r28
 210:	fd 07       	cpc	r31, r29
 212:	d9 f7       	brne	.-10     	; 0x20a <data_send_arr+0x20>
	can_tx(node, bufferlen + 1);
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	62 0f       	add	r22, r18
 218:	ca 01       	movw	r24, r20
 21a:	a7 df       	rcall	.-178    	; 0x16a <can_tx>
}
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <data_send8>:
void data_send8(uint8_t header, uint8_t data, uint16_t node)
{
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	1f 92       	push	r1
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
	uint8_t d[] = {data};
 22c:	69 83       	std	Y+1, r22	; 0x01
	data_send_arr(header, d, node, 1);
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	be 01       	movw	r22, r28
 232:	6f 5f       	subi	r22, 0xFF	; 255
 234:	7f 4f       	sbci	r23, 0xFF	; 255
 236:	d9 df       	rcall	.-78     	; 0x1ea <data_send_arr>
}
 238:	0f 90       	pop	r0
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <log_print>:
	
	if(wait)
	{
		while(outvars[node] != 0) ;
	}
}
 240:	08 95       	ret

00000242 <log_println>:
 242:	08 95       	ret

00000244 <data_request>:
 244:	cf 92       	push	r12
 246:	df 92       	push	r13
 248:	ef 92       	push	r14
 24a:	ff 92       	push	r15
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	8c 01       	movw	r16, r24
 256:	d6 2e       	mov	r13, r22
 258:	7a 01       	movw	r14, r20
 25a:	c2 2e       	mov	r12, r18
 25c:	c6 2f       	mov	r28, r22
 25e:	d0 e0       	ldi	r29, 0x00	; 0
 260:	fe 01       	movw	r30, r28
 262:	ee 0f       	add	r30, r30
 264:	ff 1f       	adc	r31, r31
 266:	e5 54       	subi	r30, 0x45	; 69
 268:	fe 4f       	sbci	r31, 0xFE	; 254
 26a:	20 81       	ld	r18, Z
 26c:	31 81       	ldd	r19, Z+1	; 0x01
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	21 15       	cp	r18, r1
 272:	31 05       	cpc	r19, r1
 274:	19 f0       	breq	.+6      	; 0x27c <data_request+0x38>
 276:	81 50       	subi	r24, 0x01	; 1
 278:	d9 f7       	brne	.-10     	; 0x270 <data_request+0x2c>
 27a:	02 c0       	rjmp	.+4      	; 0x280 <data_request+0x3c>
 27c:	82 30       	cpi	r24, 0x02	; 2
 27e:	18 f4       	brcc	.+6      	; 0x286 <data_request+0x42>
 280:	88 e0       	ldi	r24, 0x08	; 8
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	ba d0       	rcall	.+372    	; 0x3fa <e_throw>
 286:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end>
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 28c:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
 290:	fe 01       	movw	r30, r28
 292:	ee 0f       	add	r30, r30
 294:	ff 1f       	adc	r31, r31
 296:	e5 54       	subi	r30, 0x45	; 69
 298:	fe 4f       	sbci	r31, 0xFE	; 254
 29a:	f1 82       	std	Z+1, r15	; 0x01
 29c:	e0 82       	st	Z, r14
 29e:	a8 01       	movw	r20, r16
 2a0:	6d 2d       	mov	r22, r13
 2a2:	8d e3       	ldi	r24, 0x3D	; 61
 2a4:	be df       	rcall	.-132    	; 0x222 <data_send8>
 2a6:	cc 20       	and	r12, r12
 2a8:	41 f0       	breq	.+16     	; 0x2ba <data_request+0x76>
 2aa:	cc 0f       	add	r28, r28
 2ac:	dd 1f       	adc	r29, r29
 2ae:	c5 54       	subi	r28, 0x45	; 69
 2b0:	de 4f       	sbci	r29, 0xFE	; 254
 2b2:	88 81       	ld	r24, Y
 2b4:	99 81       	ldd	r25, Y+1	; 0x01
 2b6:	00 97       	sbiw	r24, 0x00	; 0
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <data_request+0x72>
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	ff 90       	pop	r15
 2c4:	ef 90       	pop	r14
 2c6:	df 90       	pop	r13
 2c8:	cf 90       	pop	r12
 2ca:	08 95       	ret

000002cc <__vector_18>:

ISR(CANIT_vect)
{
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	0b b6       	in	r0, 0x3b	; 59
 2d8:	0f 92       	push	r0
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	4f 93       	push	r20
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31
	//Some necessary CAN setup stuff
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select CANMOB 0001 = MOB1
 2f2:	80 e1       	ldi	r24, 0x10	; 16
 2f4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	//Get message length and write message in ReceiveData
	uint8_t length = ( CANCDMOB & 0x0F );
 2f8:	60 91 ef 00 	lds	r22, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 2fc:	6f 70       	andi	r22, 0x0F	; 15
	for ( int8_t i = 0; i < length; i++ ) ReceiveData[i] = CANMSG;
 2fe:	46 2f       	mov	r20, r22
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	14 16       	cp	r1, r20
 304:	15 06       	cpc	r1, r21
 306:	94 f4       	brge	.+36     	; 0x32c <__vector_18+0x60>
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	ea ef       	ldi	r30, 0xFA	; 250
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	30 81       	ld	r19, Z
 314:	dc 01       	movw	r26, r24
 316:	ad 54       	subi	r26, 0x4D	; 77
 318:	be 4f       	sbci	r27, 0xFE	; 254
 31a:	3c 93       	st	X, r19
 31c:	2f 5f       	subi	r18, 0xFF	; 255
 31e:	82 2f       	mov	r24, r18
 320:	02 2e       	mov	r0, r18
 322:	00 0c       	add	r0, r0
 324:	99 0b       	sbc	r25, r25
 326:	84 17       	cp	r24, r20
 328:	95 07       	cpc	r25, r21
 32a:	9c f3       	brlt	.-26     	; 0x312 <__vector_18+0x46>
	
	uint16_t ReceiveAddress = (CANIDT1 << 3) | ((CANIDT2 & 0b11100000) >> 5);
 32c:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 330:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	
	if(ReceiveAddress == MASTERID)
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	22 95       	swap	r18
 344:	26 95       	lsr	r18
 346:	27 70       	andi	r18, 0x07	; 7
 348:	82 2b       	or	r24, r18
 34a:	87 31       	cpi	r24, 0x17	; 23
 34c:	93 40       	sbci	r25, 0x03	; 3
 34e:	d9 f5       	brne	.+118    	; 0x3c6 <__vector_18+0xfa>
	{
		//Get the output variable to write to
		volatile uint16_t *ovar = outvars[ReceiveData[0]];
 350:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <ReceiveData>
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	ee 0f       	add	r30, r30
 358:	ff 1f       	adc	r31, r31
 35a:	e5 54       	subi	r30, 0x45	; 69
 35c:	fe 4f       	sbci	r31, 0xFE	; 254
 35e:	01 90       	ld	r0, Z+
 360:	f0 81       	ld	r31, Z
 362:	e0 2d       	mov	r30, r0
		
		if(ovar != 0)
 364:	30 97       	sbiw	r30, 0x00	; 0
 366:	61 f1       	breq	.+88     	; 0x3c0 <__vector_18+0xf4>
		{
			if(length == 1)			//ECU command returns
 368:	61 30       	cpi	r22, 0x01	; 1
 36a:	e1 f0       	breq	.+56     	; 0x3a4 <__vector_18+0xd8>
				{/*do nothing*/}
			else if(length == 2)	//ECU data request returns
 36c:	62 30       	cpi	r22, 0x02	; 2
 36e:	31 f4       	brne	.+12     	; 0x37c <__vector_18+0xb0>
				*(ovar) = ReceiveData[1];
 370:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <ReceiveData+0x1>
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	91 83       	std	Z+1, r25	; 0x01
 378:	80 83       	st	Z, r24
 37a:	14 c0       	rjmp	.+40     	; 0x3a4 <__vector_18+0xd8>
			else if(length == 3)	//General data request returns
 37c:	63 30       	cpi	r22, 0x03	; 3
 37e:	79 f4       	brne	.+30     	; 0x39e <__vector_18+0xd2>
				*(ovar) = (ReceiveData[1] +  (ReceiveData[2] << 8));
 380:	a3 eb       	ldi	r26, 0xB3	; 179
 382:	b1 e0       	ldi	r27, 0x01	; 1
 384:	12 96       	adiw	r26, 0x02	; 2
 386:	8c 91       	ld	r24, X
 388:	12 97       	sbiw	r26, 0x02	; 2
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	98 2f       	mov	r25, r24
 38e:	88 27       	eor	r24, r24
 390:	11 96       	adiw	r26, 0x01	; 1
 392:	2c 91       	ld	r18, X
 394:	82 0f       	add	r24, r18
 396:	91 1d       	adc	r25, r1
 398:	91 83       	std	Z+1, r25	; 0x01
 39a:	80 83       	st	Z, r24
 39c:	03 c0       	rjmp	.+6      	; 0x3a4 <__vector_18+0xd8>
			else
				e_throw("Unknown rx length");
 39e:	83 e4       	ldi	r24, 0x43	; 67
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	2b d0       	rcall	.+86     	; 0x3fa <e_throw>
			////This creates 600kb of data per minute per sensor if read out once every ms
			//log_data(ReceiveData[0], *(ovar));
			
			ovar = 0;
			
			if(waitingon > 0)
 3a4:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end>
 3a8:	88 23       	and	r24, r24
 3aa:	31 f0       	breq	.+12     	; 0x3b8 <__vector_18+0xec>
				waitingon--;
 3ac:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end>
 3b0:	81 50       	subi	r24, 0x01	; 1
 3b2:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
 3b6:	07 c0       	rjmp	.+14     	; 0x3c6 <__vector_18+0xfa>
			else
				e_throw("More rx than tx");
 3b8:	85 e5       	ldi	r24, 0x55	; 85
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	1e d0       	rcall	.+60     	; 0x3fa <e_throw>
		}
		else
		{
			e_throw("Got unexpected rx");
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <__vector_18+0xfa>
 3c0:	85 e6       	ldi	r24, 0x65	; 101
 3c2:	91 e0       	ldi	r25, 0x01	; 1
		}
	}
	
	CANSTMOB = 0x00; // Clear RXOK flag
 3c4:	1a d0       	rcall	.+52     	; 0x3fa <e_throw>
 3c6:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 3 << DLC0)); //CAN MOb Control and DLC Register: (1<<CONMOB1) = enable reception. (0<<IDE) = can standard rev 2.0A ( id length = 11 bits), (3 << DLC0) 3 Bytes in the data field of the message.
 3ca:	83 e8       	ldi	r24, 0x83	; 131
 3cc:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 0 << MOBNB0 ); // select 0000 = CANMOB0
 3d0:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
}
 3d4:	ff 91       	pop	r31
 3d6:	ef 91       	pop	r30
 3d8:	bf 91       	pop	r27
 3da:	af 91       	pop	r26
 3dc:	9f 91       	pop	r25
 3de:	8f 91       	pop	r24
 3e0:	7f 91       	pop	r23
 3e2:	6f 91       	pop	r22
 3e4:	5f 91       	pop	r21
 3e6:	4f 91       	pop	r20
 3e8:	3f 91       	pop	r19
 3ea:	2f 91       	pop	r18
 3ec:	0f 90       	pop	r0
 3ee:	0b be       	out	0x3b, r0	; 59
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <e_throw>:
#include "Data.h"

#include "Error.h"

void e_throw(char* error)
{
 3fa:	ec 01       	movw	r28, r24
	//Log the error
	log_print("ERROR: ");
 3fc:	87 e7       	ldi	r24, 0x77	; 119
 3fe:	91 e0       	ldi	r25, 0x01	; 1
	log_println(error);
 400:	1f df       	rcall	.-450    	; 0x240 <log_print>
 402:	ce 01       	movw	r24, r28
	
	//TEMP: Stop the program for the time being
	cli();
 404:	1e df       	rcall	.-452    	; 0x242 <log_println>
 406:	f8 94       	cli
 408:	ff cf       	rjmp	.-2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>

0000040a <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 40a:	16 9a       	sbi	0x02, 6	; 2
 40c:	85 e0       	ldi	r24, 0x05	; 5
 40e:	8a 95       	dec	r24
 410:	f1 f7       	brne	.-4      	; 0x40e <toggle_e+0x4>
 412:	00 00       	nop
 414:	16 98       	cbi	0x02, 6	; 2
 416:	08 95       	ret

00000418 <lcd_write>:
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	d8 2f       	mov	r29, r24
 41e:	66 23       	and	r22, r22
 420:	11 f0       	breq	.+4      	; 0x426 <lcd_write+0xe>
 422:	14 9a       	sbi	0x02, 4	; 2
 424:	01 c0       	rjmp	.+2      	; 0x428 <lcd_write+0x10>
 426:	14 98       	cbi	0x02, 4	; 2
 428:	15 98       	cbi	0x02, 5	; 2
 42a:	81 b1       	in	r24, 0x01	; 1
 42c:	8f 60       	ori	r24, 0x0F	; 15
 42e:	81 b9       	out	0x01, r24	; 1
 430:	c2 b1       	in	r28, 0x02	; 2
 432:	c0 7f       	andi	r28, 0xF0	; 240
 434:	8d 2f       	mov	r24, r29
 436:	82 95       	swap	r24
 438:	8f 70       	andi	r24, 0x0F	; 15
 43a:	8c 2b       	or	r24, r28
 43c:	82 b9       	out	0x02, r24	; 2
 43e:	e5 df       	rcall	.-54     	; 0x40a <toggle_e>
 440:	df 70       	andi	r29, 0x0F	; 15
 442:	dc 2b       	or	r29, r28
 444:	d2 b9       	out	0x02, r29	; 2
 446:	e1 df       	rcall	.-62     	; 0x40a <toggle_e>
 448:	cf 60       	ori	r28, 0x0F	; 15
 44a:	c2 b9       	out	0x02, r28	; 2
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <lcd_read>:
 452:	88 23       	and	r24, r24
 454:	11 f0       	breq	.+4      	; 0x45a <lcd_read+0x8>
 456:	14 9a       	sbi	0x02, 4	; 2
 458:	01 c0       	rjmp	.+2      	; 0x45c <lcd_read+0xa>
 45a:	14 98       	cbi	0x02, 4	; 2
 45c:	15 9a       	sbi	0x02, 5	; 2
 45e:	81 b1       	in	r24, 0x01	; 1
 460:	80 7f       	andi	r24, 0xF0	; 240
 462:	81 b9       	out	0x01, r24	; 1
 464:	16 9a       	sbi	0x02, 6	; 2
 466:	85 e0       	ldi	r24, 0x05	; 5
 468:	8a 95       	dec	r24
 46a:	f1 f7       	brne	.-4      	; 0x468 <lcd_read+0x16>
 46c:	00 00       	nop
 46e:	90 b1       	in	r25, 0x00	; 0
 470:	16 98       	cbi	0x02, 6	; 2
 472:	85 e0       	ldi	r24, 0x05	; 5
 474:	8a 95       	dec	r24
 476:	f1 f7       	brne	.-4      	; 0x474 <lcd_read+0x22>
 478:	00 00       	nop
 47a:	16 9a       	sbi	0x02, 6	; 2
 47c:	85 e0       	ldi	r24, 0x05	; 5
 47e:	8a 95       	dec	r24
 480:	f1 f7       	brne	.-4      	; 0x47e <lcd_read+0x2c>
 482:	00 00       	nop
 484:	20 b1       	in	r18, 0x00	; 0
 486:	2f 70       	andi	r18, 0x0F	; 15
 488:	89 2f       	mov	r24, r25
 48a:	82 95       	swap	r24
 48c:	80 7f       	andi	r24, 0xF0	; 240
 48e:	16 98       	cbi	0x02, 6	; 2
 490:	82 2b       	or	r24, r18
 492:	08 95       	ret

00000494 <lcd_waitbusy>:
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	dd df       	rcall	.-70     	; 0x452 <lcd_read>
 498:	88 23       	and	r24, r24
 49a:	e4 f3       	brlt	.-8      	; 0x494 <lcd_waitbusy>
 49c:	85 e1       	ldi	r24, 0x15	; 21
 49e:	8a 95       	dec	r24
 4a0:	f1 f7       	brne	.-4      	; 0x49e <lcd_waitbusy+0xa>
 4a2:	00 00       	nop
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	d5 cf       	rjmp	.-86     	; 0x452 <lcd_read>
 4a8:	08 95       	ret

000004aa <lcd_command>:
 4aa:	cf 93       	push	r28
 4ac:	c8 2f       	mov	r28, r24
 4ae:	f2 df       	rcall	.-28     	; 0x494 <lcd_waitbusy>
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	8c 2f       	mov	r24, r28
 4b4:	b1 df       	rcall	.-158    	; 0x418 <lcd_write>
 4b6:	cf 91       	pop	r28
 4b8:	08 95       	ret

000004ba <lcd_gotoxy>:
 4ba:	61 11       	cpse	r22, r1
 4bc:	03 c0       	rjmp	.+6      	; 0x4c4 <lcd_gotoxy+0xa>
 4be:	80 58       	subi	r24, 0x80	; 128
 4c0:	f4 cf       	rjmp	.-24     	; 0x4aa <lcd_command>
 4c2:	08 95       	ret
 4c4:	80 54       	subi	r24, 0x40	; 64
 4c6:	f1 cf       	rjmp	.-30     	; 0x4aa <lcd_command>
 4c8:	08 95       	ret

000004ca <lcd_clrscr>:
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	ee cf       	rjmp	.-36     	; 0x4aa <lcd_command>
 4ce:	08 95       	ret

000004d0 <lcd_putc>:
 4d0:	cf 93       	push	r28
 4d2:	c8 2f       	mov	r28, r24
 4d4:	df df       	rcall	.-66     	; 0x494 <lcd_waitbusy>
 4d6:	ca 30       	cpi	r28, 0x0A	; 10
 4d8:	41 f4       	brne	.+16     	; 0x4ea <lcd_putc+0x1a>
 4da:	80 34       	cpi	r24, 0x40	; 64
 4dc:	10 f0       	brcs	.+4      	; 0x4e2 <lcd_putc+0x12>
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <lcd_putc+0x14>
 4e2:	80 e4       	ldi	r24, 0x40	; 64
 4e4:	80 58       	subi	r24, 0x80	; 128
 4e6:	e1 df       	rcall	.-62     	; 0x4aa <lcd_command>
 4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <lcd_putc+0x20>
 4ea:	61 e0       	ldi	r22, 0x01	; 1
 4ec:	8c 2f       	mov	r24, r28
 4ee:	94 df       	rcall	.-216    	; 0x418 <lcd_write>
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <lcd_puts>:
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	ec 01       	movw	r28, r24
 4fa:	21 96       	adiw	r28, 0x01	; 1
 4fc:	fc 01       	movw	r30, r24
 4fe:	80 81       	ld	r24, Z
 500:	88 23       	and	r24, r24
 502:	21 f0       	breq	.+8      	; 0x50c <lcd_puts+0x18>
 504:	e5 df       	rcall	.-54     	; 0x4d0 <lcd_putc>
 506:	89 91       	ld	r24, Y+
 508:	81 11       	cpse	r24, r1
 50a:	fc cf       	rjmp	.-8      	; 0x504 <lcd_puts+0x10>
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 512:	cf 93       	push	r28
 514:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 516:	81 b1       	in	r24, 0x01	; 1
 518:	8f 67       	ori	r24, 0x7F	; 127
 51a:	81 b9       	out	0x01, r24	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 51c:	8f ef       	ldi	r24, 0xFF	; 255
 51e:	99 ef       	ldi	r25, 0xF9	; 249
 520:	01 97       	sbiw	r24, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <lcd_init+0xe>
 524:	00 c0       	rjmp	.+0      	; 0x526 <lcd_init+0x14>
 526:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 528:	11 9a       	sbi	0x02, 1	; 2
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
    lcd_e_toggle();
 52a:	10 9a       	sbi	0x02, 0	; 2
 52c:	6e df       	rcall	.-292    	; 0x40a <toggle_e>
 52e:	8f e1       	ldi	r24, 0x1F	; 31
 530:	9e e4       	ldi	r25, 0x4E	; 78
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <lcd_init+0x20>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 536:	00 c0       	rjmp	.+0      	; 0x538 <lcd_init+0x26>
 538:	00 00       	nop
 53a:	67 df       	rcall	.-306    	; 0x40a <toggle_e>
 53c:	8f ef       	ldi	r24, 0xFF	; 255
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <lcd_init+0x2e>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 544:	00 c0       	rjmp	.+0      	; 0x546 <lcd_init+0x34>
 546:	00 00       	nop
 548:	60 df       	rcall	.-320    	; 0x40a <toggle_e>
 54a:	8f ef       	ldi	r24, 0xFF	; 255
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <lcd_init+0x3c>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 552:	00 c0       	rjmp	.+0      	; 0x554 <lcd_init+0x42>
    lcd_e_toggle();
 554:	00 00       	nop
 556:	10 98       	cbi	0x02, 0	; 2
 558:	58 df       	rcall	.-336    	; 0x40a <toggle_e>
 55a:	8f ef       	ldi	r24, 0xFF	; 255
 55c:	90 e0       	ldi	r25, 0x00	; 0
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 55e:	01 97       	sbiw	r24, 0x01	; 1
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 560:	f1 f7       	brne	.-4      	; 0x55e <lcd_init+0x4c>
 562:	00 c0       	rjmp	.+0      	; 0x564 <lcd_init+0x52>
    lcd_clrscr();                           /* display clear                */ 
 564:	00 00       	nop
 566:	88 e2       	ldi	r24, 0x28	; 40
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 568:	a0 df       	rcall	.-192    	; 0x4aa <lcd_command>
 56a:	88 e0       	ldi	r24, 0x08	; 8
 56c:	9e df       	rcall	.-196    	; 0x4aa <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 56e:	ad df       	rcall	.-166    	; 0x4ca <lcd_clrscr>
 570:	86 e0       	ldi	r24, 0x06	; 6
 572:	9b df       	rcall	.-202    	; 0x4aa <lcd_command>

}/* lcd_init */
 574:	8c 2f       	mov	r24, r28
 576:	99 df       	rcall	.-206    	; 0x4aa <lcd_command>
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

0000057c <__vector_17>:

uint16_t gas1val = 0;
char buffer[4][21];

ISR(TIMER0_OVF_vect)
{
 57c:	1f 92       	push	r1
 57e:	0f 92       	push	r0
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	0f 92       	push	r0
 584:	11 24       	eor	r1, r1
	
}
 586:	0f 90       	pop	r0
 588:	0f be       	out	0x3f, r0	; 63
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <__vector_10>:

ISR(TIMER2_OVF_vect) //8 Hz
{
 590:	1f 92       	push	r1
 592:	0f 92       	push	r0
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	0f 92       	push	r0
 598:	11 24       	eor	r1, r1
 59a:	0b b6       	in	r0, 0x3b	; 59
 59c:	0f 92       	push	r0
 59e:	0f 93       	push	r16
 5a0:	1f 93       	push	r17
 5a2:	2f 93       	push	r18
 5a4:	3f 93       	push	r19
 5a6:	4f 93       	push	r20
 5a8:	5f 93       	push	r21
 5aa:	6f 93       	push	r22
 5ac:	7f 93       	push	r23
 5ae:	8f 93       	push	r24
 5b0:	9f 93       	push	r25
 5b2:	af 93       	push	r26
 5b4:	bf 93       	push	r27
 5b6:	cf 93       	push	r28
 5b8:	ef 93       	push	r30
 5ba:	ff 93       	push	r31
	TCNT2 = _TM2;
 5bc:	80 ec       	ldi	r24, 0xC0	; 192
 5be:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	
	//test stuff
	data_request(NODEID2, GAS_1, &gas1val, TRUE);
 5c2:	2f ef       	ldi	r18, 0xFF	; 255
 5c4:	49 ea       	ldi	r20, 0xA9	; 169
 5c6:	51 e0       	ldi	r21, 0x01	; 1
 5c8:	61 e2       	ldi	r22, 0x21	; 33
 5ca:	82 e0       	ldi	r24, 0x02	; 2
 5cc:	92 e0       	ldi	r25, 0x02	; 2
 5ce:	3a de       	rcall	.-908    	; 0x244 <data_request>
	
	//test print to lcd
	snprintf(buffer[0], sizeof buffer[0], "gas:%5d           ", gas1val);
 5d0:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <gas1val+0x1>
 5d4:	8f 93       	push	r24
 5d6:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <gas1val>
 5da:	8f 93       	push	r24
 5dc:	8f e7       	ldi	r24, 0x7F	; 127
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	9f 93       	push	r25
 5e2:	8f 93       	push	r24
 5e4:	1f 92       	push	r1
 5e6:	85 e1       	ldi	r24, 0x15	; 21
 5e8:	8f 93       	push	r24
 5ea:	89 eb       	ldi	r24, 0xB9	; 185
 5ec:	93 e0       	ldi	r25, 0x03	; 3
 5ee:	9f 93       	push	r25
 5f0:	8f 93       	push	r24
 5f2:	6d d0       	rcall	.+218    	; 0x6ce <snprintf>
	snprintf(buffer[1], sizeof buffer[1], "                    ");
 5f4:	85 e1       	ldi	r24, 0x15	; 21
 5f6:	e2 e9       	ldi	r30, 0x92	; 146
 5f8:	f1 e0       	ldi	r31, 0x01	; 1
 5fa:	ae ec       	ldi	r26, 0xCE	; 206
 5fc:	b3 e0       	ldi	r27, 0x03	; 3
 5fe:	01 90       	ld	r0, Z+
 600:	0d 92       	st	X+, r0
 602:	8a 95       	dec	r24
 604:	e1 f7       	brne	.-8      	; 0x5fe <__vector_10+0x6e>
	snprintf(buffer[2], sizeof buffer[2], "                    ");
 606:	85 e1       	ldi	r24, 0x15	; 21
 608:	e2 e9       	ldi	r30, 0x92	; 146
 60a:	f1 e0       	ldi	r31, 0x01	; 1
 60c:	a3 ee       	ldi	r26, 0xE3	; 227
 60e:	b3 e0       	ldi	r27, 0x03	; 3
 610:	01 90       	ld	r0, Z+
 612:	0d 92       	st	X+, r0
 614:	8a 95       	dec	r24
 616:	e1 f7       	brne	.-8      	; 0x610 <__vector_10+0x80>
	snprintf(buffer[3], sizeof buffer[3], "                    ");
 618:	85 e1       	ldi	r24, 0x15	; 21
 61a:	e2 e9       	ldi	r30, 0x92	; 146
 61c:	f1 e0       	ldi	r31, 0x01	; 1
 61e:	a8 ef       	ldi	r26, 0xF8	; 248
 620:	b3 e0       	ldi	r27, 0x03	; 3
 622:	01 90       	ld	r0, Z+
 624:	0d 92       	st	X+, r0
 626:	8a 95       	dec	r24
 628:	e1 f7       	brne	.-8      	; 0x622 <__vector_10+0x92>
 62a:	09 eb       	ldi	r16, 0xB9	; 185
 62c:	13 e0       	ldi	r17, 0x03	; 3
 62e:	8d b7       	in	r24, 0x3d	; 61
 630:	9e b7       	in	r25, 0x3e	; 62
 632:	08 96       	adiw	r24, 0x08	; 8
 634:	0f b6       	in	r0, 0x3f	; 63
 636:	f8 94       	cli
 638:	9e bf       	out	0x3e, r25	; 62
 63a:	0f be       	out	0x3f, r0	; 63
 63c:	8d bf       	out	0x3d, r24	; 61
	for(uint8_t y = 0; y < 4; y++)
	{
		lcd_gotoxy(0, y);
 63e:	c0 e0       	ldi	r28, 0x00	; 0
 640:	6c 2f       	mov	r22, r28
		lcd_puts(buffer[y]);
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	3a df       	rcall	.-396    	; 0x4ba <lcd_gotoxy>
 646:	c8 01       	movw	r24, r16
	//test print to lcd
	snprintf(buffer[0], sizeof buffer[0], "gas:%5d           ", gas1val);
	snprintf(buffer[1], sizeof buffer[1], "                    ");
	snprintf(buffer[2], sizeof buffer[2], "                    ");
	snprintf(buffer[3], sizeof buffer[3], "                    ");
	for(uint8_t y = 0; y < 4; y++)
 648:	55 df       	rcall	.-342    	; 0x4f4 <lcd_puts>
 64a:	cf 5f       	subi	r28, 0xFF	; 255
 64c:	0b 5e       	subi	r16, 0xEB	; 235
 64e:	1f 4f       	sbci	r17, 0xFF	; 255
 650:	c4 30       	cpi	r28, 0x04	; 4
	{
		lcd_gotoxy(0, y);
		lcd_puts(buffer[y]);
	}
}
 652:	b1 f7       	brne	.-20     	; 0x640 <__vector_10+0xb0>
 654:	ff 91       	pop	r31
 656:	ef 91       	pop	r30
 658:	cf 91       	pop	r28
 65a:	bf 91       	pop	r27
 65c:	af 91       	pop	r26
 65e:	9f 91       	pop	r25
 660:	8f 91       	pop	r24
 662:	7f 91       	pop	r23
 664:	6f 91       	pop	r22
 666:	5f 91       	pop	r21
 668:	4f 91       	pop	r20
 66a:	3f 91       	pop	r19
 66c:	2f 91       	pop	r18
 66e:	1f 91       	pop	r17
 670:	0f 91       	pop	r16
 672:	0f 90       	pop	r0
 674:	0b be       	out	0x3b, r0	; 59
 676:	0f 90       	pop	r0
 678:	0f be       	out	0x3f, r0	; 63
 67a:	0f 90       	pop	r0
 67c:	1f 90       	pop	r1
 67e:	18 95       	reti

00000680 <main>:

int main()
{
	//Initialize timer0
	TCCR0A |= (1 << CS02);					//256 Prescaler
 680:	84 b5       	in	r24, 0x24	; 36
 682:	84 60       	ori	r24, 0x04	; 4
 684:	84 bd       	out	0x24, r24	; 36
	TCNT0 = _TM0;							//Set initial counter value
 686:	81 ec       	ldi	r24, 0xC1	; 193
 688:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= (1 << TOIE0);					//Overflow Interrupt Enable
 68a:	ee e6       	ldi	r30, 0x6E	; 110
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	80 81       	ld	r24, Z
 690:	81 60       	ori	r24, 0x01	; 1
 692:	80 83       	st	Z, r24
	
	//Initialize timer2
	ASSR  = (1<< AS2);						//Enable asynchronous mode
 694:	88 e0       	ldi	r24, 0x08	; 8
 696:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	TCNT2 = _TM2;							//Set initial counter value
 69a:	80 ec       	ldi	r24, 0xC0	; 192
 69c:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	TCCR2A |= (1 << CS01)|(1 << CS00);		//128 Prescaler
 6a0:	e0 eb       	ldi	r30, 0xB0	; 176
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	80 81       	ld	r24, Z
 6a6:	83 60       	ori	r24, 0x03	; 3
 6a8:	80 83       	st	Z, r24
	TIMSK2  = (1 << TOIE2);					//Overflow interrupt enable
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	
	can_init();
	can_rx(MASTERID);
 6b0:	0f dd       	rcall	.-1506   	; 0xd0 <can_init>
 6b2:	87 e1       	ldi	r24, 0x17	; 23
	
	lcd_init(LCD_DISP_ON);
 6b4:	93 e0       	ldi	r25, 0x03	; 3
 6b6:	3a dd       	rcall	.-1420   	; 0x12c <can_rx>
 6b8:	8c e0       	ldi	r24, 0x0C	; 12
	
	//Set CPU into sleep mode(simultaneously enabling interrupts)
	set_sleep_mode(SLEEP_MODE_IDLE);
 6ba:	2b df       	rcall	.-426    	; 0x512 <lcd_init>
 6bc:	83 b7       	in	r24, 0x33	; 51
 6be:	81 7f       	andi	r24, 0xF1	; 241
	sleep_enable();
 6c0:	83 bf       	out	0x33, r24	; 51
 6c2:	83 b7       	in	r24, 0x33	; 51
 6c4:	81 60       	ori	r24, 0x01	; 1
	sei();
 6c6:	83 bf       	out	0x33, r24	; 51
	sleep_cpu();
 6c8:	78 94       	sei
 6ca:	88 95       	sleep
 6cc:	ff cf       	rjmp	.-2      	; 0x6cc <main+0x4c>

000006ce <snprintf>:
 6ce:	0f 93       	push	r16
 6d0:	1f 93       	push	r17
 6d2:	cf 93       	push	r28
 6d4:	df 93       	push	r29
 6d6:	cd b7       	in	r28, 0x3d	; 61
 6d8:	de b7       	in	r29, 0x3e	; 62
 6da:	2e 97       	sbiw	r28, 0x0e	; 14
 6dc:	0f b6       	in	r0, 0x3f	; 63
 6de:	f8 94       	cli
 6e0:	de bf       	out	0x3e, r29	; 62
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	cd bf       	out	0x3d, r28	; 61
 6e6:	0d 89       	ldd	r16, Y+21	; 0x15
 6e8:	1e 89       	ldd	r17, Y+22	; 0x16
 6ea:	8f 89       	ldd	r24, Y+23	; 0x17
 6ec:	98 8d       	ldd	r25, Y+24	; 0x18
 6ee:	26 e0       	ldi	r18, 0x06	; 6
 6f0:	2c 83       	std	Y+4, r18	; 0x04
 6f2:	1a 83       	std	Y+2, r17	; 0x02
 6f4:	09 83       	std	Y+1, r16	; 0x01
 6f6:	97 ff       	sbrs	r25, 7
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <snprintf+0x30>
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	90 e8       	ldi	r25, 0x80	; 128
 6fe:	01 97       	sbiw	r24, 0x01	; 1
 700:	9e 83       	std	Y+6, r25	; 0x06
 702:	8d 83       	std	Y+5, r24	; 0x05
 704:	ae 01       	movw	r20, r28
 706:	45 5e       	subi	r20, 0xE5	; 229
 708:	5f 4f       	sbci	r21, 0xFF	; 255
 70a:	69 8d       	ldd	r22, Y+25	; 0x19
 70c:	7a 8d       	ldd	r23, Y+26	; 0x1a
 70e:	ce 01       	movw	r24, r28
 710:	01 96       	adiw	r24, 0x01	; 1
 712:	19 d0       	rcall	.+50     	; 0x746 <vfprintf>
 714:	4d 81       	ldd	r20, Y+5	; 0x05
 716:	5e 81       	ldd	r21, Y+6	; 0x06
 718:	57 fd       	sbrc	r21, 7
 71a:	0a c0       	rjmp	.+20     	; 0x730 <snprintf+0x62>
 71c:	2f 81       	ldd	r18, Y+7	; 0x07
 71e:	38 85       	ldd	r19, Y+8	; 0x08
 720:	42 17       	cp	r20, r18
 722:	53 07       	cpc	r21, r19
 724:	0c f4       	brge	.+2      	; 0x728 <snprintf+0x5a>
 726:	9a 01       	movw	r18, r20
 728:	f8 01       	movw	r30, r16
 72a:	e2 0f       	add	r30, r18
 72c:	f3 1f       	adc	r31, r19
 72e:	10 82       	st	Z, r1
 730:	2e 96       	adiw	r28, 0x0e	; 14
 732:	0f b6       	in	r0, 0x3f	; 63
 734:	f8 94       	cli
 736:	de bf       	out	0x3e, r29	; 62
 738:	0f be       	out	0x3f, r0	; 63
 73a:	cd bf       	out	0x3d, r28	; 61
 73c:	df 91       	pop	r29
 73e:	cf 91       	pop	r28
 740:	1f 91       	pop	r17
 742:	0f 91       	pop	r16
 744:	08 95       	ret

00000746 <vfprintf>:
 746:	2f 92       	push	r2
 748:	3f 92       	push	r3
 74a:	4f 92       	push	r4
 74c:	5f 92       	push	r5
 74e:	6f 92       	push	r6
 750:	7f 92       	push	r7
 752:	8f 92       	push	r8
 754:	9f 92       	push	r9
 756:	af 92       	push	r10
 758:	bf 92       	push	r11
 75a:	cf 92       	push	r12
 75c:	df 92       	push	r13
 75e:	ef 92       	push	r14
 760:	ff 92       	push	r15
 762:	0f 93       	push	r16
 764:	1f 93       	push	r17
 766:	cf 93       	push	r28
 768:	df 93       	push	r29
 76a:	cd b7       	in	r28, 0x3d	; 61
 76c:	de b7       	in	r29, 0x3e	; 62
 76e:	2b 97       	sbiw	r28, 0x0b	; 11
 770:	0f b6       	in	r0, 0x3f	; 63
 772:	f8 94       	cli
 774:	de bf       	out	0x3e, r29	; 62
 776:	0f be       	out	0x3f, r0	; 63
 778:	cd bf       	out	0x3d, r28	; 61
 77a:	6c 01       	movw	r12, r24
 77c:	7b 01       	movw	r14, r22
 77e:	8a 01       	movw	r16, r20
 780:	fc 01       	movw	r30, r24
 782:	17 82       	std	Z+7, r1	; 0x07
 784:	16 82       	std	Z+6, r1	; 0x06
 786:	83 81       	ldd	r24, Z+3	; 0x03
 788:	81 ff       	sbrs	r24, 1
 78a:	bf c1       	rjmp	.+894    	; 0xb0a <vfprintf+0x3c4>
 78c:	ce 01       	movw	r24, r28
 78e:	01 96       	adiw	r24, 0x01	; 1
 790:	3c 01       	movw	r6, r24
 792:	f6 01       	movw	r30, r12
 794:	93 81       	ldd	r25, Z+3	; 0x03
 796:	f7 01       	movw	r30, r14
 798:	93 fd       	sbrc	r25, 3
 79a:	85 91       	lpm	r24, Z+
 79c:	93 ff       	sbrs	r25, 3
 79e:	81 91       	ld	r24, Z+
 7a0:	7f 01       	movw	r14, r30
 7a2:	88 23       	and	r24, r24
 7a4:	09 f4       	brne	.+2      	; 0x7a8 <vfprintf+0x62>
 7a6:	ad c1       	rjmp	.+858    	; 0xb02 <vfprintf+0x3bc>
 7a8:	85 32       	cpi	r24, 0x25	; 37
 7aa:	39 f4       	brne	.+14     	; 0x7ba <vfprintf+0x74>
 7ac:	93 fd       	sbrc	r25, 3
 7ae:	85 91       	lpm	r24, Z+
 7b0:	93 ff       	sbrs	r25, 3
 7b2:	81 91       	ld	r24, Z+
 7b4:	7f 01       	movw	r14, r30
 7b6:	85 32       	cpi	r24, 0x25	; 37
 7b8:	21 f4       	brne	.+8      	; 0x7c2 <vfprintf+0x7c>
 7ba:	b6 01       	movw	r22, r12
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	d6 d1       	rcall	.+940    	; 0xb6c <fputc>
 7c0:	e8 cf       	rjmp	.-48     	; 0x792 <vfprintf+0x4c>
 7c2:	91 2c       	mov	r9, r1
 7c4:	21 2c       	mov	r2, r1
 7c6:	31 2c       	mov	r3, r1
 7c8:	ff e1       	ldi	r31, 0x1F	; 31
 7ca:	f3 15       	cp	r31, r3
 7cc:	d8 f0       	brcs	.+54     	; 0x804 <vfprintf+0xbe>
 7ce:	8b 32       	cpi	r24, 0x2B	; 43
 7d0:	79 f0       	breq	.+30     	; 0x7f0 <vfprintf+0xaa>
 7d2:	38 f4       	brcc	.+14     	; 0x7e2 <vfprintf+0x9c>
 7d4:	80 32       	cpi	r24, 0x20	; 32
 7d6:	79 f0       	breq	.+30     	; 0x7f6 <vfprintf+0xb0>
 7d8:	83 32       	cpi	r24, 0x23	; 35
 7da:	a1 f4       	brne	.+40     	; 0x804 <vfprintf+0xbe>
 7dc:	23 2d       	mov	r18, r3
 7de:	20 61       	ori	r18, 0x10	; 16
 7e0:	1d c0       	rjmp	.+58     	; 0x81c <vfprintf+0xd6>
 7e2:	8d 32       	cpi	r24, 0x2D	; 45
 7e4:	61 f0       	breq	.+24     	; 0x7fe <vfprintf+0xb8>
 7e6:	80 33       	cpi	r24, 0x30	; 48
 7e8:	69 f4       	brne	.+26     	; 0x804 <vfprintf+0xbe>
 7ea:	23 2d       	mov	r18, r3
 7ec:	21 60       	ori	r18, 0x01	; 1
 7ee:	16 c0       	rjmp	.+44     	; 0x81c <vfprintf+0xd6>
 7f0:	83 2d       	mov	r24, r3
 7f2:	82 60       	ori	r24, 0x02	; 2
 7f4:	38 2e       	mov	r3, r24
 7f6:	e3 2d       	mov	r30, r3
 7f8:	e4 60       	ori	r30, 0x04	; 4
 7fa:	3e 2e       	mov	r3, r30
 7fc:	2a c0       	rjmp	.+84     	; 0x852 <vfprintf+0x10c>
 7fe:	f3 2d       	mov	r31, r3
 800:	f8 60       	ori	r31, 0x08	; 8
 802:	1d c0       	rjmp	.+58     	; 0x83e <vfprintf+0xf8>
 804:	37 fc       	sbrc	r3, 7
 806:	2d c0       	rjmp	.+90     	; 0x862 <vfprintf+0x11c>
 808:	20 ed       	ldi	r18, 0xD0	; 208
 80a:	28 0f       	add	r18, r24
 80c:	2a 30       	cpi	r18, 0x0A	; 10
 80e:	40 f0       	brcs	.+16     	; 0x820 <vfprintf+0xda>
 810:	8e 32       	cpi	r24, 0x2E	; 46
 812:	b9 f4       	brne	.+46     	; 0x842 <vfprintf+0xfc>
 814:	36 fc       	sbrc	r3, 6
 816:	75 c1       	rjmp	.+746    	; 0xb02 <vfprintf+0x3bc>
 818:	23 2d       	mov	r18, r3
 81a:	20 64       	ori	r18, 0x40	; 64
 81c:	32 2e       	mov	r3, r18
 81e:	19 c0       	rjmp	.+50     	; 0x852 <vfprintf+0x10c>
 820:	36 fe       	sbrs	r3, 6
 822:	06 c0       	rjmp	.+12     	; 0x830 <vfprintf+0xea>
 824:	8a e0       	ldi	r24, 0x0A	; 10
 826:	98 9e       	mul	r9, r24
 828:	20 0d       	add	r18, r0
 82a:	11 24       	eor	r1, r1
 82c:	92 2e       	mov	r9, r18
 82e:	11 c0       	rjmp	.+34     	; 0x852 <vfprintf+0x10c>
 830:	ea e0       	ldi	r30, 0x0A	; 10
 832:	2e 9e       	mul	r2, r30
 834:	20 0d       	add	r18, r0
 836:	11 24       	eor	r1, r1
 838:	22 2e       	mov	r2, r18
 83a:	f3 2d       	mov	r31, r3
 83c:	f0 62       	ori	r31, 0x20	; 32
 83e:	3f 2e       	mov	r3, r31
 840:	08 c0       	rjmp	.+16     	; 0x852 <vfprintf+0x10c>
 842:	8c 36       	cpi	r24, 0x6C	; 108
 844:	21 f4       	brne	.+8      	; 0x84e <vfprintf+0x108>
 846:	83 2d       	mov	r24, r3
 848:	80 68       	ori	r24, 0x80	; 128
 84a:	38 2e       	mov	r3, r24
 84c:	02 c0       	rjmp	.+4      	; 0x852 <vfprintf+0x10c>
 84e:	88 36       	cpi	r24, 0x68	; 104
 850:	41 f4       	brne	.+16     	; 0x862 <vfprintf+0x11c>
 852:	f7 01       	movw	r30, r14
 854:	93 fd       	sbrc	r25, 3
 856:	85 91       	lpm	r24, Z+
 858:	93 ff       	sbrs	r25, 3
 85a:	81 91       	ld	r24, Z+
 85c:	7f 01       	movw	r14, r30
 85e:	81 11       	cpse	r24, r1
 860:	b3 cf       	rjmp	.-154    	; 0x7c8 <vfprintf+0x82>
 862:	98 2f       	mov	r25, r24
 864:	9f 7d       	andi	r25, 0xDF	; 223
 866:	95 54       	subi	r25, 0x45	; 69
 868:	93 30       	cpi	r25, 0x03	; 3
 86a:	28 f4       	brcc	.+10     	; 0x876 <vfprintf+0x130>
 86c:	0c 5f       	subi	r16, 0xFC	; 252
 86e:	1f 4f       	sbci	r17, 0xFF	; 255
 870:	9f e3       	ldi	r25, 0x3F	; 63
 872:	99 83       	std	Y+1, r25	; 0x01
 874:	0d c0       	rjmp	.+26     	; 0x890 <vfprintf+0x14a>
 876:	83 36       	cpi	r24, 0x63	; 99
 878:	31 f0       	breq	.+12     	; 0x886 <vfprintf+0x140>
 87a:	83 37       	cpi	r24, 0x73	; 115
 87c:	71 f0       	breq	.+28     	; 0x89a <vfprintf+0x154>
 87e:	83 35       	cpi	r24, 0x53	; 83
 880:	09 f0       	breq	.+2      	; 0x884 <vfprintf+0x13e>
 882:	55 c0       	rjmp	.+170    	; 0x92e <vfprintf+0x1e8>
 884:	20 c0       	rjmp	.+64     	; 0x8c6 <vfprintf+0x180>
 886:	f8 01       	movw	r30, r16
 888:	80 81       	ld	r24, Z
 88a:	89 83       	std	Y+1, r24	; 0x01
 88c:	0e 5f       	subi	r16, 0xFE	; 254
 88e:	1f 4f       	sbci	r17, 0xFF	; 255
 890:	88 24       	eor	r8, r8
 892:	83 94       	inc	r8
 894:	91 2c       	mov	r9, r1
 896:	53 01       	movw	r10, r6
 898:	12 c0       	rjmp	.+36     	; 0x8be <vfprintf+0x178>
 89a:	28 01       	movw	r4, r16
 89c:	f2 e0       	ldi	r31, 0x02	; 2
 89e:	4f 0e       	add	r4, r31
 8a0:	51 1c       	adc	r5, r1
 8a2:	f8 01       	movw	r30, r16
 8a4:	a0 80       	ld	r10, Z
 8a6:	b1 80       	ldd	r11, Z+1	; 0x01
 8a8:	36 fe       	sbrs	r3, 6
 8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <vfprintf+0x16c>
 8ac:	69 2d       	mov	r22, r9
 8ae:	70 e0       	ldi	r23, 0x00	; 0
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <vfprintf+0x170>
 8b2:	6f ef       	ldi	r22, 0xFF	; 255
 8b4:	7f ef       	ldi	r23, 0xFF	; 255
 8b6:	c5 01       	movw	r24, r10
 8b8:	4e d1       	rcall	.+668    	; 0xb56 <strnlen>
 8ba:	4c 01       	movw	r8, r24
 8bc:	82 01       	movw	r16, r4
 8be:	f3 2d       	mov	r31, r3
 8c0:	ff 77       	andi	r31, 0x7F	; 127
 8c2:	3f 2e       	mov	r3, r31
 8c4:	15 c0       	rjmp	.+42     	; 0x8f0 <vfprintf+0x1aa>
 8c6:	28 01       	movw	r4, r16
 8c8:	22 e0       	ldi	r18, 0x02	; 2
 8ca:	42 0e       	add	r4, r18
 8cc:	51 1c       	adc	r5, r1
 8ce:	f8 01       	movw	r30, r16
 8d0:	a0 80       	ld	r10, Z
 8d2:	b1 80       	ldd	r11, Z+1	; 0x01
 8d4:	36 fe       	sbrs	r3, 6
 8d6:	03 c0       	rjmp	.+6      	; 0x8de <vfprintf+0x198>
 8d8:	69 2d       	mov	r22, r9
 8da:	70 e0       	ldi	r23, 0x00	; 0
 8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <vfprintf+0x19c>
 8de:	6f ef       	ldi	r22, 0xFF	; 255
 8e0:	7f ef       	ldi	r23, 0xFF	; 255
 8e2:	c5 01       	movw	r24, r10
 8e4:	2d d1       	rcall	.+602    	; 0xb40 <strnlen_P>
 8e6:	4c 01       	movw	r8, r24
 8e8:	f3 2d       	mov	r31, r3
 8ea:	f0 68       	ori	r31, 0x80	; 128
 8ec:	3f 2e       	mov	r3, r31
 8ee:	82 01       	movw	r16, r4
 8f0:	33 fc       	sbrc	r3, 3
 8f2:	19 c0       	rjmp	.+50     	; 0x926 <vfprintf+0x1e0>
 8f4:	82 2d       	mov	r24, r2
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	88 16       	cp	r8, r24
 8fa:	99 06       	cpc	r9, r25
 8fc:	a0 f4       	brcc	.+40     	; 0x926 <vfprintf+0x1e0>
 8fe:	b6 01       	movw	r22, r12
 900:	80 e2       	ldi	r24, 0x20	; 32
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	33 d1       	rcall	.+614    	; 0xb6c <fputc>
 906:	2a 94       	dec	r2
 908:	f5 cf       	rjmp	.-22     	; 0x8f4 <vfprintf+0x1ae>
 90a:	f5 01       	movw	r30, r10
 90c:	37 fc       	sbrc	r3, 7
 90e:	85 91       	lpm	r24, Z+
 910:	37 fe       	sbrs	r3, 7
 912:	81 91       	ld	r24, Z+
 914:	5f 01       	movw	r10, r30
 916:	b6 01       	movw	r22, r12
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	28 d1       	rcall	.+592    	; 0xb6c <fputc>
 91c:	21 10       	cpse	r2, r1
 91e:	2a 94       	dec	r2
 920:	21 e0       	ldi	r18, 0x01	; 1
 922:	82 1a       	sub	r8, r18
 924:	91 08       	sbc	r9, r1
 926:	81 14       	cp	r8, r1
 928:	91 04       	cpc	r9, r1
 92a:	79 f7       	brne	.-34     	; 0x90a <vfprintf+0x1c4>
 92c:	e1 c0       	rjmp	.+450    	; 0xaf0 <vfprintf+0x3aa>
 92e:	84 36       	cpi	r24, 0x64	; 100
 930:	11 f0       	breq	.+4      	; 0x936 <vfprintf+0x1f0>
 932:	89 36       	cpi	r24, 0x69	; 105
 934:	39 f5       	brne	.+78     	; 0x984 <vfprintf+0x23e>
 936:	f8 01       	movw	r30, r16
 938:	37 fe       	sbrs	r3, 7
 93a:	07 c0       	rjmp	.+14     	; 0x94a <vfprintf+0x204>
 93c:	60 81       	ld	r22, Z
 93e:	71 81       	ldd	r23, Z+1	; 0x01
 940:	82 81       	ldd	r24, Z+2	; 0x02
 942:	93 81       	ldd	r25, Z+3	; 0x03
 944:	0c 5f       	subi	r16, 0xFC	; 252
 946:	1f 4f       	sbci	r17, 0xFF	; 255
 948:	08 c0       	rjmp	.+16     	; 0x95a <vfprintf+0x214>
 94a:	60 81       	ld	r22, Z
 94c:	71 81       	ldd	r23, Z+1	; 0x01
 94e:	07 2e       	mov	r0, r23
 950:	00 0c       	add	r0, r0
 952:	88 0b       	sbc	r24, r24
 954:	99 0b       	sbc	r25, r25
 956:	0e 5f       	subi	r16, 0xFE	; 254
 958:	1f 4f       	sbci	r17, 0xFF	; 255
 95a:	f3 2d       	mov	r31, r3
 95c:	ff 76       	andi	r31, 0x6F	; 111
 95e:	3f 2e       	mov	r3, r31
 960:	97 ff       	sbrs	r25, 7
 962:	09 c0       	rjmp	.+18     	; 0x976 <vfprintf+0x230>
 964:	90 95       	com	r25
 966:	80 95       	com	r24
 968:	70 95       	com	r23
 96a:	61 95       	neg	r22
 96c:	7f 4f       	sbci	r23, 0xFF	; 255
 96e:	8f 4f       	sbci	r24, 0xFF	; 255
 970:	9f 4f       	sbci	r25, 0xFF	; 255
 972:	f0 68       	ori	r31, 0x80	; 128
 974:	3f 2e       	mov	r3, r31
 976:	2a e0       	ldi	r18, 0x0A	; 10
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	a3 01       	movw	r20, r6
 97c:	33 d1       	rcall	.+614    	; 0xbe4 <__ultoa_invert>
 97e:	88 2e       	mov	r8, r24
 980:	86 18       	sub	r8, r6
 982:	44 c0       	rjmp	.+136    	; 0xa0c <vfprintf+0x2c6>
 984:	85 37       	cpi	r24, 0x75	; 117
 986:	31 f4       	brne	.+12     	; 0x994 <vfprintf+0x24e>
 988:	23 2d       	mov	r18, r3
 98a:	2f 7e       	andi	r18, 0xEF	; 239
 98c:	b2 2e       	mov	r11, r18
 98e:	2a e0       	ldi	r18, 0x0A	; 10
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	25 c0       	rjmp	.+74     	; 0x9de <vfprintf+0x298>
 994:	93 2d       	mov	r25, r3
 996:	99 7f       	andi	r25, 0xF9	; 249
 998:	b9 2e       	mov	r11, r25
 99a:	8f 36       	cpi	r24, 0x6F	; 111
 99c:	c1 f0       	breq	.+48     	; 0x9ce <vfprintf+0x288>
 99e:	18 f4       	brcc	.+6      	; 0x9a6 <vfprintf+0x260>
 9a0:	88 35       	cpi	r24, 0x58	; 88
 9a2:	79 f0       	breq	.+30     	; 0x9c2 <vfprintf+0x27c>
 9a4:	ae c0       	rjmp	.+348    	; 0xb02 <vfprintf+0x3bc>
 9a6:	80 37       	cpi	r24, 0x70	; 112
 9a8:	19 f0       	breq	.+6      	; 0x9b0 <vfprintf+0x26a>
 9aa:	88 37       	cpi	r24, 0x78	; 120
 9ac:	21 f0       	breq	.+8      	; 0x9b6 <vfprintf+0x270>
 9ae:	a9 c0       	rjmp	.+338    	; 0xb02 <vfprintf+0x3bc>
 9b0:	e9 2f       	mov	r30, r25
 9b2:	e0 61       	ori	r30, 0x10	; 16
 9b4:	be 2e       	mov	r11, r30
 9b6:	b4 fe       	sbrs	r11, 4
 9b8:	0d c0       	rjmp	.+26     	; 0x9d4 <vfprintf+0x28e>
 9ba:	fb 2d       	mov	r31, r11
 9bc:	f4 60       	ori	r31, 0x04	; 4
 9be:	bf 2e       	mov	r11, r31
 9c0:	09 c0       	rjmp	.+18     	; 0x9d4 <vfprintf+0x28e>
 9c2:	34 fe       	sbrs	r3, 4
 9c4:	0a c0       	rjmp	.+20     	; 0x9da <vfprintf+0x294>
 9c6:	29 2f       	mov	r18, r25
 9c8:	26 60       	ori	r18, 0x06	; 6
 9ca:	b2 2e       	mov	r11, r18
 9cc:	06 c0       	rjmp	.+12     	; 0x9da <vfprintf+0x294>
 9ce:	28 e0       	ldi	r18, 0x08	; 8
 9d0:	30 e0       	ldi	r19, 0x00	; 0
 9d2:	05 c0       	rjmp	.+10     	; 0x9de <vfprintf+0x298>
 9d4:	20 e1       	ldi	r18, 0x10	; 16
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <vfprintf+0x298>
 9da:	20 e1       	ldi	r18, 0x10	; 16
 9dc:	32 e0       	ldi	r19, 0x02	; 2
 9de:	f8 01       	movw	r30, r16
 9e0:	b7 fe       	sbrs	r11, 7
 9e2:	07 c0       	rjmp	.+14     	; 0x9f2 <vfprintf+0x2ac>
 9e4:	60 81       	ld	r22, Z
 9e6:	71 81       	ldd	r23, Z+1	; 0x01
 9e8:	82 81       	ldd	r24, Z+2	; 0x02
 9ea:	93 81       	ldd	r25, Z+3	; 0x03
 9ec:	0c 5f       	subi	r16, 0xFC	; 252
 9ee:	1f 4f       	sbci	r17, 0xFF	; 255
 9f0:	06 c0       	rjmp	.+12     	; 0x9fe <vfprintf+0x2b8>
 9f2:	60 81       	ld	r22, Z
 9f4:	71 81       	ldd	r23, Z+1	; 0x01
 9f6:	80 e0       	ldi	r24, 0x00	; 0
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	0e 5f       	subi	r16, 0xFE	; 254
 9fc:	1f 4f       	sbci	r17, 0xFF	; 255
 9fe:	a3 01       	movw	r20, r6
 a00:	f1 d0       	rcall	.+482    	; 0xbe4 <__ultoa_invert>
 a02:	88 2e       	mov	r8, r24
 a04:	86 18       	sub	r8, r6
 a06:	fb 2d       	mov	r31, r11
 a08:	ff 77       	andi	r31, 0x7F	; 127
 a0a:	3f 2e       	mov	r3, r31
 a0c:	36 fe       	sbrs	r3, 6
 a0e:	0d c0       	rjmp	.+26     	; 0xa2a <vfprintf+0x2e4>
 a10:	23 2d       	mov	r18, r3
 a12:	2e 7f       	andi	r18, 0xFE	; 254
 a14:	a2 2e       	mov	r10, r18
 a16:	89 14       	cp	r8, r9
 a18:	58 f4       	brcc	.+22     	; 0xa30 <vfprintf+0x2ea>
 a1a:	34 fe       	sbrs	r3, 4
 a1c:	0b c0       	rjmp	.+22     	; 0xa34 <vfprintf+0x2ee>
 a1e:	32 fc       	sbrc	r3, 2
 a20:	09 c0       	rjmp	.+18     	; 0xa34 <vfprintf+0x2ee>
 a22:	83 2d       	mov	r24, r3
 a24:	8e 7e       	andi	r24, 0xEE	; 238
 a26:	a8 2e       	mov	r10, r24
 a28:	05 c0       	rjmp	.+10     	; 0xa34 <vfprintf+0x2ee>
 a2a:	b8 2c       	mov	r11, r8
 a2c:	a3 2c       	mov	r10, r3
 a2e:	03 c0       	rjmp	.+6      	; 0xa36 <vfprintf+0x2f0>
 a30:	b8 2c       	mov	r11, r8
 a32:	01 c0       	rjmp	.+2      	; 0xa36 <vfprintf+0x2f0>
 a34:	b9 2c       	mov	r11, r9
 a36:	a4 fe       	sbrs	r10, 4
 a38:	0f c0       	rjmp	.+30     	; 0xa58 <vfprintf+0x312>
 a3a:	fe 01       	movw	r30, r28
 a3c:	e8 0d       	add	r30, r8
 a3e:	f1 1d       	adc	r31, r1
 a40:	80 81       	ld	r24, Z
 a42:	80 33       	cpi	r24, 0x30	; 48
 a44:	21 f4       	brne	.+8      	; 0xa4e <vfprintf+0x308>
 a46:	9a 2d       	mov	r25, r10
 a48:	99 7e       	andi	r25, 0xE9	; 233
 a4a:	a9 2e       	mov	r10, r25
 a4c:	09 c0       	rjmp	.+18     	; 0xa60 <vfprintf+0x31a>
 a4e:	a2 fe       	sbrs	r10, 2
 a50:	06 c0       	rjmp	.+12     	; 0xa5e <vfprintf+0x318>
 a52:	b3 94       	inc	r11
 a54:	b3 94       	inc	r11
 a56:	04 c0       	rjmp	.+8      	; 0xa60 <vfprintf+0x31a>
 a58:	8a 2d       	mov	r24, r10
 a5a:	86 78       	andi	r24, 0x86	; 134
 a5c:	09 f0       	breq	.+2      	; 0xa60 <vfprintf+0x31a>
 a5e:	b3 94       	inc	r11
 a60:	a3 fc       	sbrc	r10, 3
 a62:	10 c0       	rjmp	.+32     	; 0xa84 <vfprintf+0x33e>
 a64:	a0 fe       	sbrs	r10, 0
 a66:	06 c0       	rjmp	.+12     	; 0xa74 <vfprintf+0x32e>
 a68:	b2 14       	cp	r11, r2
 a6a:	80 f4       	brcc	.+32     	; 0xa8c <vfprintf+0x346>
 a6c:	28 0c       	add	r2, r8
 a6e:	92 2c       	mov	r9, r2
 a70:	9b 18       	sub	r9, r11
 a72:	0d c0       	rjmp	.+26     	; 0xa8e <vfprintf+0x348>
 a74:	b2 14       	cp	r11, r2
 a76:	58 f4       	brcc	.+22     	; 0xa8e <vfprintf+0x348>
 a78:	b6 01       	movw	r22, r12
 a7a:	80 e2       	ldi	r24, 0x20	; 32
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	76 d0       	rcall	.+236    	; 0xb6c <fputc>
 a80:	b3 94       	inc	r11
 a82:	f8 cf       	rjmp	.-16     	; 0xa74 <vfprintf+0x32e>
 a84:	b2 14       	cp	r11, r2
 a86:	18 f4       	brcc	.+6      	; 0xa8e <vfprintf+0x348>
 a88:	2b 18       	sub	r2, r11
 a8a:	02 c0       	rjmp	.+4      	; 0xa90 <vfprintf+0x34a>
 a8c:	98 2c       	mov	r9, r8
 a8e:	21 2c       	mov	r2, r1
 a90:	a4 fe       	sbrs	r10, 4
 a92:	0f c0       	rjmp	.+30     	; 0xab2 <vfprintf+0x36c>
 a94:	b6 01       	movw	r22, r12
 a96:	80 e3       	ldi	r24, 0x30	; 48
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	68 d0       	rcall	.+208    	; 0xb6c <fputc>
 a9c:	a2 fe       	sbrs	r10, 2
 a9e:	16 c0       	rjmp	.+44     	; 0xacc <vfprintf+0x386>
 aa0:	a1 fc       	sbrc	r10, 1
 aa2:	03 c0       	rjmp	.+6      	; 0xaaa <vfprintf+0x364>
 aa4:	88 e7       	ldi	r24, 0x78	; 120
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	02 c0       	rjmp	.+4      	; 0xaae <vfprintf+0x368>
 aaa:	88 e5       	ldi	r24, 0x58	; 88
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	b6 01       	movw	r22, r12
 ab0:	0c c0       	rjmp	.+24     	; 0xaca <vfprintf+0x384>
 ab2:	8a 2d       	mov	r24, r10
 ab4:	86 78       	andi	r24, 0x86	; 134
 ab6:	51 f0       	breq	.+20     	; 0xacc <vfprintf+0x386>
 ab8:	a1 fe       	sbrs	r10, 1
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <vfprintf+0x37a>
 abc:	8b e2       	ldi	r24, 0x2B	; 43
 abe:	01 c0       	rjmp	.+2      	; 0xac2 <vfprintf+0x37c>
 ac0:	80 e2       	ldi	r24, 0x20	; 32
 ac2:	a7 fc       	sbrc	r10, 7
 ac4:	8d e2       	ldi	r24, 0x2D	; 45
 ac6:	b6 01       	movw	r22, r12
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	50 d0       	rcall	.+160    	; 0xb6c <fputc>
 acc:	89 14       	cp	r8, r9
 ace:	30 f4       	brcc	.+12     	; 0xadc <vfprintf+0x396>
 ad0:	b6 01       	movw	r22, r12
 ad2:	80 e3       	ldi	r24, 0x30	; 48
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	4a d0       	rcall	.+148    	; 0xb6c <fputc>
 ad8:	9a 94       	dec	r9
 ada:	f8 cf       	rjmp	.-16     	; 0xacc <vfprintf+0x386>
 adc:	8a 94       	dec	r8
 ade:	f3 01       	movw	r30, r6
 ae0:	e8 0d       	add	r30, r8
 ae2:	f1 1d       	adc	r31, r1
 ae4:	80 81       	ld	r24, Z
 ae6:	b6 01       	movw	r22, r12
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	40 d0       	rcall	.+128    	; 0xb6c <fputc>
 aec:	81 10       	cpse	r8, r1
 aee:	f6 cf       	rjmp	.-20     	; 0xadc <vfprintf+0x396>
 af0:	22 20       	and	r2, r2
 af2:	09 f4       	brne	.+2      	; 0xaf6 <vfprintf+0x3b0>
 af4:	4e ce       	rjmp	.-868    	; 0x792 <vfprintf+0x4c>
 af6:	b6 01       	movw	r22, r12
 af8:	80 e2       	ldi	r24, 0x20	; 32
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	37 d0       	rcall	.+110    	; 0xb6c <fputc>
 afe:	2a 94       	dec	r2
 b00:	f7 cf       	rjmp	.-18     	; 0xaf0 <vfprintf+0x3aa>
 b02:	f6 01       	movw	r30, r12
 b04:	86 81       	ldd	r24, Z+6	; 0x06
 b06:	97 81       	ldd	r25, Z+7	; 0x07
 b08:	02 c0       	rjmp	.+4      	; 0xb0e <vfprintf+0x3c8>
 b0a:	8f ef       	ldi	r24, 0xFF	; 255
 b0c:	9f ef       	ldi	r25, 0xFF	; 255
 b0e:	2b 96       	adiw	r28, 0x0b	; 11
 b10:	0f b6       	in	r0, 0x3f	; 63
 b12:	f8 94       	cli
 b14:	de bf       	out	0x3e, r29	; 62
 b16:	0f be       	out	0x3f, r0	; 63
 b18:	cd bf       	out	0x3d, r28	; 61
 b1a:	df 91       	pop	r29
 b1c:	cf 91       	pop	r28
 b1e:	1f 91       	pop	r17
 b20:	0f 91       	pop	r16
 b22:	ff 90       	pop	r15
 b24:	ef 90       	pop	r14
 b26:	df 90       	pop	r13
 b28:	cf 90       	pop	r12
 b2a:	bf 90       	pop	r11
 b2c:	af 90       	pop	r10
 b2e:	9f 90       	pop	r9
 b30:	8f 90       	pop	r8
 b32:	7f 90       	pop	r7
 b34:	6f 90       	pop	r6
 b36:	5f 90       	pop	r5
 b38:	4f 90       	pop	r4
 b3a:	3f 90       	pop	r3
 b3c:	2f 90       	pop	r2
 b3e:	08 95       	ret

00000b40 <strnlen_P>:
 b40:	fc 01       	movw	r30, r24
 b42:	05 90       	lpm	r0, Z+
 b44:	61 50       	subi	r22, 0x01	; 1
 b46:	70 40       	sbci	r23, 0x00	; 0
 b48:	01 10       	cpse	r0, r1
 b4a:	d8 f7       	brcc	.-10     	; 0xb42 <strnlen_P+0x2>
 b4c:	80 95       	com	r24
 b4e:	90 95       	com	r25
 b50:	8e 0f       	add	r24, r30
 b52:	9f 1f       	adc	r25, r31
 b54:	08 95       	ret

00000b56 <strnlen>:
 b56:	fc 01       	movw	r30, r24
 b58:	61 50       	subi	r22, 0x01	; 1
 b5a:	70 40       	sbci	r23, 0x00	; 0
 b5c:	01 90       	ld	r0, Z+
 b5e:	01 10       	cpse	r0, r1
 b60:	d8 f7       	brcc	.-10     	; 0xb58 <strnlen+0x2>
 b62:	80 95       	com	r24
 b64:	90 95       	com	r25
 b66:	8e 0f       	add	r24, r30
 b68:	9f 1f       	adc	r25, r31
 b6a:	08 95       	ret

00000b6c <fputc>:
 b6c:	0f 93       	push	r16
 b6e:	1f 93       	push	r17
 b70:	cf 93       	push	r28
 b72:	df 93       	push	r29
 b74:	fb 01       	movw	r30, r22
 b76:	23 81       	ldd	r18, Z+3	; 0x03
 b78:	21 fd       	sbrc	r18, 1
 b7a:	03 c0       	rjmp	.+6      	; 0xb82 <fputc+0x16>
 b7c:	8f ef       	ldi	r24, 0xFF	; 255
 b7e:	9f ef       	ldi	r25, 0xFF	; 255
 b80:	2c c0       	rjmp	.+88     	; 0xbda <fputc+0x6e>
 b82:	22 ff       	sbrs	r18, 2
 b84:	16 c0       	rjmp	.+44     	; 0xbb2 <fputc+0x46>
 b86:	46 81       	ldd	r20, Z+6	; 0x06
 b88:	57 81       	ldd	r21, Z+7	; 0x07
 b8a:	24 81       	ldd	r18, Z+4	; 0x04
 b8c:	35 81       	ldd	r19, Z+5	; 0x05
 b8e:	42 17       	cp	r20, r18
 b90:	53 07       	cpc	r21, r19
 b92:	44 f4       	brge	.+16     	; 0xba4 <fputc+0x38>
 b94:	a0 81       	ld	r26, Z
 b96:	b1 81       	ldd	r27, Z+1	; 0x01
 b98:	9d 01       	movw	r18, r26
 b9a:	2f 5f       	subi	r18, 0xFF	; 255
 b9c:	3f 4f       	sbci	r19, 0xFF	; 255
 b9e:	31 83       	std	Z+1, r19	; 0x01
 ba0:	20 83       	st	Z, r18
 ba2:	8c 93       	st	X, r24
 ba4:	26 81       	ldd	r18, Z+6	; 0x06
 ba6:	37 81       	ldd	r19, Z+7	; 0x07
 ba8:	2f 5f       	subi	r18, 0xFF	; 255
 baa:	3f 4f       	sbci	r19, 0xFF	; 255
 bac:	37 83       	std	Z+7, r19	; 0x07
 bae:	26 83       	std	Z+6, r18	; 0x06
 bb0:	14 c0       	rjmp	.+40     	; 0xbda <fputc+0x6e>
 bb2:	8b 01       	movw	r16, r22
 bb4:	ec 01       	movw	r28, r24
 bb6:	fb 01       	movw	r30, r22
 bb8:	00 84       	ldd	r0, Z+8	; 0x08
 bba:	f1 85       	ldd	r31, Z+9	; 0x09
 bbc:	e0 2d       	mov	r30, r0
 bbe:	09 95       	icall
 bc0:	89 2b       	or	r24, r25
 bc2:	e1 f6       	brne	.-72     	; 0xb7c <fputc+0x10>
 bc4:	d8 01       	movw	r26, r16
 bc6:	16 96       	adiw	r26, 0x06	; 6
 bc8:	8d 91       	ld	r24, X+
 bca:	9c 91       	ld	r25, X
 bcc:	17 97       	sbiw	r26, 0x07	; 7
 bce:	01 96       	adiw	r24, 0x01	; 1
 bd0:	17 96       	adiw	r26, 0x07	; 7
 bd2:	9c 93       	st	X, r25
 bd4:	8e 93       	st	-X, r24
 bd6:	16 97       	sbiw	r26, 0x06	; 6
 bd8:	ce 01       	movw	r24, r28
 bda:	df 91       	pop	r29
 bdc:	cf 91       	pop	r28
 bde:	1f 91       	pop	r17
 be0:	0f 91       	pop	r16
 be2:	08 95       	ret

00000be4 <__ultoa_invert>:
 be4:	fa 01       	movw	r30, r20
 be6:	aa 27       	eor	r26, r26
 be8:	28 30       	cpi	r18, 0x08	; 8
 bea:	51 f1       	breq	.+84     	; 0xc40 <__ultoa_invert+0x5c>
 bec:	20 31       	cpi	r18, 0x10	; 16
 bee:	81 f1       	breq	.+96     	; 0xc50 <__ultoa_invert+0x6c>
 bf0:	e8 94       	clt
 bf2:	6f 93       	push	r22
 bf4:	6e 7f       	andi	r22, 0xFE	; 254
 bf6:	6e 5f       	subi	r22, 0xFE	; 254
 bf8:	7f 4f       	sbci	r23, 0xFF	; 255
 bfa:	8f 4f       	sbci	r24, 0xFF	; 255
 bfc:	9f 4f       	sbci	r25, 0xFF	; 255
 bfe:	af 4f       	sbci	r26, 0xFF	; 255
 c00:	b1 e0       	ldi	r27, 0x01	; 1
 c02:	3e d0       	rcall	.+124    	; 0xc80 <__ultoa_invert+0x9c>
 c04:	b4 e0       	ldi	r27, 0x04	; 4
 c06:	3c d0       	rcall	.+120    	; 0xc80 <__ultoa_invert+0x9c>
 c08:	67 0f       	add	r22, r23
 c0a:	78 1f       	adc	r23, r24
 c0c:	89 1f       	adc	r24, r25
 c0e:	9a 1f       	adc	r25, r26
 c10:	a1 1d       	adc	r26, r1
 c12:	68 0f       	add	r22, r24
 c14:	79 1f       	adc	r23, r25
 c16:	8a 1f       	adc	r24, r26
 c18:	91 1d       	adc	r25, r1
 c1a:	a1 1d       	adc	r26, r1
 c1c:	6a 0f       	add	r22, r26
 c1e:	71 1d       	adc	r23, r1
 c20:	81 1d       	adc	r24, r1
 c22:	91 1d       	adc	r25, r1
 c24:	a1 1d       	adc	r26, r1
 c26:	20 d0       	rcall	.+64     	; 0xc68 <__ultoa_invert+0x84>
 c28:	09 f4       	brne	.+2      	; 0xc2c <__ultoa_invert+0x48>
 c2a:	68 94       	set
 c2c:	3f 91       	pop	r19
 c2e:	2a e0       	ldi	r18, 0x0A	; 10
 c30:	26 9f       	mul	r18, r22
 c32:	11 24       	eor	r1, r1
 c34:	30 19       	sub	r19, r0
 c36:	30 5d       	subi	r19, 0xD0	; 208
 c38:	31 93       	st	Z+, r19
 c3a:	de f6       	brtc	.-74     	; 0xbf2 <__ultoa_invert+0xe>
 c3c:	cf 01       	movw	r24, r30
 c3e:	08 95       	ret
 c40:	46 2f       	mov	r20, r22
 c42:	47 70       	andi	r20, 0x07	; 7
 c44:	40 5d       	subi	r20, 0xD0	; 208
 c46:	41 93       	st	Z+, r20
 c48:	b3 e0       	ldi	r27, 0x03	; 3
 c4a:	0f d0       	rcall	.+30     	; 0xc6a <__ultoa_invert+0x86>
 c4c:	c9 f7       	brne	.-14     	; 0xc40 <__ultoa_invert+0x5c>
 c4e:	f6 cf       	rjmp	.-20     	; 0xc3c <__ultoa_invert+0x58>
 c50:	46 2f       	mov	r20, r22
 c52:	4f 70       	andi	r20, 0x0F	; 15
 c54:	40 5d       	subi	r20, 0xD0	; 208
 c56:	4a 33       	cpi	r20, 0x3A	; 58
 c58:	18 f0       	brcs	.+6      	; 0xc60 <__ultoa_invert+0x7c>
 c5a:	49 5d       	subi	r20, 0xD9	; 217
 c5c:	31 fd       	sbrc	r19, 1
 c5e:	40 52       	subi	r20, 0x20	; 32
 c60:	41 93       	st	Z+, r20
 c62:	02 d0       	rcall	.+4      	; 0xc68 <__ultoa_invert+0x84>
 c64:	a9 f7       	brne	.-22     	; 0xc50 <__ultoa_invert+0x6c>
 c66:	ea cf       	rjmp	.-44     	; 0xc3c <__ultoa_invert+0x58>
 c68:	b4 e0       	ldi	r27, 0x04	; 4
 c6a:	a6 95       	lsr	r26
 c6c:	97 95       	ror	r25
 c6e:	87 95       	ror	r24
 c70:	77 95       	ror	r23
 c72:	67 95       	ror	r22
 c74:	ba 95       	dec	r27
 c76:	c9 f7       	brne	.-14     	; 0xc6a <__ultoa_invert+0x86>
 c78:	00 97       	sbiw	r24, 0x00	; 0
 c7a:	61 05       	cpc	r22, r1
 c7c:	71 05       	cpc	r23, r1
 c7e:	08 95       	ret
 c80:	9b 01       	movw	r18, r22
 c82:	ac 01       	movw	r20, r24
 c84:	0a 2e       	mov	r0, r26
 c86:	06 94       	lsr	r0
 c88:	57 95       	ror	r21
 c8a:	47 95       	ror	r20
 c8c:	37 95       	ror	r19
 c8e:	27 95       	ror	r18
 c90:	ba 95       	dec	r27
 c92:	c9 f7       	brne	.-14     	; 0xc86 <__ultoa_invert+0xa2>
 c94:	62 0f       	add	r22, r18
 c96:	73 1f       	adc	r23, r19
 c98:	84 1f       	adc	r24, r20
 c9a:	95 1f       	adc	r25, r21
 c9c:	a0 1d       	adc	r26, r0
 c9e:	08 95       	ret

00000ca0 <_exit>:
 ca0:	f8 94       	cli

00000ca2 <__stop_program>:
 ca2:	ff cf       	rjmp	.-2      	; 0xca2 <__stop_program>
