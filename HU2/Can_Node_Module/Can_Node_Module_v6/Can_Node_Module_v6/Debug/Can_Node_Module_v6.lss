
Can_Node_Module_v6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000eca  00000f5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  0080010a  0080010a  00000f68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000147a  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dc5  00000000  00000000  0000254a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e16  00000000  00000000  0000330f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000434  00000000  00000000  00004128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d7  00000000  00000000  0000455c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010af  00000000  00000000  00004c33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00005ce2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	c9 c4       	rjmp	.+2450   	; 0x998 <__vector_1>
   6:	00 00       	nop
   8:	d1 c4       	rjmp	.+2466   	; 0x9ac <__vector_2>
   a:	00 00       	nop
   c:	11 c5       	rjmp	.+2594   	; 0xa30 <__vector_3>
   e:	00 00       	nop
  10:	51 c5       	rjmp	.+2722   	; 0xab4 <__vector_4>
  12:	00 00       	nop
  14:	ba c5       	rjmp	.+2932   	; 0xb8a <__vector_5>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	1f c6       	rjmp	.+3134   	; 0xc5c <__vector_7>
  1e:	00 00       	nop
  20:	89 c6       	rjmp	.+3346   	; 0xd34 <__vector_8>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	e5 c6       	rjmp	.+3530   	; 0xe08 <__vector_15>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	38 c1       	rjmp	.+624    	; 0x2ba <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	6e c0       	rjmp	.+220    	; 0x142 <__vector_25>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e2 c6       	rjmp	.+3524   	; 0xe42 <__vector_31>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ea ec       	ldi	r30, 0xCA	; 202
  a8:	fe e0       	ldi	r31, 0x0E	; 14
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	aa 30       	cpi	r26, 0x0A	; 10
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	aa e0       	ldi	r26, 0x0A	; 10
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	aa 32       	cpi	r26, 0x2A	; 42
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	de d6       	rcall	.+3516   	; 0xe88 <main>
  cc:	fc c6       	rjmp	.+3576   	; 0xec6 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <int_ADC>:
	
	if(FUNCTION == ECU2ID){
		
	}
	else{
		DDRC	= 0x0F;
  d0:	8f e0       	ldi	r24, 0x0F	; 15
  d2:	87 b9       	out	0x07, r24	; 7
		PORTC	= 0x0F;
  d4:	88 b9       	out	0x08, r24	; 8
		
		DDRF	= 0x00;
  d6:	10 ba       	out	0x10, r1	; 16
		PORTF	= 0x0F;
  d8:	81 bb       	out	0x11, r24	; 17
		
		ADCSRA	= ( 1 << ADPS2 )
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  e0:	08 95       	ret

000000e2 <getADC>:

void getADC(uint8_t ADC_pin){
	
	//PORTC	= 0x0F;
	
	ADMUX	= (ADMUX & 0b11111100) | ((ADC_pin + 1 - 4 * (ADC_pin == 3)) & 0b00000011);
  e2:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  e6:	29 2f       	mov	r18, r25
  e8:	2c 7f       	andi	r18, 0xFC	; 252
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	98 0f       	add	r25, r24
  ee:	93 70       	andi	r25, 0x03	; 3
  f0:	92 2b       	or	r25, r18
  f2:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	ADCSRA |= ( 1 << ADSC) | ( 1 << ADEN  );// start ADC
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	90 81       	ld	r25, Z
  fc:	90 6c       	ori	r25, 0xC0	; 192
  fe:	90 83       	st	Z, r25
	
	while(!(ADCSRA & (1 << ADIF))){
 100:	90 81       	ld	r25, Z
 102:	94 ff       	sbrs	r25, 4
 104:	fd cf       	rjmp	.-6      	; 0x100 <getADC+0x1e>
	}
	
	ADCSRA &= ~((1 << ADIF) | ( 1 << ADSC) | ( 1 << ADEN  )); // disable ADC
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	90 81       	ld	r25, Z
 10c:	9f 72       	andi	r25, 0x2F	; 47
 10e:	90 83       	st	Z, r25
	//PORTC	= 0x00;
	
	uint16_t ReadValue = 0;
	
	ReadValue = ADCL;
 110:	a8 e7       	ldi	r26, 0x78	; 120
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	9c 91       	ld	r25, X
	ReadValue = ReadValue | (ADCH << 8);
 116:	e9 e7       	ldi	r30, 0x79	; 121
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	20 81       	ld	r18, Z
	
	ADCVALUEL = ADCL;
 11c:	3c 91       	ld	r19, X
 11e:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <ADCVALUEL>
	ADCVALUEH = ADCH;
 122:	30 81       	ld	r19, Z
 124:	30 93 0a 01 	sts	0x010A, r19	; 0x80010a <__data_end>
	
	ADCValue[ADC_pin & 0b00000011] = ReadValue;
 128:	83 70       	andi	r24, 0x03	; 3
 12a:	e8 2f       	mov	r30, r24
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	e0 50       	subi	r30, 0x00	; 0
 134:	ff 4f       	sbci	r31, 0xFF	; 255
	//PORTC	= 0x00;
	
	uint16_t ReadValue = 0;
	
	ReadValue = ADCL;
	ReadValue = ReadValue | (ADCH << 8);
 136:	89 2f       	mov	r24, r25
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	92 2b       	or	r25, r18
	
	ADCVALUEL = ADCL;
	ADCVALUEH = ADCH;
	
	ADCValue[ADC_pin & 0b00000011] = ReadValue;
 13c:	91 83       	std	Z+1, r25	; 0x01
 13e:	80 83       	st	Z, r24
 140:	08 95       	ret

00000142 <__vector_25>:
}


ISR(ADC_vect){
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
	//ReadValue = ADCL;
	//ReadValue = ReadValue | (ADCH << 8);
	
	//ADCValue[ADMUX & 0b00000011] = ReadValue;
	
}
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <can_init>:
}



//***** CAN ialization *****************************************************
void can_init(uint16_t Baud){
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
	
	if(FUNCTION == ECU2ID){
		
	}
	else{
		DDRD = 0x80;
 15a:	20 e8       	ldi	r18, 0x80	; 128
 15c:	2a b9       	out	0x0a, r18	; 10
		PORTD &= ~(1<<PORTD7); // Enable Can-chip
 15e:	5f 98       	cbi	0x0b, 7	; 11
		//PORTD |= (1<<PORTD7); // Disable Can-chip
	}
	
	CANGCON = ( 1 << SWRES );   // Software reset
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	
	CANTCON = 0x00;       // CAN timing prescaler set to 0;
 166:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	
	if (Baud == 1000){
 16a:	88 3e       	cpi	r24, 0xE8	; 232
 16c:	23 e0       	ldi	r18, 0x03	; 3
 16e:	92 07       	cpc	r25, r18
 170:	49 f4       	brne	.+18     	; 0x184 <can_init+0x2e>
		CANBT1 = 0x00;    // Set baud rate to 500kb (assuming 16Mhz IOclk)
 172:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		CANBT2 = 0x0C;    // "
 176:	2c e0       	ldi	r18, 0x0C	; 12
 178:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		CANBT3 = 0x36; 	  // ""
 17c:	26 e3       	ldi	r18, 0x36	; 54
 17e:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 182:	1b c0       	rjmp	.+54     	; 0x1ba <can_init+0x64>
	}
	if (Baud == 500){
 184:	84 3f       	cpi	r24, 0xF4	; 244
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	92 07       	cpc	r25, r18
 18a:	51 f4       	brne	.+20     	; 0x1a0 <can_init+0x4a>
		CANBT1 = 0x02;    // Set baud rate to 500kb (assuming 16Mhz IOclk)
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		CANBT2 = 0x0C;    // "
 192:	8c e0       	ldi	r24, 0x0C	; 12
 194:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		CANBT3 = 0x37; 	  // ""
 198:	87 e3       	ldi	r24, 0x37	; 55
 19a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 19e:	19 c0       	rjmp	.+50     	; 0x1d2 <can_init+0x7c>
	}
	if (Baud == 250){
 1a0:	8a 3f       	cpi	r24, 0xFA	; 250
 1a2:	91 05       	cpc	r25, r1
 1a4:	51 f4       	brne	.+20     	; 0x1ba <can_init+0x64>
		CANBT1 = 0x0E;   // Set baud rate to 250kb (assuming 16Mhz IOclk)
 1a6:	8e e0       	ldi	r24, 0x0E	; 14
 1a8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		CANBT2 = 0x04;   // "
 1ac:	84 e0       	ldi	r24, 0x04	; 4
 1ae:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		CANBT3 = 0x13; 	 // ""
 1b2:	83 e1       	ldi	r24, 0x13	; 19
 1b4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 1b8:	0c c0       	rjmp	.+24     	; 0x1d2 <can_init+0x7c>
	}
	if ( Baud == 125){
 1ba:	8d 37       	cpi	r24, 0x7D	; 125
 1bc:	91 05       	cpc	r25, r1
 1be:	49 f4       	brne	.+18     	; 0x1d2 <can_init+0x7c>
		CANBT1 = 0x06;  // Set baud rate to 125kb (assuming 16Mhz IOclk)
 1c0:	86 e0       	ldi	r24, 0x06	; 6
 1c2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		CANBT2 = 0x0C;  // "
 1c6:	8c e0       	ldi	r24, 0x0C	; 12
 1c8:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		CANBT3 = 0x37;	// ""
 1cc:	87 e3       	ldi	r24, 0x37	; 55
 1ce:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
}



//***** CAN ialization *****************************************************
void can_init(uint16_t Baud){
 1d2:	80 e0       	ldi	r24, 0x00	; 0
	}
	

	for ( int8_t mob=0; mob<14; mob++ ) {

		CANPAGE = ( mob << 4 );  // Selects Message Object 0-14
 1d4:	cd ee       	ldi	r28, 0xED	; 237
 1d6:	d0 e0       	ldi	r29, 0x00	; 0
		CANCDMOB = 0x00;    // Disable mob
 1d8:	af ee       	ldi	r26, 0xEF	; 239
 1da:	b0 e0       	ldi	r27, 0x00	; 0
		CANSTMOB = 0x00;    // Clear mob status register;
 1dc:	ee ee       	ldi	r30, 0xEE	; 238
 1de:	f0 e0       	ldi	r31, 0x00	; 0
	}
	

	for ( int8_t mob=0; mob<14; mob++ ) {

		CANPAGE = ( mob << 4 );  // Selects Message Object 0-14
 1e0:	98 2f       	mov	r25, r24
 1e2:	92 95       	swap	r25
 1e4:	90 7f       	andi	r25, 0xF0	; 240
 1e6:	98 83       	st	Y, r25
		CANCDMOB = 0x00;    // Disable mob
 1e8:	1c 92       	st	X, r1
		CANSTMOB = 0x00;    // Clear mob status register;
 1ea:	10 82       	st	Z, r1
 1ec:	8f 5f       	subi	r24, 0xFF	; 255
		CANBT2 = 0x0C;  // "
		CANBT3 = 0x37;	// ""
	}
	

	for ( int8_t mob=0; mob<14; mob++ ) {
 1ee:	8e 30       	cpi	r24, 0x0E	; 14
 1f0:	b9 f7       	brne	.-18     	; 0x1e0 <can_init+0x8a>
		CANPAGE = ( mob << 4 );  // Selects Message Object 0-14
		CANCDMOB = 0x00;    // Disable mob
		CANSTMOB = 0x00;    // Clear mob status register;
	}
	
	CANIE2 = (( 1 << IEMOB1 ) | ( 0 << IEMOB0 ));  // IEMOB1 = MOB1 Enable interrupts on mob1 for reception and transmission
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	CANGIE = ( 1 << ENIT ) | ( 1 << ENRX ) | ( 0 << ENTX );   // Enable interrupts on receive
 1f8:	80 ea       	ldi	r24, 0xA0	; 160
 1fa:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	CANGCON |= ( 1 << 1 );	// Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
 1fe:	e8 ed       	ldi	r30, 0xD8	; 216
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	82 60       	ori	r24, 0x02	; 2
 206:	80 83       	st	Z, r24
	
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <can_rx>:

//***** CAN Creating RX *****************************************************
void can_rx(uint16_t NODE_ID){
	
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select 0001 = CANMOB1
 20e:	20 e1       	ldi	r18, 0x10	; 16
 210:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
	CANIDT1 = NODE_ID >> 3; // Receive Address
 214:	9c 01       	movw	r18, r24
 216:	36 95       	lsr	r19
 218:	27 95       	ror	r18
 21a:	36 95       	lsr	r19
 21c:	27 95       	ror	r18
 21e:	36 95       	lsr	r19
 220:	27 95       	ror	r18
 222:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	CANIDT2 = NODE_ID << 5; //
 226:	82 95       	swap	r24
 228:	88 0f       	add	r24, r24
 22a:	80 7e       	andi	r24, 0xE0	; 224
 22c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT3 = 0x00; 		// ""
 230:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT4 = 0x00; 		// ""
 234:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	
	CANIDM1 = 0b11111111;   // Receive Address
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDM2 = 0b11100000;	//
 23e:	80 ee       	ldi	r24, 0xE0	; 224
 240:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>

	CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 3 << DLC0));  // Enable Reception | 11 bit | IDE DLC8
 244:	83 e8       	ldi	r24, 0x83	; 131
 246:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 24a:	08 95       	ret

0000024c <can_tx>:
}

//***** CAN Creating TX *****************************************************
void can_tx(uint16_t Address, uint8_t DLC) {
 24c:	9c 01       	movw	r18, r24
	
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 0 << MOBNB0 ); // select 0000 = CANMOB0
 24e:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	while ( CANEN2 & ( 1 << ENMOB0 ) ); // Wait for MOb 0 to be free
 252:	ec ed       	ldi	r30, 0xDC	; 220
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	90 81       	ld	r25, Z
 258:	90 fd       	sbrc	r25, 0
 25a:	fd cf       	rjmp	.-6      	; 0x256 <can_tx+0xa>
	
	CANSTMOB = 0x00;   // Clear mob status register
 25c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	
	CANIDT4 = 0x00;     		//
 260:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = 0x00;				//
 264:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = Address << 5;		//
 268:	82 2f       	mov	r24, r18
 26a:	82 95       	swap	r24
 26c:	88 0f       	add	r24, r24
 26e:	80 7e       	andi	r24, 0xE0	; 224
 270:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = Address >> 3;		//
 274:	36 95       	lsr	r19
 276:	27 95       	ror	r18
 278:	36 95       	lsr	r19
 27a:	27 95       	ror	r18
 27c:	36 95       	lsr	r19
 27e:	27 95       	ror	r18
 280:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 284:	ea e1       	ldi	r30, 0x1A	; 26
 286:	f1 e0       	ldi	r31, 0x01	; 1
 288:	22 e2       	ldi	r18, 0x22	; 34
 28a:	31 e0       	ldi	r19, 0x01	; 1
	
	for ( int8_t i = 0; i < 8; i++ ){
		CANMSG = TransmitData[i]; //CAN Data Message Register: setting the data in the message register
 28c:	aa ef       	ldi	r26, 0xFA	; 250
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	81 91       	ld	r24, Z+
 292:	8c 93       	st	X, r24
	CANIDT4 = 0x00;     		//
	CANIDT3 = 0x00;				//
	CANIDT2 = Address << 5;		//
	CANIDT1 = Address >> 3;		//
	
	for ( int8_t i = 0; i < 8; i++ ){
 294:	e2 17       	cp	r30, r18
 296:	f3 07       	cpc	r31, r19
 298:	d9 f7       	brne	.-10     	; 0x290 <can_tx+0x44>
		CANMSG = TransmitData[i]; //CAN Data Message Register: setting the data in the message register
	}
	
	CANCDMOB = (( 1 << CONMOB0 ) | ( 0 << IDE ) | ( DLC << DLC0)); //CAN MOb Control and DLC Register: (1<<CONMOB1) = enable reception. (0<<IDE) = can standard rev 2.0A ( id length = 11 bits), (DLC << DLC0) Set *DLC* Bytes in the data field of the message.
 29a:	60 64       	ori	r22, 0x40	; 64
 29c:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	while ( ! ( CANSTMOB & ( 1 << TXOK ) ) );	// wait for TXOK flag set
 2a0:	ee ee       	ldi	r30, 0xEE	; 238
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	86 ff       	sbrs	r24, 6
 2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <can_tx+0x58>
	
	CANCDMOB = 0x00; //Clear CAN Mob Control and DLC Register
 2aa:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	CANSTMOB = 0x00; // Clear TXOK flag
 2ae:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select 0001 = MOB1
 2b2:	80 e1       	ldi	r24, 0x10	; 16
 2b4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 2b8:	08 95       	ret

000002ba <__vector_18>:

uint8_t ReceiveData[8];
uint8_t TransmitData[8];

//***** Reception ISR **********************************
ISR(CANIT_vect){  	// use interrupts
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	0b b6       	in	r0, 0x3b	; 59
 2c6:	0f 92       	push	r0
 2c8:	4f 92       	push	r4
 2ca:	5f 92       	push	r5
 2cc:	6f 92       	push	r6
 2ce:	7f 92       	push	r7
 2d0:	8f 92       	push	r8
 2d2:	9f 92       	push	r9
 2d4:	af 92       	push	r10
 2d6:	bf 92       	push	r11
 2d8:	cf 92       	push	r12
 2da:	df 92       	push	r13
 2dc:	ef 92       	push	r14
 2de:	ff 92       	push	r15
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	2f 93       	push	r18
 2e6:	3f 93       	push	r19
 2e8:	4f 93       	push	r20
 2ea:	5f 93       	push	r21
 2ec:	6f 93       	push	r22
 2ee:	7f 93       	push	r23
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
 2f4:	af 93       	push	r26
 2f6:	bf 93       	push	r27
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	ef 93       	push	r30
 2fe:	ff 93       	push	r31
	int8_t length;
	
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select CANMOB 0001 = MOB1
 300:	80 e1       	ldi	r24, 0x10	; 16
 302:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	length = ( CANCDMOB & 0x0F );	// DLC, number of bytes to be received
 306:	00 91 ef 00 	lds	r16, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 30a:	0f 70       	andi	r16, 0x0F	; 15
	for ( int8_t i = 0; i < length; i++ ){
 30c:	10 16       	cp	r1, r16
 30e:	74 f4       	brge	.+28     	; 0x32c <__vector_18+0x72>
 310:	e2 e2       	ldi	r30, 0x22	; 34
 312:	f1 e0       	ldi	r31, 0x01	; 1
 314:	2f ef       	ldi	r18, 0xFF	; 255
 316:	20 0f       	add	r18, r16
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	2d 5d       	subi	r18, 0xDD	; 221
 31c:	3e 4f       	sbci	r19, 0xFE	; 254
		ReceiveData[i] = CANMSG; // Get data, INDX auto increments CANMSG
 31e:	aa ef       	ldi	r26, 0xFA	; 250
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	8c 91       	ld	r24, X
 324:	81 93       	st	Z+, r24
	int8_t length;
	
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select CANMOB 0001 = MOB1

	length = ( CANCDMOB & 0x0F );	// DLC, number of bytes to be received
	for ( int8_t i = 0; i < length; i++ ){
 326:	e2 17       	cp	r30, r18
 328:	f3 07       	cpc	r31, r19
 32a:	d9 f7       	brne	.-10     	; 0x322 <__vector_18+0x68>
		ReceiveData[i] = CANMSG; // Get data, INDX auto increments CANMSG
	}
	
	uint16_t ReceiveAddress = (CANIDT1 << 3) | ((CANIDT2 & 0b11100000) >> 5);
 32c:	c0 91 f3 00 	lds	r28, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 330:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 334:	82 95       	swap	r24
 336:	86 95       	lsr	r24
 338:	87 70       	andi	r24, 0x07	; 7
 33a:	d0 e0       	ldi	r29, 0x00	; 0
 33c:	cc 0f       	add	r28, r28
 33e:	dd 1f       	adc	r29, r29
 340:	cc 0f       	add	r28, r28
 342:	dd 1f       	adc	r29, r29
 344:	cc 0f       	add	r28, r28
 346:	dd 1f       	adc	r29, r29
 348:	c8 2b       	or	r28, r24
	
	if(ReceiveAddress == NODEID1){ //Only receive if address is NODEID1
 34a:	c1 30       	cpi	r28, 0x01	; 1
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	d8 07       	cpc	r29, r24
 350:	09 f0       	breq	.+2      	; 0x354 <__vector_18+0x9a>
 352:	8d c0       	rjmp	.+282    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
 354:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ReceiveData>
 358:	8d 33       	cpi	r24, 0x3D	; 61
 35a:	09 f0       	breq	.+2      	; 0x35e <__vector_18+0xa4>
 35c:	81 c1       	rjmp	.+770    	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
 35e:	c0 2e       	mov	r12, r16
 360:	00 2e       	mov	r0, r16
 362:	00 0c       	add	r0, r0
 364:	dd 08       	sbc	r13, r13
 366:	a2 e0       	ldi	r26, 0x02	; 2
 368:	ca 16       	cp	r12, r26
 36a:	d1 04       	cpc	r13, r1
 36c:	0c f4       	brge	.+2      	; 0x370 <__vector_18+0xb6>
 36e:	79 c0       	rjmp	.+242    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 370:	ee 24       	eor	r14, r14
 372:	e3 94       	inc	r14
 374:	f1 2c       	mov	r15, r1
 376:	77 24       	eor	r7, r7
 378:	73 94       	inc	r7
 37a:	10 e0       	ldi	r17, 0x00	; 0
				if (ReceiveData[i] == STUURPOSITIE){ //if Receive data 0x01, Transmit the following data:
					getADC(3);
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (ADCValue[3] >> 8);
 37c:	0f 2e       	mov	r0, r31
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	af 2e       	mov	r10, r31
 382:	f1 e0       	ldi	r31, 0x01	; 1
 384:	bf 2e       	mov	r11, r31
 386:	f0 2d       	mov	r31, r0
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (PulsePerSec[2] >> 8);
					TransmitData[j++] = PulsePerSec[2];
				}
				if (ReceiveData[i] == RPM_VOOR_RECHTS){
					TransmitData[j++] = ReceiveData[i];
 388:	0f 2e       	mov	r0, r31
 38a:	f3 e1       	ldi	r31, 0x13	; 19
 38c:	5f 2e       	mov	r5, r31
 38e:	f0 2d       	mov	r31, r0
					TransmitData[j++] = (PulsePerSec[3] >> 8);
 390:	0f 2e       	mov	r0, r31
 392:	fc e0       	ldi	r31, 0x0C	; 12
 394:	8f 2e       	mov	r8, r31
 396:	f1 e0       	ldi	r31, 0x01	; 1
 398:	9f 2e       	mov	r9, r31
 39a:	f0 2d       	mov	r31, r0
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (ADCValue[3] >> 8);
					TransmitData[j++] = ADCValue[3];
				}
				if (ReceiveData[i] == RPM_VOOR_LINKS){
					TransmitData[j++] = ReceiveData[i];
 39c:	0f 2e       	mov	r0, r31
 39e:	f2 e1       	ldi	r31, 0x12	; 18
 3a0:	6f 2e       	mov	r6, r31
 3a2:	f0 2d       	mov	r31, r0
	
	if(ReceiveAddress == NODEID1){ //Only receive if address is NODEID1
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
				if (ReceiveData[i] == STUURPOSITIE){ //if Receive data 0x01, Transmit the following data:
 3a4:	f7 01       	movw	r30, r14
 3a6:	ee 5d       	subi	r30, 0xDE	; 222
 3a8:	fe 4f       	sbci	r31, 0xFE	; 254
 3aa:	80 81       	ld	r24, Z
 3ac:	81 31       	cpi	r24, 0x11	; 17
 3ae:	d9 f4       	brne	.+54     	; 0x3e6 <__vector_18+0x12c>
					getADC(3);
 3b0:	83 e0       	ldi	r24, 0x03	; 3
 3b2:	97 de       	rcall	.-722    	; 0xe2 <getADC>
					TransmitData[j++] = ReceiveData[i];
 3b4:	e1 2f       	mov	r30, r17
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	e6 5e       	subi	r30, 0xE6	; 230
 3ba:	fe 4f       	sbci	r31, 0xFE	; 254
 3bc:	d7 01       	movw	r26, r14
 3be:	ae 5d       	subi	r26, 0xDE	; 222
 3c0:	be 4f       	sbci	r27, 0xFE	; 254
 3c2:	8c 91       	ld	r24, X
 3c4:	80 83       	st	Z, r24
					TransmitData[j++] = (ADCValue[3] >> 8);
 3c6:	f5 01       	movw	r30, r10
 3c8:	86 81       	ldd	r24, Z+6	; 0x06
 3ca:	97 81       	ldd	r25, Z+7	; 0x07
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
				if (ReceiveData[i] == STUURPOSITIE){ //if Receive data 0x01, Transmit the following data:
					getADC(3);
					TransmitData[j++] = ReceiveData[i];
 3cc:	e1 e0       	ldi	r30, 0x01	; 1
 3ce:	e1 0f       	add	r30, r17
					TransmitData[j++] = (ADCValue[3] >> 8);
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	e6 5e       	subi	r30, 0xE6	; 230
 3d4:	fe 4f       	sbci	r31, 0xFE	; 254
 3d6:	90 83       	st	Z, r25
					TransmitData[j++] = ADCValue[3];
 3d8:	e2 e0       	ldi	r30, 0x02	; 2
 3da:	e1 0f       	add	r30, r17
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	1d 5f       	subi	r17, 0xFD	; 253
 3e0:	e6 5e       	subi	r30, 0xE6	; 230
 3e2:	fe 4f       	sbci	r31, 0xFE	; 254
 3e4:	80 83       	st	Z, r24
				}
				if (ReceiveData[i] == RPM_VOOR_LINKS){
 3e6:	f7 01       	movw	r30, r14
 3e8:	ee 5d       	subi	r30, 0xDE	; 222
 3ea:	fe 4f       	sbci	r31, 0xFE	; 254
 3ec:	80 81       	ld	r24, Z
 3ee:	82 31       	cpi	r24, 0x12	; 18
 3f0:	c9 f4       	brne	.+50     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
					TransmitData[j++] = ReceiveData[i];
 3f2:	e1 2f       	mov	r30, r17
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	e6 5e       	subi	r30, 0xE6	; 230
 3f8:	fe 4f       	sbci	r31, 0xFE	; 254
 3fa:	60 82       	st	Z, r6
					TransmitData[j++] = (PulsePerSec[2] >> 8);
 3fc:	d4 01       	movw	r26, r8
 3fe:	14 96       	adiw	r26, 0x04	; 4
 400:	8c 91       	ld	r24, X
 402:	14 97       	sbiw	r26, 0x04	; 4
 404:	15 96       	adiw	r26, 0x05	; 5
 406:	9c 91       	ld	r25, X
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (ADCValue[3] >> 8);
					TransmitData[j++] = ADCValue[3];
				}
				if (ReceiveData[i] == RPM_VOOR_LINKS){
					TransmitData[j++] = ReceiveData[i];
 408:	e1 e0       	ldi	r30, 0x01	; 1
 40a:	e1 0f       	add	r30, r17
					TransmitData[j++] = (PulsePerSec[2] >> 8);
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	e6 5e       	subi	r30, 0xE6	; 230
 410:	fe 4f       	sbci	r31, 0xFE	; 254
 412:	90 83       	st	Z, r25
					TransmitData[j++] = PulsePerSec[2];
 414:	e2 e0       	ldi	r30, 0x02	; 2
 416:	e1 0f       	add	r30, r17
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	1d 5f       	subi	r17, 0xFD	; 253
 41c:	e6 5e       	subi	r30, 0xE6	; 230
 41e:	fe 4f       	sbci	r31, 0xFE	; 254
 420:	80 83       	st	Z, r24
 422:	17 c0       	rjmp	.+46     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
				}
				if (ReceiveData[i] == RPM_VOOR_RECHTS){
 424:	83 31       	cpi	r24, 0x13	; 19
 426:	a9 f4       	brne	.+42     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
					TransmitData[j++] = ReceiveData[i];
 428:	e1 2f       	mov	r30, r17
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	e6 5e       	subi	r30, 0xE6	; 230
 42e:	fe 4f       	sbci	r31, 0xFE	; 254
 430:	50 82       	st	Z, r5
					TransmitData[j++] = (PulsePerSec[3] >> 8);
 432:	f4 01       	movw	r30, r8
 434:	86 81       	ldd	r24, Z+6	; 0x06
 436:	97 81       	ldd	r25, Z+7	; 0x07
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (PulsePerSec[2] >> 8);
					TransmitData[j++] = PulsePerSec[2];
				}
				if (ReceiveData[i] == RPM_VOOR_RECHTS){
					TransmitData[j++] = ReceiveData[i];
 438:	e1 e0       	ldi	r30, 0x01	; 1
 43a:	e1 0f       	add	r30, r17
					TransmitData[j++] = (PulsePerSec[3] >> 8);
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	e6 5e       	subi	r30, 0xE6	; 230
 440:	fe 4f       	sbci	r31, 0xFE	; 254
 442:	90 83       	st	Z, r25
					TransmitData[j++] = PulsePerSec[3];
 444:	e2 e0       	ldi	r30, 0x02	; 2
 446:	e1 0f       	add	r30, r17
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	1d 5f       	subi	r17, 0xFD	; 253
 44c:	e6 5e       	subi	r30, 0xE6	; 230
 44e:	fe 4f       	sbci	r31, 0xFE	; 254
 450:	80 83       	st	Z, r24
	uint16_t ReceiveAddress = (CANIDT1 << 3) | ((CANIDT2 & 0b11100000) >> 5);
	
	if(ReceiveAddress == NODEID1){ //Only receive if address is NODEID1
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
 452:	73 94       	inc	r7
 454:	e7 2c       	mov	r14, r7
 456:	f1 2c       	mov	r15, r1
 458:	ec 14       	cp	r14, r12
 45a:	fd 04       	cpc	r15, r13
 45c:	0c f4       	brge	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45e:	a2 cf       	rjmp	.-188    	; 0x3a4 <__vector_18+0xea>
 460:	01 c0       	rjmp	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 462:	10 e0       	ldi	r17, 0x00	; 0
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (PulsePerSec[3] >> 8);
					TransmitData[j++] = PulsePerSec[3];
				}
			}
			can_tx(MASTERID, j); //Transmit data depending on the number of message received
 464:	61 2f       	mov	r22, r17
 466:	87 e1       	ldi	r24, 0x17	; 23
 468:	93 e0       	ldi	r25, 0x03	; 3
 46a:	f0 de       	rcall	.-544    	; 0x24c <can_tx>
 46c:	f9 c0       	rjmp	.+498    	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
		}
	}
	

	if(ReceiveAddress == NODEID2){ //Only receive if Address is NODEID2
 46e:	c2 30       	cpi	r28, 0x02	; 2
 470:	f2 e0       	ldi	r31, 0x02	; 2
 472:	df 07       	cpc	r29, r31
 474:	09 f0       	breq	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 476:	8a c0       	rjmp	.+276    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
 478:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ReceiveData>
 47c:	8d 33       	cpi	r24, 0x3D	; 61
 47e:	09 f0       	breq	.+2      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 480:	5d c1       	rjmp	.+698    	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
 482:	a0 2e       	mov	r10, r16
 484:	00 2e       	mov	r0, r16
 486:	00 0c       	add	r0, r0
 488:	bb 08       	sbc	r11, r11
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	a8 16       	cp	r10, r24
 48e:	b1 04       	cpc	r11, r1
 490:	0c f4       	brge	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 492:	76 c0       	rjmp	.+236    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 494:	ee 24       	eor	r14, r14
 496:	e3 94       	inc	r14
 498:	f1 2c       	mov	r15, r1
 49a:	11 e0       	ldi	r17, 0x01	; 1
 49c:	d1 2c       	mov	r13, r1
				if (ReceiveData[i] == GAS_1){
 49e:	f7 01       	movw	r30, r14
 4a0:	ee 5d       	subi	r30, 0xDE	; 222
 4a2:	fe 4f       	sbci	r31, 0xFE	; 254
 4a4:	80 81       	ld	r24, Z
 4a6:	81 32       	cpi	r24, 0x21	; 33
 4a8:	e9 f4       	brne	.+58     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
					getADC(0);
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	1a de       	rcall	.-972    	; 0xe2 <getADC>
					TransmitData[j++] = ReceiveData[i];
 4ae:	ed 2d       	mov	r30, r13
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	e6 5e       	subi	r30, 0xE6	; 230
 4b4:	fe 4f       	sbci	r31, 0xFE	; 254
 4b6:	d7 01       	movw	r26, r14
 4b8:	ae 5d       	subi	r26, 0xDE	; 222
 4ba:	be 4f       	sbci	r27, 0xFE	; 254
 4bc:	8c 91       	ld	r24, X
 4be:	80 83       	st	Z, r24
 4c0:	e1 e0       	ldi	r30, 0x01	; 1
 4c2:	ed 0d       	add	r30, r13
					TransmitData[j++] = ADCVALUEL;	// Aanpassing Jeroen
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	e6 5e       	subi	r30, 0xE6	; 230
 4c8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ca:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADCVALUEL>
 4ce:	80 83       	st	Z, r24
					TransmitData[j++] = ADCVALUEH;  // Aanpassing Jeroen
 4d0:	e2 e0       	ldi	r30, 0x02	; 2
 4d2:	ed 0d       	add	r30, r13
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	a3 e0       	ldi	r26, 0x03	; 3
 4d8:	da 0e       	add	r13, r26
 4da:	e6 5e       	subi	r30, 0xE6	; 230
 4dc:	fe 4f       	sbci	r31, 0xFE	; 254
 4de:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 4e2:	80 83       	st	Z, r24
				}
				if (ReceiveData[i] == GAS_2){
 4e4:	f7 01       	movw	r30, r14
 4e6:	ee 5d       	subi	r30, 0xDE	; 222
 4e8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ea:	80 81       	ld	r24, Z
 4ec:	82 32       	cpi	r24, 0x22	; 34
 4ee:	e9 f4       	brne	.+58     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
					getADC(1);
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	f7 dd       	rcall	.-1042   	; 0xe2 <getADC>
					TransmitData[j++] = ReceiveData[i];
 4f4:	ed 2d       	mov	r30, r13
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	e6 5e       	subi	r30, 0xE6	; 230
 4fa:	fe 4f       	sbci	r31, 0xFE	; 254
 4fc:	d7 01       	movw	r26, r14
 4fe:	ae 5d       	subi	r26, 0xDE	; 222
 500:	be 4f       	sbci	r27, 0xFE	; 254
 502:	8c 91       	ld	r24, X
 504:	80 83       	st	Z, r24
 506:	e1 e0       	ldi	r30, 0x01	; 1
 508:	ed 0d       	add	r30, r13
					TransmitData[j++] = ADCVALUEL;
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	e6 5e       	subi	r30, 0xE6	; 230
 50e:	fe 4f       	sbci	r31, 0xFE	; 254
 510:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADCVALUEL>
 514:	80 83       	st	Z, r24
					TransmitData[j++] = ADCVALUEH;
 516:	e2 e0       	ldi	r30, 0x02	; 2
 518:	ed 0d       	add	r30, r13
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	b3 e0       	ldi	r27, 0x03	; 3
 51e:	db 0e       	add	r13, r27
 520:	e6 5e       	subi	r30, 0xE6	; 230
 522:	fe 4f       	sbci	r31, 0xFE	; 254
 524:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 528:	80 83       	st	Z, r24
					
				//	TransmitData[j++] = (ADCValue[1] << 8);	// Original
				//	TransmitData[j++] = ADCValue[1];
				}
				if (ReceiveData[i] == REM){
 52a:	f7 01       	movw	r30, r14
 52c:	ee 5d       	subi	r30, 0xDE	; 222
 52e:	fe 4f       	sbci	r31, 0xFE	; 254
 530:	80 81       	ld	r24, Z
 532:	83 32       	cpi	r24, 0x23	; 35
 534:	e9 f4       	brne	.+58     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
					getADC(2);
 536:	82 e0       	ldi	r24, 0x02	; 2
 538:	d4 dd       	rcall	.-1112   	; 0xe2 <getADC>
					TransmitData[j++] = ReceiveData[i];
 53a:	ed 2d       	mov	r30, r13
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	e6 5e       	subi	r30, 0xE6	; 230
 540:	fe 4f       	sbci	r31, 0xFE	; 254
 542:	d7 01       	movw	r26, r14
 544:	ae 5d       	subi	r26, 0xDE	; 222
 546:	be 4f       	sbci	r27, 0xFE	; 254
 548:	8c 91       	ld	r24, X
 54a:	80 83       	st	Z, r24
 54c:	e1 e0       	ldi	r30, 0x01	; 1
 54e:	ed 0d       	add	r30, r13
					TransmitData[j++] = ADCVALUEL;
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	e6 5e       	subi	r30, 0xE6	; 230
 554:	fe 4f       	sbci	r31, 0xFE	; 254
 556:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADCVALUEL>
 55a:	80 83       	st	Z, r24
					TransmitData[j++] = ADCVALUEH;
 55c:	e2 e0       	ldi	r30, 0x02	; 2
 55e:	ed 0d       	add	r30, r13
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	83 e0       	ldi	r24, 0x03	; 3
 564:	d8 0e       	add	r13, r24
 566:	e6 5e       	subi	r30, 0xE6	; 230
 568:	fe 4f       	sbci	r31, 0xFE	; 254
 56a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 56e:	80 83       	st	Z, r24
	

	if(ReceiveAddress == NODEID2){ //Only receive if Address is NODEID2
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
 570:	1f 5f       	subi	r17, 0xFF	; 255
 572:	e1 2e       	mov	r14, r17
 574:	f1 2c       	mov	r15, r1
 576:	ea 14       	cp	r14, r10
 578:	fb 04       	cpc	r15, r11
 57a:	0c f4       	brge	.+2      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 57c:	90 cf       	rjmp	.-224    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 57e:	01 c0       	rjmp	.+2      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 580:	d1 2c       	mov	r13, r1
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = ADCVALUEL;
					TransmitData[j++] = ADCVALUEH;
				}
			}
			can_tx(MASTERID, j); //Transmit data depending on the number of message received
 582:	6d 2d       	mov	r22, r13
 584:	87 e1       	ldi	r24, 0x17	; 23
 586:	93 e0       	ldi	r25, 0x03	; 3
 588:	61 de       	rcall	.-830    	; 0x24c <can_tx>
 58a:	d8 c0       	rjmp	.+432    	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
		}
	}
	
	if(ReceiveAddress == NODEID3){ //Only receive if Address is NODEID3
 58c:	c3 30       	cpi	r28, 0x03	; 3
 58e:	a2 e0       	ldi	r26, 0x02	; 2
 590:	da 07       	cpc	r29, r26
 592:	09 f0       	breq	.+2      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 594:	65 c0       	rjmp	.+202    	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
 596:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ReceiveData>
 59a:	8d 33       	cpi	r24, 0x3D	; 61
 59c:	09 f0       	breq	.+2      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 59e:	b6 c1       	rjmp	.+876    	; 0x90c <__LOCK_REGION_LENGTH__+0x50c>
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
 5a0:	e0 2e       	mov	r14, r16
 5a2:	00 0f       	add	r16, r16
 5a4:	ff 08       	sbc	r15, r15
 5a6:	b2 e0       	ldi	r27, 0x02	; 2
 5a8:	eb 16       	cp	r14, r27
 5aa:	f1 04       	cpc	r15, r1
 5ac:	0c f4       	brge	.+2      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 5ae:	52 c0       	rjmp	.+164    	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 5b0:	c1 e0       	ldi	r28, 0x01	; 1
 5b2:	d0 e0       	ldi	r29, 0x00	; 0
 5b4:	11 e0       	ldi	r17, 0x01	; 1
 5b6:	00 e0       	ldi	r16, 0x00	; 0
				}
				if (ReceiveData[i] == TEMP_LINKS){
					getADC(0);
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (ADCValue[0] << 8);
					TransmitData[j++] = ADCValue[0];
 5b8:	0f 2e       	mov	r0, r31
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	cf 2e       	mov	r12, r31
 5be:	f1 e0       	ldi	r31, 0x01	; 1
 5c0:	df 2e       	mov	r13, r31
 5c2:	f0 2d       	mov	r31, r0
	if(ReceiveAddress == NODEID3){ //Only receive if Address is NODEID3
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
				if (ReceiveData[i] == FLOW_RICHTING_LINKS){ //if Receive data 0x01, Transmit the following data:
					TransmitData[j++] = ReceiveData[i];
 5c4:	0f 2e       	mov	r0, r31
 5c6:	f1 e3       	ldi	r31, 0x31	; 49
 5c8:	9f 2e       	mov	r9, r31
 5ca:	f0 2d       	mov	r31, r0
					TransmitData[j++] = (PulsePerSec[2] >> 8);
 5cc:	0f 2e       	mov	r0, r31
 5ce:	fc e0       	ldi	r31, 0x0C	; 12
 5d0:	af 2e       	mov	r10, r31
 5d2:	f1 e0       	ldi	r31, 0x01	; 1
 5d4:	bf 2e       	mov	r11, r31
 5d6:	f0 2d       	mov	r31, r0
	
	if(ReceiveAddress == NODEID3){ //Only receive if Address is NODEID3
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
				if (ReceiveData[i] == FLOW_RICHTING_LINKS){ //if Receive data 0x01, Transmit the following data:
 5d8:	fe 01       	movw	r30, r28
 5da:	ee 5d       	subi	r30, 0xDE	; 222
 5dc:	fe 4f       	sbci	r31, 0xFE	; 254
 5de:	80 81       	ld	r24, Z
 5e0:	81 33       	cpi	r24, 0x31	; 49
 5e2:	b1 f4       	brne	.+44     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
					TransmitData[j++] = ReceiveData[i];
 5e4:	e0 2f       	mov	r30, r16
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	e6 5e       	subi	r30, 0xE6	; 230
 5ea:	fe 4f       	sbci	r31, 0xFE	; 254
 5ec:	90 82       	st	Z, r9
					TransmitData[j++] = (PulsePerSec[2] >> 8);
 5ee:	f5 01       	movw	r30, r10
 5f0:	84 81       	ldd	r24, Z+4	; 0x04
 5f2:	95 81       	ldd	r25, Z+5	; 0x05
	if(ReceiveAddress == NODEID3){ //Only receive if Address is NODEID3
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
				if (ReceiveData[i] == FLOW_RICHTING_LINKS){ //if Receive data 0x01, Transmit the following data:
					TransmitData[j++] = ReceiveData[i];
 5f4:	e1 e0       	ldi	r30, 0x01	; 1
 5f6:	e0 0f       	add	r30, r16
					TransmitData[j++] = (PulsePerSec[2] >> 8);
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	e6 5e       	subi	r30, 0xE6	; 230
 5fc:	fe 4f       	sbci	r31, 0xFE	; 254
 5fe:	90 83       	st	Z, r25
					TransmitData[j++] = PulsePerSec[2];
 600:	e2 e0       	ldi	r30, 0x02	; 2
 602:	e0 0f       	add	r30, r16
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	0d 5f       	subi	r16, 0xFD	; 253
 608:	e6 5e       	subi	r30, 0xE6	; 230
 60a:	fe 4f       	sbci	r31, 0xFE	; 254
 60c:	80 83       	st	Z, r24
 60e:	1b c0       	rjmp	.+54     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
				}
				if (ReceiveData[i] == TEMP_LINKS){
 610:	82 33       	cpi	r24, 0x32	; 50
 612:	c9 f4       	brne	.+50     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
					getADC(0);
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	65 dd       	rcall	.-1334   	; 0xe2 <getADC>
					TransmitData[j++] = ReceiveData[i];
 618:	e0 2f       	mov	r30, r16
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	e6 5e       	subi	r30, 0xE6	; 230
 61e:	fe 4f       	sbci	r31, 0xFE	; 254
 620:	ce 5d       	subi	r28, 0xDE	; 222
 622:	de 4f       	sbci	r29, 0xFE	; 254
 624:	88 81       	ld	r24, Y
 626:	80 83       	st	Z, r24
 628:	e1 e0       	ldi	r30, 0x01	; 1
 62a:	e0 0f       	add	r30, r16
					TransmitData[j++] = (ADCValue[0] << 8);
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	e6 5e       	subi	r30, 0xE6	; 230
 630:	fe 4f       	sbci	r31, 0xFE	; 254
 632:	10 82       	st	Z, r1
					TransmitData[j++] = ADCValue[0];
 634:	e2 e0       	ldi	r30, 0x02	; 2
 636:	e0 0f       	add	r30, r16
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	0d 5f       	subi	r16, 0xFD	; 253
 63c:	e6 5e       	subi	r30, 0xE6	; 230
 63e:	fe 4f       	sbci	r31, 0xFE	; 254
 640:	d6 01       	movw	r26, r12
 642:	8c 91       	ld	r24, X
 644:	80 83       	st	Z, r24
	}
	
	if(ReceiveAddress == NODEID3){ //Only receive if Address is NODEID3
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
 646:	1f 5f       	subi	r17, 0xFF	; 255
 648:	c1 2f       	mov	r28, r17
 64a:	d0 e0       	ldi	r29, 0x00	; 0
 64c:	ce 15       	cp	r28, r14
 64e:	df 05       	cpc	r29, r15
 650:	1c f2       	brlt	.-122    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 652:	01 c0       	rjmp	.+2      	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 654:	00 e0       	ldi	r16, 0x00	; 0
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (ADCValue[0] << 8);
					TransmitData[j++] = ADCValue[0];
				}
			}
			can_tx(MASTERID, j); //Transmit data depending on the number of message received
 656:	60 2f       	mov	r22, r16
 658:	87 e1       	ldi	r24, 0x17	; 23
 65a:	93 e0       	ldi	r25, 0x03	; 3
 65c:	f7 dd       	rcall	.-1042   	; 0x24c <can_tx>
 65e:	56 c1       	rjmp	.+684    	; 0x90c <__LOCK_REGION_LENGTH__+0x50c>
		}
	}

	if(ReceiveAddress == NODEID4){ //Only receive if Address is NODEID4
 660:	c4 30       	cpi	r28, 0x04	; 4
 662:	b2 e0       	ldi	r27, 0x02	; 2
 664:	db 07       	cpc	r29, r27
 666:	09 f0       	breq	.+2      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 668:	69 c0       	rjmp	.+210    	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
 66a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ReceiveData>
 66e:	8d 33       	cpi	r24, 0x3D	; 61
 670:	09 f0       	breq	.+2      	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
 672:	4c c1       	rjmp	.+664    	; 0x90c <__LOCK_REGION_LENGTH__+0x50c>
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
 674:	e0 2e       	mov	r14, r16
 676:	00 0f       	add	r16, r16
 678:	ff 08       	sbc	r15, r15
 67a:	e2 e0       	ldi	r30, 0x02	; 2
 67c:	ee 16       	cp	r14, r30
 67e:	f1 04       	cpc	r15, r1
 680:	0c f4       	brge	.+2      	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 682:	56 c0       	rjmp	.+172    	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
 684:	c1 e0       	ldi	r28, 0x01	; 1
 686:	d0 e0       	ldi	r29, 0x00	; 0
 688:	11 e0       	ldi	r17, 0x01	; 1
 68a:	00 e0       	ldi	r16, 0x00	; 0
				}
				if (ReceiveData[i] == TEMP_RECHTS){
					getADC(0);
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (ADCValue[0] << 8);
					TransmitData[j++] = ADCValue[0];
 68c:	0f 2e       	mov	r0, r31
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	cf 2e       	mov	r12, r31
 692:	f1 e0       	ldi	r31, 0x01	; 1
 694:	df 2e       	mov	r13, r31
 696:	f0 2d       	mov	r31, r0
	if(ReceiveAddress == NODEID4){ //Only receive if Address is NODEID4
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
				if (ReceiveData[i] == FLOW_RICHTING_RECHTS){ //if Receive data 0x01, Transmit the following data:
					TransmitData[j++] = ReceiveData[i];
 698:	0f 2e       	mov	r0, r31
 69a:	f1 e4       	ldi	r31, 0x41	; 65
 69c:	9f 2e       	mov	r9, r31
 69e:	f0 2d       	mov	r31, r0
					TransmitData[j++] = (PulsePerSec[2] >> 8);
 6a0:	0f 2e       	mov	r0, r31
 6a2:	fc e0       	ldi	r31, 0x0C	; 12
 6a4:	af 2e       	mov	r10, r31
 6a6:	f1 e0       	ldi	r31, 0x01	; 1
 6a8:	bf 2e       	mov	r11, r31
 6aa:	f0 2d       	mov	r31, r0

	if(ReceiveAddress == NODEID4){ //Only receive if Address is NODEID4
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
				if (ReceiveData[i] == FLOW_RICHTING_RECHTS){ //if Receive data 0x01, Transmit the following data:
 6ac:	fe 01       	movw	r30, r28
 6ae:	ee 5d       	subi	r30, 0xDE	; 222
 6b0:	fe 4f       	sbci	r31, 0xFE	; 254
 6b2:	80 81       	ld	r24, Z
 6b4:	81 34       	cpi	r24, 0x41	; 65
 6b6:	c9 f4       	brne	.+50     	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
					TransmitData[j++] = ReceiveData[i];
 6b8:	e0 2f       	mov	r30, r16
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	e6 5e       	subi	r30, 0xE6	; 230
 6be:	fe 4f       	sbci	r31, 0xFE	; 254
 6c0:	90 82       	st	Z, r9
					TransmitData[j++] = (PulsePerSec[2] >> 8);
 6c2:	d5 01       	movw	r26, r10
 6c4:	14 96       	adiw	r26, 0x04	; 4
 6c6:	8c 91       	ld	r24, X
 6c8:	14 97       	sbiw	r26, 0x04	; 4
 6ca:	15 96       	adiw	r26, 0x05	; 5
 6cc:	9c 91       	ld	r25, X
	if(ReceiveAddress == NODEID4){ //Only receive if Address is NODEID4
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
				if (ReceiveData[i] == FLOW_RICHTING_RECHTS){ //if Receive data 0x01, Transmit the following data:
					TransmitData[j++] = ReceiveData[i];
 6ce:	e1 e0       	ldi	r30, 0x01	; 1
 6d0:	e0 0f       	add	r30, r16
					TransmitData[j++] = (PulsePerSec[2] >> 8);
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	e6 5e       	subi	r30, 0xE6	; 230
 6d6:	fe 4f       	sbci	r31, 0xFE	; 254
 6d8:	90 83       	st	Z, r25
					TransmitData[j++] = PulsePerSec[2];
 6da:	e2 e0       	ldi	r30, 0x02	; 2
 6dc:	e0 0f       	add	r30, r16
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	0d 5f       	subi	r16, 0xFD	; 253
 6e2:	e6 5e       	subi	r30, 0xE6	; 230
 6e4:	fe 4f       	sbci	r31, 0xFE	; 254
 6e6:	80 83       	st	Z, r24
 6e8:	1b c0       	rjmp	.+54     	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
				}
				if (ReceiveData[i] == TEMP_RECHTS){
 6ea:	82 34       	cpi	r24, 0x42	; 66
 6ec:	c9 f4       	brne	.+50     	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
					getADC(0);
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	f8 dc       	rcall	.-1552   	; 0xe2 <getADC>
					TransmitData[j++] = ReceiveData[i];
 6f2:	e0 2f       	mov	r30, r16
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	e6 5e       	subi	r30, 0xE6	; 230
 6f8:	fe 4f       	sbci	r31, 0xFE	; 254
 6fa:	ce 5d       	subi	r28, 0xDE	; 222
 6fc:	de 4f       	sbci	r29, 0xFE	; 254
 6fe:	88 81       	ld	r24, Y
 700:	80 83       	st	Z, r24
 702:	e1 e0       	ldi	r30, 0x01	; 1
 704:	e0 0f       	add	r30, r16
					TransmitData[j++] = (ADCValue[0] << 8);
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	e6 5e       	subi	r30, 0xE6	; 230
 70a:	fe 4f       	sbci	r31, 0xFE	; 254
 70c:	10 82       	st	Z, r1
					TransmitData[j++] = ADCValue[0];
 70e:	e2 e0       	ldi	r30, 0x02	; 2
 710:	e0 0f       	add	r30, r16
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	0d 5f       	subi	r16, 0xFD	; 253
 716:	e6 5e       	subi	r30, 0xE6	; 230
 718:	fe 4f       	sbci	r31, 0xFE	; 254
 71a:	d6 01       	movw	r26, r12
 71c:	8c 91       	ld	r24, X
 71e:	80 83       	st	Z, r24
	}

	if(ReceiveAddress == NODEID4){ //Only receive if Address is NODEID4
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
 720:	1f 5f       	subi	r17, 0xFF	; 255
 722:	c1 2f       	mov	r28, r17
 724:	d0 e0       	ldi	r29, 0x00	; 0
 726:	ce 15       	cp	r28, r14
 728:	df 05       	cpc	r29, r15
 72a:	0c f4       	brge	.+2      	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
 72c:	bf cf       	rjmp	.-130    	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
 72e:	01 c0       	rjmp	.+2      	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
 730:	00 e0       	ldi	r16, 0x00	; 0
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (ADCValue[0] << 8);
					TransmitData[j++] = ADCValue[0];
				}
			}
			can_tx(MASTERID, j); //Transmit data depending on the number of message received
 732:	60 2f       	mov	r22, r16
 734:	87 e1       	ldi	r24, 0x17	; 23
 736:	93 e0       	ldi	r25, 0x03	; 3
 738:	89 dd       	rcall	.-1262   	; 0x24c <can_tx>
 73a:	e8 c0       	rjmp	.+464    	; 0x90c <__LOCK_REGION_LENGTH__+0x50c>
		}
	}

	if(ReceiveAddress == ECU2ID){ //Only receive if Address is NODEID5
 73c:	c5 30       	cpi	r28, 0x05	; 5
 73e:	d2 40       	sbci	r29, 0x02	; 2
 740:	09 f0       	breq	.+2      	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 742:	e4 c0       	rjmp	.+456    	; 0x90c <__LOCK_REGION_LENGTH__+0x50c>
		for(uint8_t i = 1; i < length; i++){
 744:	00 2e       	mov	r0, r16
 746:	00 0c       	add	r0, r0
 748:	11 0b       	sbc	r17, r17
 74a:	02 30       	cpi	r16, 0x02	; 2
 74c:	11 05       	cpc	r17, r1
 74e:	0c f4       	brge	.+2      	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
 750:	dd c0       	rjmp	.+442    	; 0x90c <__LOCK_REGION_LENGTH__+0x50c>
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	c1 e0       	ldi	r28, 0x01	; 1
				if (ReceiveData[i] == DRAAIRICHTING_LINKS_ACHTER){
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = Direction[2];
				}
				if (ReceiveData[i] == DRAAIRICHTING_RECHTS_ACHTER){
					TransmitData[j++] = ReceiveData[i];
 758:	0f 2e       	mov	r0, r31
 75a:	f4 e5       	ldi	r31, 0x54	; 84
 75c:	5f 2e       	mov	r5, r31
 75e:	f0 2d       	mov	r31, r0
					TransmitData[j++] = Direction[1];
 760:	0f 2e       	mov	r0, r31
 762:	f8 e0       	ldi	r31, 0x08	; 8
 764:	af 2e       	mov	r10, r31
 766:	f1 e0       	ldi	r31, 0x01	; 1
 768:	bf 2e       	mov	r11, r31
 76a:	f0 2d       	mov	r31, r0

	if(ReceiveAddress == ECU2ID){ //Only receive if Address is NODEID5
		for(uint8_t i = 1; i < length; i++){
			if (ReceiveData[i] == 0x3D) { //if first data received is 3D = General data request
				i++;
				uint8_t j = 0;
 76c:	41 2c       	mov	r4, r1
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (PulsePerSec[1] >> 8);
					TransmitData[j++] = PulsePerSec[1];
				}
				if (ReceiveData[i] == DRAAIRICHTING_LINKS_ACHTER){
					TransmitData[j++] = ReceiveData[i];
 76e:	0f 2e       	mov	r0, r31
 770:	fa e1       	ldi	r31, 0x1A	; 26
 772:	ef 2e       	mov	r14, r31
 774:	f1 e0       	ldi	r31, 0x01	; 1
 776:	ff 2e       	mov	r15, r31
 778:	f0 2d       	mov	r31, r0
 77a:	0f 2e       	mov	r0, r31
 77c:	f3 e5       	ldi	r31, 0x53	; 83
 77e:	6f 2e       	mov	r6, r31
 780:	f0 2d       	mov	r31, r0
					TransmitData[j++] = Direction[2];
 782:	68 94       	set
 784:	77 24       	eor	r7, r7
 786:	71 f8       	bld	r7, 1
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (PulsePerSec[2] >> 8);
					TransmitData[j++] = PulsePerSec[2];
				}
				if (ReceiveData[i] == RPM_RECHTS_ACHTER){ //if Receive data 0x01, Transmit the following data:
					TransmitData[j++] = ReceiveData[i];
 788:	0f 2e       	mov	r0, r31
 78a:	f2 e5       	ldi	r31, 0x52	; 82
 78c:	8f 2e       	mov	r8, r31
 78e:	f0 2d       	mov	r31, r0
					TransmitData[j++] = (PulsePerSec[1] >> 8);
 790:	0f 2e       	mov	r0, r31
 792:	fc e0       	ldi	r31, 0x0C	; 12
 794:	cf 2e       	mov	r12, r31
 796:	f1 e0       	ldi	r31, 0x01	; 1
 798:	df 2e       	mov	r13, r31
 79a:	f0 2d       	mov	r31, r0
					TransmitData[j++] = PulsePerSec[1];
 79c:	d3 e0       	ldi	r29, 0x03	; 3
		for(uint8_t i = 1; i < length; i++){
			if (ReceiveData[i] == 0x3D) { //if first data received is 3D = General data request
				i++;
				uint8_t j = 0;
				if (ReceiveData[i] == RPM_LINKS_ACHTER){ //if Receive data 0x01, Transmit the following data:
					TransmitData[j++] = ReceiveData[i];
 79e:	0f 2e       	mov	r0, r31
 7a0:	f1 e5       	ldi	r31, 0x51	; 81
 7a2:	9f 2e       	mov	r9, r31
 7a4:	f0 2d       	mov	r31, r0
		}
	}

	if(ReceiveAddress == ECU2ID){ //Only receive if Address is NODEID5
		for(uint8_t i = 1; i < length; i++){
			if (ReceiveData[i] == 0x3D) { //if first data received is 3D = General data request
 7a6:	fc 01       	movw	r30, r24
 7a8:	ee 5d       	subi	r30, 0xDE	; 222
 7aa:	fe 4f       	sbci	r31, 0xFE	; 254
 7ac:	80 81       	ld	r24, Z
 7ae:	8d 33       	cpi	r24, 0x3D	; 61
 7b0:	09 f0       	breq	.+2      	; 0x7b4 <__LOCK_REGION_LENGTH__+0x3b4>
 7b2:	41 c0       	rjmp	.+130    	; 0x836 <__LOCK_REGION_LENGTH__+0x436>
				i++;
 7b4:	cf 5f       	subi	r28, 0xFF	; 255
				uint8_t j = 0;
				if (ReceiveData[i] == RPM_LINKS_ACHTER){ //if Receive data 0x01, Transmit the following data:
 7b6:	ec 2f       	mov	r30, r28
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	ee 5d       	subi	r30, 0xDE	; 222
 7bc:	fe 4f       	sbci	r31, 0xFE	; 254
 7be:	80 81       	ld	r24, Z
 7c0:	81 35       	cpi	r24, 0x51	; 81
 7c2:	61 f4       	brne	.+24     	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>
					TransmitData[j++] = ReceiveData[i];
 7c4:	f7 01       	movw	r30, r14
 7c6:	90 82       	st	Z, r9
					TransmitData[j++] = (PulsePerSec[2] >> 8);
 7c8:	d6 01       	movw	r26, r12
 7ca:	14 96       	adiw	r26, 0x04	; 4
 7cc:	9c 91       	ld	r25, X
 7ce:	14 97       	sbiw	r26, 0x04	; 4
 7d0:	15 96       	adiw	r26, 0x05	; 5
 7d2:	2c 91       	ld	r18, X
 7d4:	21 83       	std	Z+1, r18	; 0x01
					TransmitData[j++] = PulsePerSec[2];
 7d6:	92 83       	std	Z+2, r25	; 0x02
 7d8:	6d 2f       	mov	r22, r29
 7da:	19 c0       	rjmp	.+50     	; 0x80e <__LOCK_REGION_LENGTH__+0x40e>
				}
				if (ReceiveData[i] == RPM_RECHTS_ACHTER){ //if Receive data 0x01, Transmit the following data:
 7dc:	82 35       	cpi	r24, 0x52	; 82
 7de:	61 f4       	brne	.+24     	; 0x7f8 <__LOCK_REGION_LENGTH__+0x3f8>
					TransmitData[j++] = ReceiveData[i];
 7e0:	f7 01       	movw	r30, r14
 7e2:	80 82       	st	Z, r8
					TransmitData[j++] = (PulsePerSec[1] >> 8);
 7e4:	d6 01       	movw	r26, r12
 7e6:	12 96       	adiw	r26, 0x02	; 2
 7e8:	8c 91       	ld	r24, X
 7ea:	12 97       	sbiw	r26, 0x02	; 2
 7ec:	13 96       	adiw	r26, 0x03	; 3
 7ee:	9c 91       	ld	r25, X
 7f0:	91 83       	std	Z+1, r25	; 0x01
					TransmitData[j++] = PulsePerSec[1];
 7f2:	82 83       	std	Z+2, r24	; 0x02
 7f4:	6d 2f       	mov	r22, r29
 7f6:	1c c0       	rjmp	.+56     	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
				}
				if (ReceiveData[i] == DRAAIRICHTING_LINKS_ACHTER){
 7f8:	83 35       	cpi	r24, 0x53	; 83
 7fa:	41 f4       	brne	.+16     	; 0x80c <__LOCK_REGION_LENGTH__+0x40c>
					TransmitData[j++] = ReceiveData[i];
 7fc:	f7 01       	movw	r30, r14
 7fe:	60 82       	st	Z, r6
					TransmitData[j++] = Direction[2];
 800:	d5 01       	movw	r26, r10
 802:	12 96       	adiw	r26, 0x02	; 2
 804:	8c 91       	ld	r24, X
 806:	81 83       	std	Z+1, r24	; 0x01
 808:	67 2d       	mov	r22, r7
 80a:	12 c0       	rjmp	.+36     	; 0x830 <__LOCK_REGION_LENGTH__+0x430>

	if(ReceiveAddress == ECU2ID){ //Only receive if Address is NODEID5
		for(uint8_t i = 1; i < length; i++){
			if (ReceiveData[i] == 0x3D) { //if first data received is 3D = General data request
				i++;
				uint8_t j = 0;
 80c:	64 2d       	mov	r22, r4
				}
				if (ReceiveData[i] == DRAAIRICHTING_LINKS_ACHTER){
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = Direction[2];
				}
				if (ReceiveData[i] == DRAAIRICHTING_RECHTS_ACHTER){
 80e:	84 35       	cpi	r24, 0x54	; 84
 810:	79 f4       	brne	.+30     	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
					TransmitData[j++] = ReceiveData[i];
 812:	e6 2f       	mov	r30, r22
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	e6 5e       	subi	r30, 0xE6	; 230
 818:	fe 4f       	sbci	r31, 0xFE	; 254
 81a:	50 82       	st	Z, r5
					TransmitData[j++] = Direction[1];
 81c:	e1 e0       	ldi	r30, 0x01	; 1
 81e:	e6 0f       	add	r30, r22
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	6e 5f       	subi	r22, 0xFE	; 254
 824:	e6 5e       	subi	r30, 0xE6	; 230
 826:	fe 4f       	sbci	r31, 0xFE	; 254
 828:	d5 01       	movw	r26, r10
 82a:	11 96       	adiw	r26, 0x01	; 1
 82c:	8c 91       	ld	r24, X
 82e:	80 83       	st	Z, r24
				}
				can_tx(MASTERID, j); //Transmit data depending on the number of message received
 830:	87 e1       	ldi	r24, 0x17	; 23
 832:	93 e0       	ldi	r25, 0x03	; 3
 834:	0b dd       	rcall	.-1514   	; 0x24c <can_tx>
			}
			if (ReceiveData[i] == RUN_ENABLE){
 836:	ec 2f       	mov	r30, r28
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	ee 5d       	subi	r30, 0xDE	; 222
 83c:	fe 4f       	sbci	r31, 0xFE	; 254
 83e:	80 81       	ld	r24, Z
 840:	85 35       	cpi	r24, 0x55	; 85
 842:	69 f4       	brne	.+26     	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
				i++;
				DDRC	|= (1 << PC6);
 844:	3e 9a       	sbi	0x07, 6	; 7
				if(ReceiveData[i++]){	PORTC	|= (1 << PC6);}
 846:	e1 e0       	ldi	r30, 0x01	; 1
 848:	ec 0f       	add	r30, r28
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	ce 5f       	subi	r28, 0xFE	; 254
 84e:	ee 5d       	subi	r30, 0xDE	; 222
 850:	fe 4f       	sbci	r31, 0xFE	; 254
 852:	80 81       	ld	r24, Z
 854:	88 23       	and	r24, r24
 856:	11 f0       	breq	.+4      	; 0x85c <__LOCK_REGION_LENGTH__+0x45c>
 858:	46 9a       	sbi	0x08, 6	; 8
 85a:	01 c0       	rjmp	.+2      	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
				else{				PORTC	&= ~(1 << PC6);}
 85c:	46 98       	cbi	0x08, 6	; 8
			}
			if (ReceiveData[i] == MOTOR_CONTROLLER){
 85e:	ec 2f       	mov	r30, r28
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	ee 5d       	subi	r30, 0xDE	; 222
 864:	fe 4f       	sbci	r31, 0xFE	; 254
 866:	80 81       	ld	r24, Z
 868:	86 35       	cpi	r24, 0x56	; 86
 86a:	69 f4       	brne	.+26     	; 0x886 <__LOCK_REGION_LENGTH__+0x486>
				i++;
				DDRC	|= (1 << PC1);
 86c:	39 9a       	sbi	0x07, 1	; 7
				if(ReceiveData[i++]){	PORTC	|= (1 << PC1);}
 86e:	e1 e0       	ldi	r30, 0x01	; 1
 870:	ec 0f       	add	r30, r28
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	ce 5f       	subi	r28, 0xFE	; 254
 876:	ee 5d       	subi	r30, 0xDE	; 222
 878:	fe 4f       	sbci	r31, 0xFE	; 254
 87a:	80 81       	ld	r24, Z
 87c:	88 23       	and	r24, r24
 87e:	11 f0       	breq	.+4      	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
 880:	41 9a       	sbi	0x08, 1	; 8
 882:	01 c0       	rjmp	.+2      	; 0x886 <__LOCK_REGION_LENGTH__+0x486>
				else{				PORTC	&= ~(1 << PC1);}
 884:	41 98       	cbi	0x08, 1	; 8
			}
			if (ReceiveData[i] == BRAKELIGHT){
 886:	ec 2f       	mov	r30, r28
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	ee 5d       	subi	r30, 0xDE	; 222
 88c:	fe 4f       	sbci	r31, 0xFE	; 254
 88e:	80 81       	ld	r24, Z
 890:	87 35       	cpi	r24, 0x57	; 87
 892:	69 f4       	brne	.+26     	; 0x8ae <__LOCK_REGION_LENGTH__+0x4ae>
				i++;
				DDRC	|= (1 << PC3);
 894:	3b 9a       	sbi	0x07, 3	; 7
				if(ReceiveData[i++]){	PORTC	|= (1 << PC3);}
 896:	e1 e0       	ldi	r30, 0x01	; 1
 898:	ec 0f       	add	r30, r28
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	ce 5f       	subi	r28, 0xFE	; 254
 89e:	ee 5d       	subi	r30, 0xDE	; 222
 8a0:	fe 4f       	sbci	r31, 0xFE	; 254
 8a2:	80 81       	ld	r24, Z
 8a4:	88 23       	and	r24, r24
 8a6:	11 f0       	breq	.+4      	; 0x8ac <__LOCK_REGION_LENGTH__+0x4ac>
 8a8:	43 9a       	sbi	0x08, 3	; 8
 8aa:	01 c0       	rjmp	.+2      	; 0x8ae <__LOCK_REGION_LENGTH__+0x4ae>
				else{				PORTC	&= ~(1 << PC3);}
 8ac:	43 98       	cbi	0x08, 3	; 8
			}
			if (ReceiveData[i] == PRE_DISCHARGE){
 8ae:	ec 2f       	mov	r30, r28
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	ee 5d       	subi	r30, 0xDE	; 222
 8b4:	fe 4f       	sbci	r31, 0xFE	; 254
 8b6:	80 81       	ld	r24, Z
 8b8:	88 35       	cpi	r24, 0x58	; 88
 8ba:	69 f4       	brne	.+26     	; 0x8d6 <__LOCK_REGION_LENGTH__+0x4d6>
				i++;
				DDRC	|= (1 << PC4);
 8bc:	3c 9a       	sbi	0x07, 4	; 7
				if(ReceiveData[i++]){	PORTC	|= (1 << PC4);}
 8be:	e1 e0       	ldi	r30, 0x01	; 1
 8c0:	ec 0f       	add	r30, r28
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	ce 5f       	subi	r28, 0xFE	; 254
 8c6:	ee 5d       	subi	r30, 0xDE	; 222
 8c8:	fe 4f       	sbci	r31, 0xFE	; 254
 8ca:	80 81       	ld	r24, Z
 8cc:	88 23       	and	r24, r24
 8ce:	11 f0       	breq	.+4      	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
 8d0:	44 9a       	sbi	0x08, 4	; 8
 8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <__LOCK_REGION_LENGTH__+0x4d6>
				else{				PORTC	&= ~(1 << PC4);}
 8d4:	44 98       	cbi	0x08, 4	; 8
			}
			if (ReceiveData[i] == PUMP){
 8d6:	ec 2f       	mov	r30, r28
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	ee 5d       	subi	r30, 0xDE	; 222
 8dc:	fe 4f       	sbci	r31, 0xFE	; 254
 8de:	80 81       	ld	r24, Z
 8e0:	89 35       	cpi	r24, 0x59	; 89
 8e2:	69 f4       	brne	.+26     	; 0x8fe <__LOCK_REGION_LENGTH__+0x4fe>
				i++;
				DDRC	|= (1 << PC2);
 8e4:	3a 9a       	sbi	0x07, 2	; 7
				if(ReceiveData[i++]){	PORTC	|= (1 << PC2);}
 8e6:	e1 e0       	ldi	r30, 0x01	; 1
 8e8:	ec 0f       	add	r30, r28
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	ce 5f       	subi	r28, 0xFE	; 254
 8ee:	ee 5d       	subi	r30, 0xDE	; 222
 8f0:	fe 4f       	sbci	r31, 0xFE	; 254
 8f2:	80 81       	ld	r24, Z
 8f4:	88 23       	and	r24, r24
 8f6:	11 f0       	breq	.+4      	; 0x8fc <__LOCK_REGION_LENGTH__+0x4fc>
 8f8:	42 9a       	sbi	0x08, 2	; 8
 8fa:	01 c0       	rjmp	.+2      	; 0x8fe <__LOCK_REGION_LENGTH__+0x4fe>
				else{				PORTC	&= ~(1 << PC2);}
 8fc:	42 98       	cbi	0x08, 2	; 8
			can_tx(MASTERID, j); //Transmit data depending on the number of message received
		}
	}

	if(ReceiveAddress == ECU2ID){ //Only receive if Address is NODEID5
		for(uint8_t i = 1; i < length; i++){
 8fe:	cf 5f       	subi	r28, 0xFF	; 255
 900:	8c 2f       	mov	r24, r28
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	80 17       	cp	r24, r16
 906:	91 07       	cpc	r25, r17
 908:	0c f4       	brge	.+2      	; 0x90c <__LOCK_REGION_LENGTH__+0x50c>
 90a:	4d cf       	rjmp	.-358    	; 0x7a6 <__LOCK_REGION_LENGTH__+0x3a6>
 90c:	e2 e2       	ldi	r30, 0x22	; 34
 90e:	f1 e0       	ldi	r31, 0x01	; 1
 910:	aa e1       	ldi	r26, 0x1A	; 26
 912:	b1 e0       	ldi	r27, 0x01	; 1
 914:	8a e2       	ldi	r24, 0x2A	; 42
 916:	91 e0       	ldi	r25, 0x01	; 1
			}
		}
	}

	for (int8_t i = 0; i < 8; i++){
		ReceiveData[i] = 0; //Resetting Receive Data
 918:	11 92       	st	Z+, r1
		TransmitData[i] = 0; //Resetting Transmit Data
 91a:	1d 92       	st	X+, r1
				else{				PORTC	&= ~(1 << PC2);}
			}
		}
	}

	for (int8_t i = 0; i < 8; i++){
 91c:	e8 17       	cp	r30, r24
 91e:	f9 07       	cpc	r31, r25
 920:	d9 f7       	brne	.-10     	; 0x918 <__LOCK_REGION_LENGTH__+0x518>
		ReceiveData[i] = 0; //Resetting Receive Data
		TransmitData[i] = 0; //Resetting Transmit Data
	}


	CANSTMOB = 0x00; // Clear RXOK flag
 922:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 3 << DLC0)); //CAN MOb Control and DLC Register: (1<<CONMOB1) = enable reception. (0<<IDE) = can standard rev 2.0A ( id length = 11 bits), (3 << DLC0) 3 Bytes in the data field of the message.
 926:	83 e8       	ldi	r24, 0x83	; 131
 928:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 0 << MOBNB0 ); // select 0000 = CANMOB0
 92c:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
}
 930:	ff 91       	pop	r31
 932:	ef 91       	pop	r30
 934:	df 91       	pop	r29
 936:	cf 91       	pop	r28
 938:	bf 91       	pop	r27
 93a:	af 91       	pop	r26
 93c:	9f 91       	pop	r25
 93e:	8f 91       	pop	r24
 940:	7f 91       	pop	r23
 942:	6f 91       	pop	r22
 944:	5f 91       	pop	r21
 946:	4f 91       	pop	r20
 948:	3f 91       	pop	r19
 94a:	2f 91       	pop	r18
 94c:	1f 91       	pop	r17
 94e:	0f 91       	pop	r16
 950:	ff 90       	pop	r15
 952:	ef 90       	pop	r14
 954:	df 90       	pop	r13
 956:	cf 90       	pop	r12
 958:	bf 90       	pop	r11
 95a:	af 90       	pop	r10
 95c:	9f 90       	pop	r9
 95e:	8f 90       	pop	r8
 960:	7f 90       	pop	r7
 962:	6f 90       	pop	r6
 964:	5f 90       	pop	r5
 966:	4f 90       	pop	r4
 968:	0f 90       	pop	r0
 96a:	0b be       	out	0x3b, r0	; 59
 96c:	0f 90       	pop	r0
 96e:	0f be       	out	0x3f, r0	; 63
 970:	0f 90       	pop	r0
 972:	1f 90       	pop	r1
 974:	18 95       	reti

00000976 <int_ExternalInterrupt>:
	//PORTE	|= 0b01000000; // Input 6   INT6   PullUp
	
	//TCCR1B |= ( 1 << CS12 ); // 16000000 / 1024 = 15625 counts/second
	//TCCR3B |= ( 1 << CS32 ); // 16000000 / 1024 = 15625 counts/second
	
	TIMSK1 |= ( 1 << TOIE1);
 976:	ef e6       	ldi	r30, 0x6F	; 111
 978:	f0 e0       	ldi	r31, 0x00	; 0
 97a:	80 81       	ld	r24, Z
 97c:	81 60       	ori	r24, 0x01	; 1
 97e:	80 83       	st	Z, r24
	TIMSK3 |= ( 1 << TOIE3);
 980:	e1 e7       	ldi	r30, 0x71	; 113
 982:	f0 e0       	ldi	r31, 0x00	; 0
 984:	80 81       	ld	r24, Z
 986:	81 60       	ori	r24, 0x01	; 1
 988:	80 83       	st	Z, r24
	
	EICRA =	  (1 << ISC31)
 98a:	8a ea       	ldi	r24, 0xAA	; 170
 98c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
			| (1 << ISC11)
			| (0 << ISC10)
			| (1 << ISC01)
			| (0 << ISC00);
	
	EICRB =	  (1 << ISC71)
 990:	82 ea       	ldi	r24, 0xA2	; 162
 992:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 996:	08 95       	ret

00000998 <__vector_1>:
			| (0 << ISC50)
			| (1 << ISC41)
			| (0 << ISC40);
}

ISR(INT0_vect){
 998:	1f 92       	push	r1
 99a:	0f 92       	push	r0
 99c:	0f b6       	in	r0, 0x3f	; 63
 99e:	0f 92       	push	r0
 9a0:	11 24       	eor	r1, r1
	
}
 9a2:	0f 90       	pop	r0
 9a4:	0f be       	out	0x3f, r0	; 63
 9a6:	0f 90       	pop	r0
 9a8:	1f 90       	pop	r1
 9aa:	18 95       	reti

000009ac <__vector_2>:

ISR(INT1_vect){
 9ac:	1f 92       	push	r1
 9ae:	0f 92       	push	r0
 9b0:	0f b6       	in	r0, 0x3f	; 63
 9b2:	0f 92       	push	r0
 9b4:	11 24       	eor	r1, r1
 9b6:	0b b6       	in	r0, 0x3b	; 59
 9b8:	0f 92       	push	r0
 9ba:	2f 93       	push	r18
 9bc:	3f 93       	push	r19
 9be:	4f 93       	push	r20
 9c0:	5f 93       	push	r21
 9c2:	6f 93       	push	r22
 9c4:	7f 93       	push	r23
 9c6:	8f 93       	push	r24
 9c8:	9f 93       	push	r25
 9ca:	af 93       	push	r26
 9cc:	bf 93       	push	r27
 9ce:	ef 93       	push	r30
 9d0:	ff 93       	push	r31
	
	
	uint16_t InterruptPairTimerTemp;
	
	InterruptPairTimerTemp = TCNT1L;
 9d2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	InterruptPairTimerTemp += (TCNT1H << 8);
 9d6:	60 91 85 00 	lds	r22, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	
	TCNT3H = 0x00;
 9da:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	TCNT3L = 0x00;
 9de:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
	
	
	uint16_t InterruptPairTimerTemp;
	
	InterruptPairTimerTemp = TCNT1L;
	InterruptPairTimerTemp += (TCNT1H << 8);
 9e2:	70 e0       	ldi	r23, 0x00	; 0
 9e4:	76 2f       	mov	r23, r22
 9e6:	66 27       	eor	r22, r22
 9e8:	68 0f       	add	r22, r24
 9ea:	71 1d       	adc	r23, r1
	
	TCNT3H = 0x00;
	TCNT3L = 0x00;
	
	PulsePerSec[3] = 15625 / InterruptPairTimerTemp;
 9ec:	89 e0       	ldi	r24, 0x09	; 9
 9ee:	9d e3       	ldi	r25, 0x3D	; 61
 9f0:	56 d2       	rcall	.+1196   	; 0xe9e <__udivmodhi4>
 9f2:	ec e0       	ldi	r30, 0x0C	; 12
 9f4:	f1 e0       	ldi	r31, 0x01	; 1
 9f6:	66 83       	std	Z+6, r22	; 0x06
 9f8:	77 83       	std	Z+7, r23	; 0x07
	
	TransmitData[0] = (PulsePerSec[3] << 8);
 9fa:	ea e1       	ldi	r30, 0x1A	; 26
 9fc:	f1 e0       	ldi	r31, 0x01	; 1
 9fe:	10 82       	st	Z, r1
	TransmitData[1] = PulsePerSec[3];
 a00:	61 83       	std	Z+1, r22	; 0x01
	can_tx(MASTERID, 2);
 a02:	62 e0       	ldi	r22, 0x02	; 2
 a04:	87 e1       	ldi	r24, 0x17	; 23
 a06:	93 e0       	ldi	r25, 0x03	; 3
 a08:	21 dc       	rcall	.-1982   	; 0x24c <can_tx>
}
 a0a:	ff 91       	pop	r31
 a0c:	ef 91       	pop	r30
 a0e:	bf 91       	pop	r27
 a10:	af 91       	pop	r26
 a12:	9f 91       	pop	r25
 a14:	8f 91       	pop	r24
 a16:	7f 91       	pop	r23
 a18:	6f 91       	pop	r22
 a1a:	5f 91       	pop	r21
 a1c:	4f 91       	pop	r20
 a1e:	3f 91       	pop	r19
 a20:	2f 91       	pop	r18
 a22:	0f 90       	pop	r0
 a24:	0b be       	out	0x3b, r0	; 59
 a26:	0f 90       	pop	r0
 a28:	0f be       	out	0x3f, r0	; 63
 a2a:	0f 90       	pop	r0
 a2c:	1f 90       	pop	r1
 a2e:	18 95       	reti

00000a30 <__vector_3>:

ISR(INT2_vect){
 a30:	1f 92       	push	r1
 a32:	0f 92       	push	r0
 a34:	0f b6       	in	r0, 0x3f	; 63
 a36:	0f 92       	push	r0
 a38:	11 24       	eor	r1, r1
 a3a:	0b b6       	in	r0, 0x3b	; 59
 a3c:	0f 92       	push	r0
 a3e:	2f 93       	push	r18
 a40:	3f 93       	push	r19
 a42:	4f 93       	push	r20
 a44:	5f 93       	push	r21
 a46:	6f 93       	push	r22
 a48:	7f 93       	push	r23
 a4a:	8f 93       	push	r24
 a4c:	9f 93       	push	r25
 a4e:	af 93       	push	r26
 a50:	bf 93       	push	r27
 a52:	ef 93       	push	r30
 a54:	ff 93       	push	r31
	uint16_t InterruptPairTimerTemp;
	
	InterruptPairTimerTemp = TCNT3L;
 a56:	e4 e9       	ldi	r30, 0x94	; 148
 a58:	f0 e0       	ldi	r31, 0x00	; 0
 a5a:	80 81       	ld	r24, Z
	InterruptPairTimerTemp += (TCNT3H << 8);
 a5c:	a5 e9       	ldi	r26, 0x95	; 149
 a5e:	b0 e0       	ldi	r27, 0x00	; 0
 a60:	6c 91       	ld	r22, X
	
	TCNT3H = 0x00;
 a62:	1c 92       	st	X, r1
	TCNT3L = 0x00;
 a64:	10 82       	st	Z, r1

ISR(INT2_vect){
	uint16_t InterruptPairTimerTemp;
	
	InterruptPairTimerTemp = TCNT3L;
	InterruptPairTimerTemp += (TCNT3H << 8);
 a66:	70 e0       	ldi	r23, 0x00	; 0
 a68:	76 2f       	mov	r23, r22
 a6a:	66 27       	eor	r22, r22
 a6c:	68 0f       	add	r22, r24
 a6e:	71 1d       	adc	r23, r1
	
	TCNT3H = 0x00;
	TCNT3L = 0x00;
	
	PulsePerSec[2] = 15625 / InterruptPairTimerTemp;
 a70:	89 e0       	ldi	r24, 0x09	; 9
 a72:	9d e3       	ldi	r25, 0x3D	; 61
 a74:	14 d2       	rcall	.+1064   	; 0xe9e <__udivmodhi4>
 a76:	ec e0       	ldi	r30, 0x0C	; 12
 a78:	f1 e0       	ldi	r31, 0x01	; 1
 a7a:	64 83       	std	Z+4, r22	; 0x04
 a7c:	75 83       	std	Z+5, r23	; 0x05
	
	TransmitData[0] = (PulsePerSec[2] << 8);
 a7e:	ea e1       	ldi	r30, 0x1A	; 26
 a80:	f1 e0       	ldi	r31, 0x01	; 1
 a82:	10 82       	st	Z, r1
	TransmitData[1] = PulsePerSec[2];
 a84:	61 83       	std	Z+1, r22	; 0x01
	can_tx(MASTERID, 2);
 a86:	62 e0       	ldi	r22, 0x02	; 2
 a88:	87 e1       	ldi	r24, 0x17	; 23
 a8a:	93 e0       	ldi	r25, 0x03	; 3
 a8c:	df db       	rcall	.-2114   	; 0x24c <can_tx>
}
 a8e:	ff 91       	pop	r31
 a90:	ef 91       	pop	r30
 a92:	bf 91       	pop	r27
 a94:	af 91       	pop	r26
 a96:	9f 91       	pop	r25
 a98:	8f 91       	pop	r24
 a9a:	7f 91       	pop	r23
 a9c:	6f 91       	pop	r22
 a9e:	5f 91       	pop	r21
 aa0:	4f 91       	pop	r20
 aa2:	3f 91       	pop	r19
 aa4:	2f 91       	pop	r18
 aa6:	0f 90       	pop	r0
 aa8:	0b be       	out	0x3b, r0	; 59
 aaa:	0f 90       	pop	r0
 aac:	0f be       	out	0x3f, r0	; 63
 aae:	0f 90       	pop	r0
 ab0:	1f 90       	pop	r1
 ab2:	18 95       	reti

00000ab4 <__vector_4>:

ISR(INT3_vect){
 ab4:	1f 92       	push	r1
 ab6:	0f 92       	push	r0
 ab8:	0f b6       	in	r0, 0x3f	; 63
 aba:	0f 92       	push	r0
 abc:	11 24       	eor	r1, r1
 abe:	0b b6       	in	r0, 0x3b	; 59
 ac0:	0f 92       	push	r0
 ac2:	2f 93       	push	r18
 ac4:	3f 93       	push	r19
 ac6:	5f 93       	push	r21
 ac8:	6f 93       	push	r22
 aca:	7f 93       	push	r23
 acc:	8f 93       	push	r24
 ace:	9f 93       	push	r25
 ad0:	af 93       	push	r26
 ad2:	bf 93       	push	r27
 ad4:	cf 93       	push	r28
 ad6:	df 93       	push	r29
 ad8:	ef 93       	push	r30
 ada:	ff 93       	push	r31
	if (InterruptPairDirection[1]){
 adc:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <InterruptPairDirection+0x1>
 ae0:	88 23       	and	r24, r24
 ae2:	11 f1       	breq	.+68     	; 0xb28 <__vector_4+0x74>
		
		InterruptPairTimer[1] = TCNT3L;
 ae4:	e4 e9       	ldi	r30, 0x94	; 148
 ae6:	f0 e0       	ldi	r31, 0x00	; 0
 ae8:	60 81       	ld	r22, Z
 aea:	86 2f       	mov	r24, r22
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	c4 e1       	ldi	r28, 0x14	; 20
 af0:	d1 e0       	ldi	r29, 0x01	; 1
 af2:	9b 83       	std	Y+3, r25	; 0x03
 af4:	8a 83       	std	Y+2, r24	; 0x02
		InterruptPairTimer[1] += (TCNT3H << 8);
 af6:	a5 e9       	ldi	r26, 0x95	; 149
 af8:	b0 e0       	ldi	r27, 0x00	; 0
 afa:	6c 91       	ld	r22, X
 afc:	70 e0       	ldi	r23, 0x00	; 0
 afe:	76 2f       	mov	r23, r22
 b00:	66 27       	eor	r22, r22
 b02:	68 0f       	add	r22, r24
 b04:	79 1f       	adc	r23, r25
 b06:	7b 83       	std	Y+3, r23	; 0x03
 b08:	6a 83       	std	Y+2, r22	; 0x02
		
		TCNT3H = 0x00;
 b0a:	1c 92       	st	X, r1
		TCNT3L = 0x00;
 b0c:	10 82       	st	Z, r1
		
		PulsePerSec[1] = 15625 / InterruptPairTimer[1];
 b0e:	89 e0       	ldi	r24, 0x09	; 9
 b10:	9d e3       	ldi	r25, 0x3D	; 61
 b12:	c5 d1       	rcall	.+906    	; 0xe9e <__udivmodhi4>
 b14:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <PulsePerSec+0x3>
 b18:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <PulsePerSec+0x2>
		Direction[1] = 1;
 b1c:	81 e0       	ldi	r24, 0x01	; 1
 b1e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Direction+0x1>
		
		InterruptPairDirection[1] = 0;
 b22:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <InterruptPairDirection+0x1>
 b26:	1d c0       	rjmp	.+58     	; 0xb62 <__vector_4+0xae>
	}
	else{
		uint16_t InterruptPairTimerTemp;
		
		InterruptPairTimerTemp = TCNT3L;
 b28:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
		InterruptPairTimerTemp += (TCNT3H << 8);
 b2c:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	98 2f       	mov	r25, r24
 b34:	88 27       	eor	r24, r24
 b36:	82 0f       	add	r24, r18
 b38:	91 1d       	adc	r25, r1
		
		if(InterruptPairTimerTemp < (InterruptPairTimer[1]/2)){
 b3a:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <InterruptPairTimer+0x2>
 b3e:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <InterruptPairTimer+0x3>
 b42:	36 95       	lsr	r19
 b44:	27 95       	ror	r18
 b46:	82 17       	cp	r24, r18
 b48:	93 07       	cpc	r25, r19
 b4a:	30 f4       	brcc	.+12     	; 0xb58 <__vector_4+0xa4>
			InterruptPairDirection[1] = 1;
 b4c:	81 e0       	ldi	r24, 0x01	; 1
 b4e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <InterruptPairDirection+0x1>
			Direction[1] = 0;
 b52:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <Direction+0x1>
 b56:	05 c0       	rjmp	.+10     	; 0xb62 <__vector_4+0xae>
		}
		else{
			InterruptPairDirection[1] = 0;
 b58:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <InterruptPairDirection+0x1>
			Direction[1] = 1;
 b5c:	81 e0       	ldi	r24, 0x01	; 1
 b5e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Direction+0x1>
		}
	}
}
 b62:	ff 91       	pop	r31
 b64:	ef 91       	pop	r30
 b66:	df 91       	pop	r29
 b68:	cf 91       	pop	r28
 b6a:	bf 91       	pop	r27
 b6c:	af 91       	pop	r26
 b6e:	9f 91       	pop	r25
 b70:	8f 91       	pop	r24
 b72:	7f 91       	pop	r23
 b74:	6f 91       	pop	r22
 b76:	5f 91       	pop	r21
 b78:	3f 91       	pop	r19
 b7a:	2f 91       	pop	r18
 b7c:	0f 90       	pop	r0
 b7e:	0b be       	out	0x3b, r0	; 59
 b80:	0f 90       	pop	r0
 b82:	0f be       	out	0x3f, r0	; 63
 b84:	0f 90       	pop	r0
 b86:	1f 90       	pop	r1
 b88:	18 95       	reti

00000b8a <__vector_5>:

ISR(INT4_vect){
 b8a:	1f 92       	push	r1
 b8c:	0f 92       	push	r0
 b8e:	0f b6       	in	r0, 0x3f	; 63
 b90:	0f 92       	push	r0
 b92:	11 24       	eor	r1, r1
 b94:	0b b6       	in	r0, 0x3b	; 59
 b96:	0f 92       	push	r0
 b98:	2f 93       	push	r18
 b9a:	3f 93       	push	r19
 b9c:	5f 93       	push	r21
 b9e:	6f 93       	push	r22
 ba0:	7f 93       	push	r23
 ba2:	8f 93       	push	r24
 ba4:	9f 93       	push	r25
 ba6:	af 93       	push	r26
 ba8:	bf 93       	push	r27
 baa:	cf 93       	push	r28
 bac:	df 93       	push	r29
 bae:	ef 93       	push	r30
 bb0:	ff 93       	push	r31
	if (InterruptPairDirection[1]){
 bb2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <InterruptPairDirection+0x1>
 bb6:	88 23       	and	r24, r24
 bb8:	09 f1       	breq	.+66     	; 0xbfc <__vector_5+0x72>
		
		InterruptPairTimer[1] = TCNT3L;
 bba:	e4 e9       	ldi	r30, 0x94	; 148
 bbc:	f0 e0       	ldi	r31, 0x00	; 0
 bbe:	60 81       	ld	r22, Z
 bc0:	86 2f       	mov	r24, r22
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	c4 e1       	ldi	r28, 0x14	; 20
 bc6:	d1 e0       	ldi	r29, 0x01	; 1
 bc8:	9b 83       	std	Y+3, r25	; 0x03
 bca:	8a 83       	std	Y+2, r24	; 0x02
		InterruptPairTimer[1] += (TCNT3H << 8);
 bcc:	a5 e9       	ldi	r26, 0x95	; 149
 bce:	b0 e0       	ldi	r27, 0x00	; 0
 bd0:	6c 91       	ld	r22, X
 bd2:	70 e0       	ldi	r23, 0x00	; 0
 bd4:	76 2f       	mov	r23, r22
 bd6:	66 27       	eor	r22, r22
 bd8:	68 0f       	add	r22, r24
 bda:	79 1f       	adc	r23, r25
 bdc:	7b 83       	std	Y+3, r23	; 0x03
 bde:	6a 83       	std	Y+2, r22	; 0x02
		
		TCNT3H = 0x00;
 be0:	1c 92       	st	X, r1
		TCNT3L = 0x00;
 be2:	10 82       	st	Z, r1
		
		PulsePerSec[1] = 15625 / InterruptPairTimer[1];
 be4:	89 e0       	ldi	r24, 0x09	; 9
 be6:	9d e3       	ldi	r25, 0x3D	; 61
 be8:	5a d1       	rcall	.+692    	; 0xe9e <__udivmodhi4>
 bea:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <PulsePerSec+0x3>
 bee:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <PulsePerSec+0x2>
		Direction[1] = 0;
 bf2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <Direction+0x1>
		
		InterruptPairDirection[1] = 0;
 bf6:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <InterruptPairDirection+0x1>
 bfa:	1c c0       	rjmp	.+56     	; 0xc34 <__vector_5+0xaa>
	}
	else{
		uint16_t InterruptPairTimerTemp;
		
		InterruptPairTimerTemp = TCNT3L;
 bfc:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
		InterruptPairTimerTemp += (TCNT3H << 8);
 c00:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 c04:	90 e0       	ldi	r25, 0x00	; 0
 c06:	98 2f       	mov	r25, r24
 c08:	88 27       	eor	r24, r24
 c0a:	82 0f       	add	r24, r18
 c0c:	91 1d       	adc	r25, r1
		
		if(InterruptPairTimerTemp < (InterruptPairTimer[1]/2)){
 c0e:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <InterruptPairTimer+0x2>
 c12:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <InterruptPairTimer+0x3>
 c16:	36 95       	lsr	r19
 c18:	27 95       	ror	r18
 c1a:	82 17       	cp	r24, r18
 c1c:	93 07       	cpc	r25, r19
 c1e:	30 f4       	brcc	.+12     	; 0xc2c <__vector_5+0xa2>
			InterruptPairDirection[1] = 1;
 c20:	81 e0       	ldi	r24, 0x01	; 1
 c22:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <InterruptPairDirection+0x1>
			Direction[1] = 1;
 c26:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Direction+0x1>
 c2a:	04 c0       	rjmp	.+8      	; 0xc34 <__vector_5+0xaa>
		}
		else{
			InterruptPairDirection[1] = 0;
 c2c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <InterruptPairDirection+0x1>
			Direction[1] = 0;
 c30:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <Direction+0x1>
		}
	}
}
 c34:	ff 91       	pop	r31
 c36:	ef 91       	pop	r30
 c38:	df 91       	pop	r29
 c3a:	cf 91       	pop	r28
 c3c:	bf 91       	pop	r27
 c3e:	af 91       	pop	r26
 c40:	9f 91       	pop	r25
 c42:	8f 91       	pop	r24
 c44:	7f 91       	pop	r23
 c46:	6f 91       	pop	r22
 c48:	5f 91       	pop	r21
 c4a:	3f 91       	pop	r19
 c4c:	2f 91       	pop	r18
 c4e:	0f 90       	pop	r0
 c50:	0b be       	out	0x3b, r0	; 59
 c52:	0f 90       	pop	r0
 c54:	0f be       	out	0x3f, r0	; 63
 c56:	0f 90       	pop	r0
 c58:	1f 90       	pop	r1
 c5a:	18 95       	reti

00000c5c <__vector_7>:

ISR(INT6_vect){
 c5c:	1f 92       	push	r1
 c5e:	0f 92       	push	r0
 c60:	0f b6       	in	r0, 0x3f	; 63
 c62:	0f 92       	push	r0
 c64:	11 24       	eor	r1, r1
 c66:	0b b6       	in	r0, 0x3b	; 59
 c68:	0f 92       	push	r0
 c6a:	2f 93       	push	r18
 c6c:	3f 93       	push	r19
 c6e:	5f 93       	push	r21
 c70:	6f 93       	push	r22
 c72:	7f 93       	push	r23
 c74:	8f 93       	push	r24
 c76:	9f 93       	push	r25
 c78:	af 93       	push	r26
 c7a:	bf 93       	push	r27
 c7c:	cf 93       	push	r28
 c7e:	df 93       	push	r29
 c80:	ef 93       	push	r30
 c82:	ff 93       	push	r31
	if (InterruptPairDirection[0]){
 c84:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <InterruptPairDirection>
 c88:	88 23       	and	r24, r24
 c8a:	19 f1       	breq	.+70     	; 0xcd2 <__vector_7+0x76>
		
		InterruptPairTimer[0] = TCNT1L;
 c8c:	a4 e8       	ldi	r26, 0x84	; 132
 c8e:	b0 e0       	ldi	r27, 0x00	; 0
 c90:	8c 91       	ld	r24, X
 c92:	90 e0       	ldi	r25, 0x00	; 0
 c94:	e4 e1       	ldi	r30, 0x14	; 20
 c96:	f1 e0       	ldi	r31, 0x01	; 1
 c98:	91 83       	std	Z+1, r25	; 0x01
 c9a:	80 83       	st	Z, r24
		InterruptPairTimer[0] += (TCNT1H << 8);
 c9c:	c5 e8       	ldi	r28, 0x85	; 133
 c9e:	d0 e0       	ldi	r29, 0x00	; 0
 ca0:	28 81       	ld	r18, Y
 ca2:	30 e0       	ldi	r19, 0x00	; 0
 ca4:	32 2f       	mov	r19, r18
 ca6:	22 27       	eor	r18, r18
 ca8:	82 0f       	add	r24, r18
 caa:	93 1f       	adc	r25, r19
 cac:	91 83       	std	Z+1, r25	; 0x01
 cae:	80 83       	st	Z, r24
		
		TCNT1H = 0x00;
 cb0:	18 82       	st	Y, r1
		TCNT1L = 0x00;
 cb2:	1c 92       	st	X, r1
		
		PulsePerSec[0] = 15625 / InterruptPairTimer[0];
 cb4:	60 81       	ld	r22, Z
 cb6:	71 81       	ldd	r23, Z+1	; 0x01
 cb8:	89 e0       	ldi	r24, 0x09	; 9
 cba:	9d e3       	ldi	r25, 0x3D	; 61
 cbc:	f0 d0       	rcall	.+480    	; 0xe9e <__udivmodhi4>
 cbe:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <PulsePerSec+0x1>
 cc2:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <PulsePerSec>
		Direction[0] = 1;
 cc6:	81 e0       	ldi	r24, 0x01	; 1
 cc8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Direction>
		
		InterruptPairDirection[0] = 0;
 ccc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <InterruptPairDirection>
 cd0:	1d c0       	rjmp	.+58     	; 0xd0c <__vector_7+0xb0>
	}
	else{
		uint16_t InterruptPairTimerTemp;
		
		InterruptPairTimerTemp = TCNT1L;
 cd2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
		InterruptPairTimerTemp += (TCNT1H << 8);
 cd6:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 cda:	90 e0       	ldi	r25, 0x00	; 0
 cdc:	98 2f       	mov	r25, r24
 cde:	88 27       	eor	r24, r24
 ce0:	82 0f       	add	r24, r18
 ce2:	91 1d       	adc	r25, r1
		
		if(InterruptPairTimerTemp < (InterruptPairTimer[0]/2)){
 ce4:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <InterruptPairTimer>
 ce8:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <InterruptPairTimer+0x1>
 cec:	36 95       	lsr	r19
 cee:	27 95       	ror	r18
 cf0:	82 17       	cp	r24, r18
 cf2:	93 07       	cpc	r25, r19
 cf4:	30 f4       	brcc	.+12     	; 0xd02 <__vector_7+0xa6>
			InterruptPairDirection[0] = 1;
 cf6:	81 e0       	ldi	r24, 0x01	; 1
 cf8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <InterruptPairDirection>
			Direction[0] = 0;
 cfc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Direction>
 d00:	05 c0       	rjmp	.+10     	; 0xd0c <__vector_7+0xb0>
		}
		else{
			InterruptPairDirection[0] = 0;
 d02:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <InterruptPairDirection>
			Direction[0] = 1;
 d06:	81 e0       	ldi	r24, 0x01	; 1
 d08:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Direction>
		}
	}
}
 d0c:	ff 91       	pop	r31
 d0e:	ef 91       	pop	r30
 d10:	df 91       	pop	r29
 d12:	cf 91       	pop	r28
 d14:	bf 91       	pop	r27
 d16:	af 91       	pop	r26
 d18:	9f 91       	pop	r25
 d1a:	8f 91       	pop	r24
 d1c:	7f 91       	pop	r23
 d1e:	6f 91       	pop	r22
 d20:	5f 91       	pop	r21
 d22:	3f 91       	pop	r19
 d24:	2f 91       	pop	r18
 d26:	0f 90       	pop	r0
 d28:	0b be       	out	0x3b, r0	; 59
 d2a:	0f 90       	pop	r0
 d2c:	0f be       	out	0x3f, r0	; 63
 d2e:	0f 90       	pop	r0
 d30:	1f 90       	pop	r1
 d32:	18 95       	reti

00000d34 <__vector_8>:

ISR(INT7_vect){
 d34:	1f 92       	push	r1
 d36:	0f 92       	push	r0
 d38:	0f b6       	in	r0, 0x3f	; 63
 d3a:	0f 92       	push	r0
 d3c:	11 24       	eor	r1, r1
 d3e:	0b b6       	in	r0, 0x3b	; 59
 d40:	0f 92       	push	r0
 d42:	2f 93       	push	r18
 d44:	3f 93       	push	r19
 d46:	5f 93       	push	r21
 d48:	6f 93       	push	r22
 d4a:	7f 93       	push	r23
 d4c:	8f 93       	push	r24
 d4e:	9f 93       	push	r25
 d50:	af 93       	push	r26
 d52:	bf 93       	push	r27
 d54:	cf 93       	push	r28
 d56:	df 93       	push	r29
 d58:	ef 93       	push	r30
 d5a:	ff 93       	push	r31
	if (InterruptPairDirection[0]){
 d5c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <InterruptPairDirection>
 d60:	88 23       	and	r24, r24
 d62:	11 f1       	breq	.+68     	; 0xda8 <__vector_8+0x74>
		
		InterruptPairTimer[0] = TCNT1L;
 d64:	a4 e8       	ldi	r26, 0x84	; 132
 d66:	b0 e0       	ldi	r27, 0x00	; 0
 d68:	8c 91       	ld	r24, X
 d6a:	90 e0       	ldi	r25, 0x00	; 0
 d6c:	e4 e1       	ldi	r30, 0x14	; 20
 d6e:	f1 e0       	ldi	r31, 0x01	; 1
 d70:	91 83       	std	Z+1, r25	; 0x01
 d72:	80 83       	st	Z, r24
		InterruptPairTimer[0] += (TCNT1H << 8);
 d74:	c5 e8       	ldi	r28, 0x85	; 133
 d76:	d0 e0       	ldi	r29, 0x00	; 0
 d78:	28 81       	ld	r18, Y
 d7a:	30 e0       	ldi	r19, 0x00	; 0
 d7c:	32 2f       	mov	r19, r18
 d7e:	22 27       	eor	r18, r18
 d80:	82 0f       	add	r24, r18
 d82:	93 1f       	adc	r25, r19
 d84:	91 83       	std	Z+1, r25	; 0x01
 d86:	80 83       	st	Z, r24
		
		TCNT1H = 0x00;
 d88:	18 82       	st	Y, r1
		TCNT1L = 0x00;
 d8a:	1c 92       	st	X, r1
		
		PulsePerSec[0] = 15625 / InterruptPairTimer[0];
 d8c:	60 81       	ld	r22, Z
 d8e:	71 81       	ldd	r23, Z+1	; 0x01
 d90:	89 e0       	ldi	r24, 0x09	; 9
 d92:	9d e3       	ldi	r25, 0x3D	; 61
 d94:	84 d0       	rcall	.+264    	; 0xe9e <__udivmodhi4>
 d96:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <PulsePerSec+0x1>
 d9a:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <PulsePerSec>
		Direction[0] = 0;
 d9e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Direction>
		
		InterruptPairDirection[0] = 0;
 da2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <InterruptPairDirection>
 da6:	1c c0       	rjmp	.+56     	; 0xde0 <__vector_8+0xac>
	}
	else{
		uint16_t InterruptPairTimerTemp;
		
		InterruptPairTimerTemp = TCNT1L;
 da8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
		InterruptPairTimerTemp += (TCNT1H << 8);
 dac:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 db0:	90 e0       	ldi	r25, 0x00	; 0
 db2:	98 2f       	mov	r25, r24
 db4:	88 27       	eor	r24, r24
 db6:	82 0f       	add	r24, r18
 db8:	91 1d       	adc	r25, r1
		
		if(InterruptPairTimerTemp < (InterruptPairTimer[0]/2)){
 dba:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <InterruptPairTimer>
 dbe:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <InterruptPairTimer+0x1>
 dc2:	36 95       	lsr	r19
 dc4:	27 95       	ror	r18
 dc6:	82 17       	cp	r24, r18
 dc8:	93 07       	cpc	r25, r19
 dca:	30 f4       	brcc	.+12     	; 0xdd8 <__vector_8+0xa4>
			InterruptPairDirection[0] = 1;
 dcc:	81 e0       	ldi	r24, 0x01	; 1
 dce:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <InterruptPairDirection>
			Direction[0] = 1;
 dd2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Direction>
 dd6:	04 c0       	rjmp	.+8      	; 0xde0 <__vector_8+0xac>
		}
		else{
			InterruptPairDirection[0] = 0;
 dd8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <InterruptPairDirection>
			Direction[0] = 0;
 ddc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Direction>
		}
	}
}
 de0:	ff 91       	pop	r31
 de2:	ef 91       	pop	r30
 de4:	df 91       	pop	r29
 de6:	cf 91       	pop	r28
 de8:	bf 91       	pop	r27
 dea:	af 91       	pop	r26
 dec:	9f 91       	pop	r25
 dee:	8f 91       	pop	r24
 df0:	7f 91       	pop	r23
 df2:	6f 91       	pop	r22
 df4:	5f 91       	pop	r21
 df6:	3f 91       	pop	r19
 df8:	2f 91       	pop	r18
 dfa:	0f 90       	pop	r0
 dfc:	0b be       	out	0x3b, r0	; 59
 dfe:	0f 90       	pop	r0
 e00:	0f be       	out	0x3f, r0	; 63
 e02:	0f 90       	pop	r0
 e04:	1f 90       	pop	r1
 e06:	18 95       	reti

00000e08 <__vector_15>:


ISR(TIMER1_OVF_vect)
{
 e08:	1f 92       	push	r1
 e0a:	0f 92       	push	r0
 e0c:	0f b6       	in	r0, 0x3f	; 63
 e0e:	0f 92       	push	r0
 e10:	11 24       	eor	r1, r1
 e12:	0b b6       	in	r0, 0x3b	; 59
 e14:	0f 92       	push	r0
 e16:	8f 93       	push	r24
 e18:	ef 93       	push	r30
 e1a:	ff 93       	push	r31
	PulsePerSec[0] = 0;
 e1c:	ec e0       	ldi	r30, 0x0C	; 12
 e1e:	f1 e0       	ldi	r31, 0x01	; 1
 e20:	11 82       	std	Z+1, r1	; 0x01
 e22:	10 82       	st	Z, r1
	PulsePerSec[3] = 0;
 e24:	17 82       	std	Z+7, r1	; 0x07
 e26:	16 82       	std	Z+6, r1	; 0x06
	
	Direction[0] = 1;
 e28:	81 e0       	ldi	r24, 0x01	; 1
 e2a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Direction>
}
 e2e:	ff 91       	pop	r31
 e30:	ef 91       	pop	r30
 e32:	8f 91       	pop	r24
 e34:	0f 90       	pop	r0
 e36:	0b be       	out	0x3b, r0	; 59
 e38:	0f 90       	pop	r0
 e3a:	0f be       	out	0x3f, r0	; 63
 e3c:	0f 90       	pop	r0
 e3e:	1f 90       	pop	r1
 e40:	18 95       	reti

00000e42 <__vector_31>:


ISR(TIMER3_OVF_vect)
{
 e42:	1f 92       	push	r1
 e44:	0f 92       	push	r0
 e46:	0f b6       	in	r0, 0x3f	; 63
 e48:	0f 92       	push	r0
 e4a:	11 24       	eor	r1, r1
 e4c:	0b b6       	in	r0, 0x3b	; 59
 e4e:	0f 92       	push	r0
 e50:	8f 93       	push	r24
 e52:	ef 93       	push	r30
 e54:	ff 93       	push	r31
	PulsePerSec[1] = 0;
 e56:	ec e0       	ldi	r30, 0x0C	; 12
 e58:	f1 e0       	ldi	r31, 0x01	; 1
 e5a:	13 82       	std	Z+3, r1	; 0x03
 e5c:	12 82       	std	Z+2, r1	; 0x02
	PulsePerSec[2] = 0;
 e5e:	15 82       	std	Z+5, r1	; 0x05
 e60:	14 82       	std	Z+4, r1	; 0x04
	
	Direction[1] = 1;
 e62:	81 e0       	ldi	r24, 0x01	; 1
 e64:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Direction+0x1>
}
 e68:	ff 91       	pop	r31
 e6a:	ef 91       	pop	r30
 e6c:	8f 91       	pop	r24
 e6e:	0f 90       	pop	r0
 e70:	0b be       	out	0x3b, r0	; 59
 e72:	0f 90       	pop	r0
 e74:	0f be       	out	0x3f, r0	; 63
 e76:	0f 90       	pop	r0
 e78:	1f 90       	pop	r1
 e7a:	18 95       	reti

00000e7c <chip_init>:


//***** chip Initialization **********************************
void chip_init(void){

	CLKPR = ( 1 << CLKPCE );  		// Set Clock Prescaler change enable
 e7c:	e1 e6       	ldi	r30, 0x61	; 97
 e7e:	f0 e0       	ldi	r31, 0x00	; 0
 e80:	80 e8       	ldi	r24, 0x80	; 128
 e82:	80 83       	st	Z, r24
	CLKPR = 0x00;				// no prescaler CLK 16Mhz
 e84:	10 82       	st	Z, r1
 e86:	08 95       	ret

00000e88 <main>:
void chip_init (void);

//***** MAIN CODE ***********************************************
int main( void )
{
	chip_init();			// Chip initialization
 e88:	f9 df       	rcall	.-14     	; 0xe7c <chip_init>
	can_init(BAUD); 		// Can initialization
 e8a:	84 ef       	ldi	r24, 0xF4	; 244
 e8c:	91 e0       	ldi	r25, 0x01	; 1
 e8e:	63 d9       	rcall	.-3386   	; 0x156 <can_init>
	can_rx(FUNCTION);
 e90:	82 e0       	ldi	r24, 0x02	; 2
 e92:	92 e0       	ldi	r25, 0x02	; 2
 e94:	bc d9       	rcall	.-3208   	; 0x20e <can_rx>
	int_ADC();				// ADC initialization
 e96:	1c d9       	rcall	.-3528   	; 0xd0 <int_ADC>
	int_ExternalInterrupt();
 e98:	6e dd       	rcall	.-1316   	; 0x976 <int_ExternalInterrupt>
	
	sei();					// enables interrupts
 e9a:	78 94       	sei
	
		while(1){}
 e9c:	ff cf       	rjmp	.-2      	; 0xe9c <main+0x14>

00000e9e <__udivmodhi4>:
 e9e:	aa 1b       	sub	r26, r26
 ea0:	bb 1b       	sub	r27, r27
 ea2:	51 e1       	ldi	r21, 0x11	; 17
 ea4:	07 c0       	rjmp	.+14     	; 0xeb4 <__udivmodhi4_ep>

00000ea6 <__udivmodhi4_loop>:
 ea6:	aa 1f       	adc	r26, r26
 ea8:	bb 1f       	adc	r27, r27
 eaa:	a6 17       	cp	r26, r22
 eac:	b7 07       	cpc	r27, r23
 eae:	10 f0       	brcs	.+4      	; 0xeb4 <__udivmodhi4_ep>
 eb0:	a6 1b       	sub	r26, r22
 eb2:	b7 0b       	sbc	r27, r23

00000eb4 <__udivmodhi4_ep>:
 eb4:	88 1f       	adc	r24, r24
 eb6:	99 1f       	adc	r25, r25
 eb8:	5a 95       	dec	r21
 eba:	a9 f7       	brne	.-22     	; 0xea6 <__udivmodhi4_loop>
 ebc:	80 95       	com	r24
 ebe:	90 95       	com	r25
 ec0:	bc 01       	movw	r22, r24
 ec2:	cd 01       	movw	r24, r26
 ec4:	08 95       	ret

00000ec6 <_exit>:
 ec6:	f8 94       	cli

00000ec8 <__stop_program>:
 ec8:	ff cf       	rjmp	.-2      	; 0xec8 <__stop_program>
