/*************************************************************************
Title:    Main Control Unit for HU-2
Author:   Jeroen Mostert, LCD Library by peterfleury
File:     main.c
Software: AVR-GCC 4.x
Hardware: Main Control Unit V1.1
**************************************************************************/

#include <stdlib.h>
#include <avr/io.h>
#include <avr/pgmspace.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include "lcd.h"

#define GAS1MIN 100
#define GAS1MAX 800
#define GAS2MIN 100
#define GAS2MAX	800
#define BRAKEMIND	100	
#define BRAKEMAXD	800

#define DELTAGASVALUE 100
#define DELTABRAKEVALUE 30

volatile int lcd_status = 0, refresh_rate = 0, adc_fast = 0, adc_slow = 0, error = 0, warning = 0, calibrating = 0, failedcalibration = 0;	
volatile int gassensor1min = 0, gassensor1max = 0, gassensor2min = 0, gassensor2max = 0, brakemin = 0, brakemax = 0, gasdelta1 = 0, gasdelta2 = 0, brakedelta = 0, gasoffset = 0, gasoffset2 = 0;
volatile int gasrange1 = 0 , gasrange2 = 0, gaspedalcounter = 0;
volatile float percentgas1 = 0, percentgas2 = 0;
volatile char Linebuffer0[21], Linebuffer1[21], Linebuffer2[21], Linebuffer3[21];
volatile uint16_t gas1 = 0, gas2 = 0, brake = 0, steer = 0, TEMPL = 0, TEMPR = 0, ADCP6 = 0, ADCP7 = 0;


ISR(ADC_vect)							// ADC Conversion done Interrupt
{
// Small Explanation in Dropdown box
/*
ADC0-3 will be read every 10ms				100 times/second
ADC4-7 will be read every once every 40ms	 25 times/second

Timing Loop:
 2ms:	Gas1
 4ms:	Gas2
 6ms:	Brake
 8ms:	Steer
10ms:	ADC 4,5,6 or 7

ADC 4,5,6 and 7 will be switched and read in the fifth ADC Cycle(10ms). 
*/
	if(adc_fast == 0){
		gas1 = ADC;									// Place 10-bit ADC Value in gas1
		ADMUX++;									// Set ADMUX to ADC1
	}
	if(adc_fast == 1){
		if(calibrating >= 9){
			gas2 = 1023 - ADC - gasoffset - gasoffset2;
		}
		else{
			gas2 = ADC;									// Place 10-bit ADC Value in gas2
			ADMUX++;									// Set ADMUX to ADC2
		}
	}
	if(adc_fast == 2){
		brake = ADC;								// Place 10-bit ADC Value in brake
		ADMUX++;									// Set ADMUX to ADC3
	}	
	if(adc_fast == 3){
		steer = ADC;								// Place 10-bit ADC Value in steer
		if(adc_slow == 0){
			ADMUX++;								// Set ADMUX to ADC4
		}
		if(adc_slow == 1){
			ADMUX += 2;								// Set ADMUX to ADC5
		}
		if(adc_slow == 2){
			ADMUX += 3;								// Set ADMUX to ADC6
		}
		if(adc_slow == 3){
			ADMUX += 4;								// Set ADMUX to ADC7
		}
	}	
	if(adc_fast == 4){
		if(calibrating >= 9){
			checkgaspedals();
			checkgasbreakpedals();
			checkbrakepedal();
		}
		
		if(adc_slow == 0){
			TEMPL = ADC;							// Place 10-bit ADC Value in TEMPL
		}
		if(adc_slow == 1){
			TEMPR = ADC;							// Place 10-bit ADC Value in TEMPR
		}
		if(adc_slow == 2){
			ADCP6 = ADC;							// Place 10-bit ADC Value in ADCP6
		}
		if(adc_slow == 3){
			ADCP7 = ADC;							// Place 10-bit ADC Value in ADCP7
		}
		
		if ((adc_slow >= 0) && (adc_slow <= 2)){	// Check if adc_slow can be raised
			adc_slow++;								// Raise adc_slow by 1
		}
		else adc_slow = 0;							// Reset adc_slow
		
		ADMUX = 0b010000000;						// Set ADMUX to ADC0
	}
	
	if ((adc_fast >= 0) && (adc_fast <= 3)){		// Check if adc_fast can be raised
		adc_fast++;									// Raise adc_fast by 1
	}
	else adc_fast = 0;								// Reset adc_fast
}

ISR(INT5_vect)							// Switch External Interrupt
{
	_delay_ms(8);						// Delay for key debounce
	if (PINE & (1<<PE5)){
		if(calibrating < 10){
			
			if((calibrating == 7) && (failedcalibration == 1)){
				calibrating++;
			}
			else{
				if((failedcalibration == 1) && (calibrating == 8)){
				}
				else if((calibrating == 8) && (failedcalibration == 0)){
					calibrating++;
				}
				else{
					getcalibrationvalues();
					calibrating++;
				}
			}
		}
		if(calibrating > 9){
			lcd_fast_refresh();	
			if (lcd_status == 2){		
 				lcd_status = 0;		// Reset lcd status
			}
			else lcd_status++;	
		}
	}
}

ISR(TIMER2_OVF_vect)					// Timer 2 Overflow Interrupt(4Hz)
{
		TCNT2 = 192;					// Set initial counter value(0.25 Seconds)
		
		if(refresh_rate == 2){
		}
		
		if(refresh_rate <= 3){			// Every 0.25 seconds only Speed Refresh 
			refresh_rate ++;
//			lcd_fast_refresh();
		}
		else {
			refresh_rate = 0;
//			lcd_fast_refresh();			
		}
		lcd_fast_refresh();
}

ISR(TIMER0_OVF_vect)					// Timer 0 Overflow Interrupt(500Hz)
{
	TCNT0 = 130;						// Set initial counter value(2ms)
	ADCSRA |= (1 << ADSC);				// Start ADC Conversion
}




void getcalibrationvalues(void)			// Put ADC values in Xmin and Xmax
{
	if(calibrating == 1){
		gassensor1min = gas1;
	}
	if(calibrating == 2){
		gassensor1max = gas1; 
	}
	if(calibrating == 3){
		gassensor2min = gas2;
	}
	if(calibrating == 4){
		gassensor2max = gas2;
	}
	if(calibrating == 5){
		brakemin = brake;
	}
	if(calibrating == 6){
		brakemax = brake;
	}
	checkcalibrationvalues();			
}

void checkcalibrationvalues(void)		// Check values if there out of DEFINE, the same value, mix max has been switched, and delta is big enough(DEFINE)
{		
										// Check if values are out of (DEFINE)
	if((gassensor1min > GAS1MAX) || (gassensor1min < GAS1MIN)){		
		gassensor1min = 0;
	}
	if((gassensor1max > GAS1MAX) || (gassensor1max < GAS1MIN)){
		gassensor1max = 0;
	}
	if((gassensor2min > GAS2MAX) || (gassensor2min < GAS2MIN)){
		gassensor2min = 0;
	}
	if((gassensor2max > GAS2MAX) || (gassensor2max < GAS2MIN)){
		gassensor2max = 0;
	}
	if((brakemin > BRAKEMAXD) || (brakemin < BRAKEMIND)){
		brakemin = 0;
	}
	if((brakemax > BRAKEMAXD) || (brakemax < BRAKEMIND)){
		brakemax = 0;
	}
										// Check if any min or max value equals zero when all calibration values are read
	if((gassensor1min == 0 || gassensor1max == 0 || gassensor2min == 0 || gassensor2max == 0 || brakemin == 0 || brakemax == 0) && (calibrating == 6)){
		failedcalibration = 1;
	}
										// When min and max values are read, check if they are the same and if there delta is high enough
	if(calibrating == 2){
		gasdelta1 =  gassensor1max - gassensor1min;
		if ((gasdelta1 < DELTAGASVALUE) || (gasdelta1 < 0)){
			failedcalibration = 1;
		}
	}
	if(calibrating == 4){
		gasdelta2 =  gassensor2max - gassensor2min;
		if ((gasdelta2 < DELTAGASVALUE) || (gasdelta2 < 0)){
			failedcalibration = 1;
		}
	}
	if(calibrating == 6){
		getgasvalue();
		gaspercentcheck();
		brakedelta =  brakemax - brakemin;
		if ((brakedelta < DELTABRAKEVALUE) || (brakedelta < 0)){
			failedcalibration = 1;
		}
	}
}


void checkgaspedals(void)
{
	int gasdelta;
	float gaspercent;
	gasdelta = abs(gas1 - gas2);
	gaspercent = gasdelta/ gas1;
	if(gaspercent > 0.1){
		gaspedalcounter++;
	}
	if(gaspercent < 0.1){
		gaspedalcounter = 0;
	}
	if(gaspedalcounter == 10){
	//dikke errors alles
	}
}

void checkgasbreakpedals(void)
{
	
}
void checkbrakepedal(void)
{
	
}



void lcd_fast_refresh(void)				// LCD Fast Refresh
{
	snprintf (Linebuffer3, sizeof Linebuffer3,"                    "); // even snel ertussen gemieterd omdat start calibration niet weg wou gaan
	
	lcd_clrscr();
	
	checkstatus();
	
	lcd_gotoxy(0 ,0);					// Set display to Line 0, Character 0
	lcd_puts(Linebuffer0);
	
	lcd_gotoxy(40 ,0);					// Set display to Line 1, Character 0
	lcd_puts(Linebuffer1);
	
	lcd_gotoxy(20 ,0);					// Set display to Line 2, Character 0
	lcd_puts(Linebuffer2);

	lcd_gotoxy(20 ,1);					// Set display to Line 3, Character 0
	lcd_puts(Linebuffer3);
}

void checkstatus(void)					// Check with screen has to be put on the LCD
{
	if(calibrating == 0){
		lcd_start_calibration();
	}
	if(calibrating == 1){
		lcd_no_throttle_screen();
		lcd_gas_sensor1();
	}
	if(calibrating == 2){
		lcd_max_throttle_screen();
		lcd_gas_sensor1();
	}
	if(calibrating == 3){
		lcd_no_throttle_screen();
		lcd_gas_sensor2();
	}
	if(calibrating == 4){
		lcd_max_throttle_screen();
		lcd_gas_sensor2();
	}
	if(calibrating == 5){
		lcd_no_brake_screen();
		lcd_brakesensor_screen();
	}
	if(calibrating == 6){
		lcd_max_brake_screen();
		lcd_brakesensor_screen();
	}
	if((calibrating == 7) && (failedcalibration == 0)){		// If calibration was succesfull
		succeeded_calibrationscreen();
	}
	if((calibrating == 7) && (failedcalibration == 1)){		// If calibration failed
		failed_calibrationscreen();
	}
	if(calibrating == 8){
		lcd_calibration_done_screen();
	}
	if(calibrating >= 9){									// When calibration succeeded, go to race screens
		lcd_cont_screen();
		
		if (lcd_status == 0){
			lcd_motor_screen();
		}
		if (lcd_status == 1){
			lcd_water_screen();
		}
		if (lcd_status == 2){
			lcd_batteries_screen();
		}
	}
}



void lcd_welcome_screen(void)				// Welcome Screen
{
	snprintf (Linebuffer0, sizeof Linebuffer0,"        Hello       ");
	snprintf (Linebuffer1, sizeof Linebuffer1,"    I am the HU-2   ");
}


void succeeded_calibrationscreen(void)		// Calibration successful screen
{
	snprintf (Linebuffer1, sizeof Linebuffer1,"    Calibration  ");
	snprintf (Linebuffer2, sizeof Linebuffer2,"     Succeeded   ");
	snprintf (Linebuffer0, sizeof Linebuffer0,"                    "); // even snel ertussen gemieterd omdat min max niet weg wou gaan
}
	
void lcd_start_calibration(void)			// Start calibration(flash)
{
	snprintf (Linebuffer3, sizeof Linebuffer3," Start Calibration  ");
}

void failed_calibrationscreen(void)			// Failed Calibration screen
{
	snprintf (Linebuffer1, sizeof Linebuffer1,"    Calibration  ");
	snprintf (Linebuffer2, sizeof Linebuffer2,"      Failed ");
	snprintf (Linebuffer0, sizeof Linebuffer0,"                    "); // even snel ertussen gemieterd omdat min max niet weg wou gaan
}

void lcd_gas_sensor1(void)					// Gas Sensor 1 screen
{
	snprintf (Linebuffer1, sizeof Linebuffer1,"Sensor 1 Value:%d   ",gas1);
}

void lcd_gas_sensor2(void)					// Gas Sensor 2 screen
{
	snprintf (Linebuffer1, sizeof Linebuffer1,"Sensor 2 Value:%d   ",gas2);
}

void lcd_max_throttle_screen(void)			// Full Throttle screen
{
	snprintf (Linebuffer0, sizeof Linebuffer0,"   Max Throttle ");
}

void lcd_no_throttle_screen(void)			// No Throttle screen
{
	snprintf (Linebuffer0, sizeof Linebuffer0,"   No Throttle   ");
}

void lcd_brakesensor_screen(void)			// Brake sensor screen
{
	snprintf (Linebuffer1, sizeof Linebuffer1,"Sensor Value:%d   ",brake);
}

void lcd_no_brake_screen(void)				// No Brake Screen
{
	snprintf (Linebuffer0, sizeof Linebuffer0,"     No Brake");
}

void lcd_max_brake_screen(void)				// Full Brake Screen
{
	snprintf (Linebuffer0, sizeof Linebuffer0,"     Max Brake");
}

void lcd_calibration_done_screen(void)		// Show all Calibration values(Values equal to 0 are out of scope -> check define values)
{
	snprintf (Linebuffer0, sizeof Linebuffer0,"      Min Delta  Max");
	snprintf (Linebuffer1, sizeof Linebuffer1,"Gas1: %.3d %.3d  %.4d", gassensor1min, gasdelta1 ,gassensor1max);
	snprintf (Linebuffer2, sizeof Linebuffer2,"Gas2: %.3d %.3d  %.4d", gassensor2min, gasdelta2, gassensor2max);
	snprintf (Linebuffer3, sizeof Linebuffer3,"Brake:%.3d %.3d  %.4d", brakemin, brakedelta, brakemax);
}



void lcd_motor_screen(void)				// LCD Motor Control Screen
{
	snprintf (Linebuffer1, sizeof Linebuffer1,"     C MOTOR       C");
	snprintf (Linebuffer2, sizeof Linebuffer2,"     C CONTR       C");
}

void lcd_water_screen(void)				// LCD Watercooling Screen
{
	snprintf (Linebuffer1, sizeof Linebuffer1,"%d   C  WATER %d   C", TEMPL, TEMPR);
	snprintf (Linebuffer2, sizeof Linebuffer2,"    L/m FLOW     L/m");
}

void lcd_batteries_screen(void)			// LCD Batteries Screen
{
		snprintf (Linebuffer1, sizeof Linebuffer1,"     Battery        ");
		snprintf (Linebuffer2, sizeof Linebuffer2,"     Screen         ");
}

void lcd_blue_screen(void)				// LCD Press Blue Button Screen
{
	snprintf (Linebuffer0, sizeof Linebuffer0," Press Blue Button  ");
}

void lcd_green_screen(void)				// LCD Press Blue Button Screen
{
	snprintf (Linebuffer0, sizeof Linebuffer0," Press Green Button ");
}

void lcd_cont_screen(void)				// LCD Race Screen/Home Screen
{
	snprintf (Linebuffer0, sizeof Linebuffer0,"  Speed:      KM/H  ");
	
	snprintf (Linebuffer3, sizeof Linebuffer3,"H:   V/    A L:    V");
}



void initMCU(void)						// Initialize the whole Micro Controller Unit
{
	init_ADC();
	init_TIMER0();
	init_TIMER2();				
	lcd_init(LCD_DISP_ON);		// Initialize display, cursor off
	
	lcd_welcome_screen();
	lcd_fast_refresh();
}

void init_TIMER2(void)					//   4Hz Clock Initialization (Timer Counter 2)
{
		ASSR  = (1<< AS2);						// Enable asynchronous mode
		TCNT2 = 192;							// Set initial counter value(0.25 Seconds)
		TCCR2A |= (1 << CS02)|(1 << CS00);		// 128 Prescaler ((255*128)/32.786 = 1Hz)
		TIFR2   = (1 << TOV2);					// Clear interrupt flags
		TIMSK2  = (1 << TOIE2);					// Enable TOV2 interrupt
}

void init_ADC(void)						// ADC Initialization
{
		ADCSRA |= (1 << ADEN);									// Enable ADC
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);	// 128 PreScaler
		ADMUX |= ( 0 << REFS1) | (1 << REFS0);					// Set 5V Ref Voltage on AVcc
		ADCSRA |= (1 << ADIE);									// Enable ADC Interrupt
}

void init_TIMER0(void)					// 500Hz Clock Initialization (Timer Counter 0)		
{
		TCCR0A |= (1 << CS02);					// 256 Prescaler
		TCNT0 = 130;							// Set initial counter value(2ms)
		TIMSK0 |= (1 << TOIE0);					// Overflow Interrupt Enable
}

int main()
{
		initMCU();					// Initialize the whole Micro Controller Unit

	    DDRE &=~ (1 << PE5);        // Pin PE5 input              
	    PORTE |= (1 << PE5);        // Pin PE5 pull-up enabled    
		
		DDRF = 0x00;				// PortF All Inputs
		PORTF = 0x00;				// PortF Pullup Disabled

		EIMSK |= (1 << INT5);					// Enable Interrupt 5
		EICRB  |= (0 << ISC51) | (0 << ISC50);	// Falling edge creates interrupt
	
		sei();						// Enable Global Interrupts
		
		while(1){
			
		}
		
}
