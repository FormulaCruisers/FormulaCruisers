
MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000242  00800100  00001634  000016c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001634  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000087  00800342  00800342  0000190a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000190a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001968  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000249f  00000000  00000000  00001b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011dc  00000000  00000000  00004007  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000115f  00000000  00000000  000051e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005bc  00000000  00000000  00006344  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000992  00000000  00000000  00006900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018db  00000000  00000000  00007292  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00008b6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a5 c0       	rjmp	.+330    	; 0x14c <__ctors_end>
       2:	00 00       	nop
       4:	c1 c0       	rjmp	.+386    	; 0x188 <__bad_interrupt>
       6:	00 00       	nop
       8:	bf c0       	rjmp	.+382    	; 0x188 <__bad_interrupt>
       a:	00 00       	nop
       c:	bd c0       	rjmp	.+378    	; 0x188 <__bad_interrupt>
       e:	00 00       	nop
      10:	bb c0       	rjmp	.+374    	; 0x188 <__bad_interrupt>
      12:	00 00       	nop
      14:	b9 c0       	rjmp	.+370    	; 0x188 <__bad_interrupt>
      16:	00 00       	nop
      18:	b7 c0       	rjmp	.+366    	; 0x188 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b5 c0       	rjmp	.+362    	; 0x188 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b3 c0       	rjmp	.+358    	; 0x188 <__bad_interrupt>
      22:	00 00       	nop
      24:	b1 c0       	rjmp	.+354    	; 0x188 <__bad_interrupt>
      26:	00 00       	nop
      28:	77 c4       	rjmp	.+2286   	; 0x918 <__vector_10>
      2a:	00 00       	nop
      2c:	ad c0       	rjmp	.+346    	; 0x188 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ab c0       	rjmp	.+342    	; 0x188 <__bad_interrupt>
      32:	00 00       	nop
      34:	a9 c0       	rjmp	.+338    	; 0x188 <__bad_interrupt>
      36:	00 00       	nop
      38:	a7 c0       	rjmp	.+334    	; 0x188 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a5 c0       	rjmp	.+330    	; 0x188 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a3 c0       	rjmp	.+326    	; 0x188 <__bad_interrupt>
      42:	00 00       	nop
      44:	a1 c4       	rjmp	.+2370   	; 0x988 <__vector_17>
      46:	00 00       	nop
      48:	61 c1       	rjmp	.+706    	; 0x30c <__vector_18>
      4a:	00 00       	nop
      4c:	9d c0       	rjmp	.+314    	; 0x188 <__bad_interrupt>
      4e:	00 00       	nop
      50:	9b c0       	rjmp	.+310    	; 0x188 <__bad_interrupt>
      52:	00 00       	nop
      54:	99 c0       	rjmp	.+306    	; 0x188 <__bad_interrupt>
      56:	00 00       	nop
      58:	97 c0       	rjmp	.+302    	; 0x188 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	95 c0       	rjmp	.+298    	; 0x188 <__bad_interrupt>
      5e:	00 00       	nop
      60:	93 c0       	rjmp	.+294    	; 0x188 <__bad_interrupt>
      62:	00 00       	nop
      64:	91 c0       	rjmp	.+290    	; 0x188 <__bad_interrupt>
      66:	00 00       	nop
      68:	8f c0       	rjmp	.+286    	; 0x188 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8d c0       	rjmp	.+282    	; 0x188 <__bad_interrupt>
      6e:	00 00       	nop
      70:	8b c0       	rjmp	.+278    	; 0x188 <__bad_interrupt>
      72:	00 00       	nop
      74:	89 c0       	rjmp	.+274    	; 0x188 <__bad_interrupt>
      76:	00 00       	nop
      78:	87 c0       	rjmp	.+270    	; 0x188 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	85 c0       	rjmp	.+266    	; 0x188 <__bad_interrupt>
      7e:	00 00       	nop
      80:	83 c0       	rjmp	.+262    	; 0x188 <__bad_interrupt>
      82:	00 00       	nop
      84:	81 c0       	rjmp	.+258    	; 0x188 <__bad_interrupt>
      86:	00 00       	nop
      88:	7f c0       	rjmp	.+254    	; 0x188 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7d c0       	rjmp	.+250    	; 0x188 <__bad_interrupt>
      8e:	00 00       	nop
      90:	7b c0       	rjmp	.+246    	; 0x188 <__bad_interrupt>
      92:	00 00       	nop
      94:	e6 02       	muls	r30, r22
      96:	ca 02       	muls	r28, r26
      98:	d8 02       	muls	r29, r24
      9a:	0f 03       	fmul	r16, r23
      9c:	0f 03       	fmul	r16, r23
      9e:	0f 03       	fmul	r16, r23
      a0:	0f 03       	fmul	r16, r23
      a2:	0f 03       	fmul	r16, r23
      a4:	0f 03       	fmul	r16, r23
      a6:	0f 03       	fmul	r16, r23
      a8:	0f 03       	fmul	r16, r23
      aa:	0f 03       	fmul	r16, r23
      ac:	0f 03       	fmul	r16, r23
      ae:	0f 03       	fmul	r16, r23
      b0:	0f 03       	fmul	r16, r23
      b2:	0f 03       	fmul	r16, r23
      b4:	d5 01       	movw	r26, r10
      b6:	30 02       	muls	r19, r16
      b8:	7d 02       	muls	r23, r29
      ba:	0f 03       	fmul	r16, r23
      bc:	0f 03       	fmul	r16, r23
      be:	0f 03       	fmul	r16, r23
      c0:	0f 03       	fmul	r16, r23
      c2:	0f 03       	fmul	r16, r23
      c4:	0f 03       	fmul	r16, r23
      c6:	0f 03       	fmul	r16, r23
      c8:	0f 03       	fmul	r16, r23
      ca:	0f 03       	fmul	r16, r23
      cc:	0f 03       	fmul	r16, r23
      ce:	0f 03       	fmul	r16, r23
      d0:	0f 03       	fmul	r16, r23
      d2:	0f 03       	fmul	r16, r23
      d4:	f4 02       	muls	r31, r20
      d6:	0f 03       	fmul	r16, r23
      d8:	0f 03       	fmul	r16, r23
      da:	0f 03       	fmul	r16, r23
      dc:	0f 03       	fmul	r16, r23
      de:	0f 03       	fmul	r16, r23
      e0:	0f 03       	fmul	r16, r23
      e2:	0f 03       	fmul	r16, r23
      e4:	0f 03       	fmul	r16, r23
      e6:	0f 03       	fmul	r16, r23
      e8:	0f 03       	fmul	r16, r23
      ea:	0f 03       	fmul	r16, r23
      ec:	0f 03       	fmul	r16, r23
      ee:	0f 03       	fmul	r16, r23
      f0:	0f 03       	fmul	r16, r23
      f2:	0f 03       	fmul	r16, r23
      f4:	02 03       	mulsu	r16, r18
      f6:	0f 03       	fmul	r16, r23
      f8:	0f 03       	fmul	r16, r23
      fa:	0f 03       	fmul	r16, r23
      fc:	0f 03       	fmul	r16, r23
      fe:	0f 03       	fmul	r16, r23
     100:	0f 03       	fmul	r16, r23
     102:	0f 03       	fmul	r16, r23
     104:	0f 03       	fmul	r16, r23
     106:	0f 03       	fmul	r16, r23
     108:	0f 03       	fmul	r16, r23
     10a:	0f 03       	fmul	r16, r23
     10c:	0f 03       	fmul	r16, r23
     10e:	0f 03       	fmul	r16, r23
     110:	0f 03       	fmul	r16, r23
     112:	0f 03       	fmul	r16, r23
     114:	0f 03       	fmul	r16, r23
     116:	0f 03       	fmul	r16, r23
     118:	0f 03       	fmul	r16, r23
     11a:	0f 03       	fmul	r16, r23
     11c:	0f 03       	fmul	r16, r23
     11e:	0f 03       	fmul	r16, r23
     120:	0f 03       	fmul	r16, r23
     122:	0f 03       	fmul	r16, r23
     124:	0f 03       	fmul	r16, r23
     126:	0f 03       	fmul	r16, r23
     128:	0f 03       	fmul	r16, r23
     12a:	0f 03       	fmul	r16, r23
     12c:	0f 03       	fmul	r16, r23
     12e:	0f 03       	fmul	r16, r23
     130:	0f 03       	fmul	r16, r23
     132:	0f 03       	fmul	r16, r23
     134:	c1 02       	muls	r28, r17
     136:	5a 03       	fmul	r21, r18
     138:	39 03       	fmul	r19, r17
     13a:	3c 03       	fmul	r19, r20
     13c:	3f 03       	fmul	r19, r23
     13e:	42 03       	mulsu	r20, r18
     140:	45 03       	mulsu	r20, r21
     142:	48 03       	fmul	r20, r16
     144:	4b 03       	fmul	r20, r19
     146:	4e 03       	fmul	r20, r22
     148:	51 03       	mulsu	r21, r17
     14a:	54 03       	mulsu	r21, r20

0000014c <__ctors_end>:
     14c:	11 24       	eor	r1, r1
     14e:	1f be       	out	0x3f, r1	; 63
     150:	cf ef       	ldi	r28, 0xFF	; 255
     152:	d0 e1       	ldi	r29, 0x10	; 16
     154:	de bf       	out	0x3e, r29	; 62
     156:	cd bf       	out	0x3d, r28	; 61

00000158 <__do_copy_data>:
     158:	13 e0       	ldi	r17, 0x03	; 3
     15a:	a0 e0       	ldi	r26, 0x00	; 0
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	e4 e3       	ldi	r30, 0x34	; 52
     160:	f6 e1       	ldi	r31, 0x16	; 22
     162:	00 e0       	ldi	r16, 0x00	; 0
     164:	0b bf       	out	0x3b, r16	; 59
     166:	02 c0       	rjmp	.+4      	; 0x16c <__do_copy_data+0x14>
     168:	07 90       	elpm	r0, Z+
     16a:	0d 92       	st	X+, r0
     16c:	a2 34       	cpi	r26, 0x42	; 66
     16e:	b1 07       	cpc	r27, r17
     170:	d9 f7       	brne	.-10     	; 0x168 <__do_copy_data+0x10>

00000172 <__do_clear_bss>:
     172:	23 e0       	ldi	r18, 0x03	; 3
     174:	a2 e4       	ldi	r26, 0x42	; 66
     176:	b3 e0       	ldi	r27, 0x03	; 3
     178:	01 c0       	rjmp	.+2      	; 0x17c <.do_clear_bss_start>

0000017a <.do_clear_bss_loop>:
     17a:	1d 92       	st	X+, r1

0000017c <.do_clear_bss_start>:
     17c:	a9 3c       	cpi	r26, 0xC9	; 201
     17e:	b2 07       	cpc	r27, r18
     180:	e1 f7       	brne	.-8      	; 0x17a <.do_clear_bss_loop>
     182:	f2 d4       	rcall	.+2532   	; 0xb68 <main>
     184:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <_exit>

00000188 <__bad_interrupt>:
     188:	3b cf       	rjmp	.-394    	; 0x0 <__vectors>

0000018a <can_init>:
	data_send_arr_nh(d, node, 2);
}

//***** CAN initalization *****************************************************
void can_init()
{	
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
	CANGCON = ( 1 << SWRES );   // Software reset
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	
	CANTCON = 0x00;				// CAN timing prescaler set to 0;
     194:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	
	CANBT1 = 0x02;	// Set baud rate to 500kb (assuming 16Mhz IOclk)
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x0C;
     19e:	8c e0       	ldi	r24, 0x0C	; 12
     1a0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x37;
     1a4:	87 e3       	ldi	r24, 0x37	; 55
     1a6:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	for (int8_t mob=0; mob<14; mob++)
     1aa:	80 e0       	ldi	r24, 0x00	; 0
	{
		CANPAGE = ( mob << 4 ); // Selects Message Object 0-14
     1ac:	cd ee       	ldi	r28, 0xED	; 237
     1ae:	d0 e0       	ldi	r29, 0x00	; 0
		CANCDMOB = 0x00;		// Disable mob
     1b0:	af ee       	ldi	r26, 0xEF	; 239
     1b2:	b0 e0       	ldi	r27, 0x00	; 0
		CANSTMOB = 0x00;		// Clear mob status register;
     1b4:	ee ee       	ldi	r30, 0xEE	; 238
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT2 = 0x0C;
	CANBT3 = 0x37;

	for (int8_t mob=0; mob<14; mob++)
	{
		CANPAGE = ( mob << 4 ); // Selects Message Object 0-14
     1b8:	98 2f       	mov	r25, r24
     1ba:	92 95       	swap	r25
     1bc:	90 7f       	andi	r25, 0xF0	; 240
     1be:	98 83       	st	Y, r25
		CANCDMOB = 0x00;		// Disable mob
     1c0:	1c 92       	st	X, r1
		CANSTMOB = 0x00;		// Clear mob status register;
     1c2:	10 82       	st	Z, r1
     1c4:	8f 5f       	subi	r24, 0xFF	; 255
	
	CANBT1 = 0x02;	// Set baud rate to 500kb (assuming 16Mhz IOclk)
	CANBT2 = 0x0C;
	CANBT3 = 0x37;

	for (int8_t mob=0; mob<14; mob++)
     1c6:	8e 30       	cpi	r24, 0x0E	; 14
     1c8:	b9 f7       	brne	.-18     	; 0x1b8 <can_init+0x2e>
		CANPAGE = ( mob << 4 ); // Selects Message Object 0-14
		CANCDMOB = 0x00;		// Disable mob
		CANSTMOB = 0x00;		// Clear mob status register;
	}
	
	CANIE2 = (( 1 << IEMOB1 ) | ( 0 << IEMOB0 ));  // IEMOB1 = MOB1 Enable interrupts on mob1 for reception and transmission
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	CANGIE = ( 1 << ENIT ) | ( 1 << ENRX ) | ( 0 << ENTX );   // Enable interrupts on receive
     1d0:	80 ea       	ldi	r24, 0xA0	; 160
     1d2:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	CANGCON |= ( 1 << 1 );	// Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
     1d6:	e8 ed       	ldi	r30, 0xD8	; 216
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	80 81       	ld	r24, Z
     1dc:	82 60       	ori	r24, 0x02	; 2
     1de:	80 83       	st	Z, r24
}
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	08 95       	ret

000001e6 <can_rx>:

//***** CAN Creating RX *****************************************************
void can_rx(uint16_t NODE_ID)
{
	CANPAGE = ( 1 << MOBNB0 ); // Select message object 0
     1e6:	20 e1       	ldi	r18, 0x10	; 16
     1e8:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
	CANIDT1 = NODE_ID >> 3; // Receive Address
     1ec:	9c 01       	movw	r18, r24
     1ee:	36 95       	lsr	r19
     1f0:	27 95       	ror	r18
     1f2:	36 95       	lsr	r19
     1f4:	27 95       	ror	r18
     1f6:	36 95       	lsr	r19
     1f8:	27 95       	ror	r18
     1fa:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	CANIDT2 = NODE_ID << 5; //
     1fe:	82 95       	swap	r24
     200:	88 0f       	add	r24, r24
     202:	80 7e       	andi	r24, 0xE0	; 224
     204:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT3 = 0x00; 		// ""
     208:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT4 = 0x00; 		// ""
     20c:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	
	CANIDM1 = 0b11111111;   // Receive Address
     210:	8f ef       	ldi	r24, 0xFF	; 255
     212:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDM2 = 0b11100000;	//
     216:	80 ee       	ldi	r24, 0xE0	; 224
     218:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>

	CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 3 << DLC0));  // Enable Reception | 11 bit | IDE DLC8
     21c:	83 e8       	ldi	r24, 0x83	; 131
     21e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     222:	08 95       	ret

00000224 <can_tx>:
}

//***** CAN Creating TX *****************************************************
void can_tx(uint16_t Address, uint8_t DLC)
{	
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	9c 01       	movw	r18, r24
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 0 << MOBNB0 ); // select 0000 = CANMOB0
     22a:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	while ( CANEN2 & ( 1 << ENMOB0 ) ); // Wait for MOb 0 to be free
     22e:	ec ed       	ldi	r30, 0xDC	; 220
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	90 81       	ld	r25, Z
     234:	90 fd       	sbrc	r25, 0
     236:	fd cf       	rjmp	.-6      	; 0x232 <can_tx+0xe>
	
	CANSTMOB = 0x00;   // Clear mob status register
     238:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	
	CANIDT4 = 0x00;     		//
     23c:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = 0x00;				//
     240:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = Address << 5;		//
     244:	82 2f       	mov	r24, r18
     246:	82 95       	swap	r24
     248:	88 0f       	add	r24, r24
     24a:	80 7e       	andi	r24, 0xE0	; 224
     24c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = Address >> 3;		//
     250:	36 95       	lsr	r19
     252:	27 95       	ror	r18
     254:	36 95       	lsr	r19
     256:	27 95       	ror	r18
     258:	36 95       	lsr	r19
     25a:	27 95       	ror	r18
     25c:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     260:	e5 e6       	ldi	r30, 0x65	; 101
     262:	f3 e0       	ldi	r31, 0x03	; 3
     264:	2d e6       	ldi	r18, 0x6D	; 109
     266:	33 e0       	ldi	r19, 0x03	; 3
     268:	df 01       	movw	r26, r30
	
	for ( int8_t i = 0; i < 8; i++ ) CANMSG = TransmitData[i]; //CAN Data Message Register: setting the data in the message register
     26a:	ca ef       	ldi	r28, 0xFA	; 250
     26c:	d0 e0       	ldi	r29, 0x00	; 0
     26e:	8d 91       	ld	r24, X+
     270:	88 83       	st	Y, r24
     272:	a2 17       	cp	r26, r18
     274:	b3 07       	cpc	r27, r19
     276:	d9 f7       	brne	.-10     	; 0x26e <can_tx+0x4a>
	
	CANCDMOB = (( 1 << CONMOB0 ) | ( 0 << IDE ) | ( DLC << DLC0)); //CAN MOb Control and DLC Register: (1<<CONMOB1) = enable reception. (0<<IDE) = can standard rev 2.0A ( id length = 11 bits), (DLC << DLC0) Set *DLC* Bytes in the data field of the message.
     278:	60 64       	ori	r22, 0x40	; 64
     27a:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	while ( ! ( CANSTMOB & ( 1 << TXOK ) ) );	// wait for TXOK flag set	// JEROEN PAS NOU OP JONGE
     27e:	ae ee       	ldi	r26, 0xEE	; 238
     280:	b0 e0       	ldi	r27, 0x00	; 0
     282:	8c 91       	ld	r24, X
     284:	86 ff       	sbrs	r24, 6
     286:	fd cf       	rjmp	.-6      	; 0x282 <can_tx+0x5e>
	
	CANCDMOB = 0x00; //Clear CAN Mob Control and DLC Register
     288:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	CANSTMOB = 0x00; // Clear TXOK flag
     28c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select 0001 = MOB1
     290:	80 e1       	ldi	r24, 0x10	; 16
     292:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
	for (int8_t i = 0; i < 8; i++) TransmitData[i] = 0; //Resetting Transmit Data
     296:	11 92       	st	Z+, r1
     298:	2e 17       	cp	r18, r30
     29a:	3f 07       	cpc	r19, r31
     29c:	e1 f7       	brne	.-8      	; 0x296 <can_tx+0x72>
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <data_send_arr>:
#include <avr/interrupt.h>
#include "Defines.h"
#include "CAN.h"

void data_send_arr(uint8_t header, uint8_t buffer[], uint16_t node, uint8_t bufferlen)
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
	TransmitData[0] = header;
     2a8:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <TransmitData>
	for(uint8_t i = 0; i < bufferlen; i++) TransmitData[i+1] = buffer[i];
     2ac:	22 23       	and	r18, r18
     2ae:	79 f0       	breq	.+30     	; 0x2ce <data_send_arr+0x2a>
     2b0:	fb 01       	movw	r30, r22
     2b2:	a6 e6       	ldi	r26, 0x66	; 102
     2b4:	b3 e0       	ldi	r27, 0x03	; 3
     2b6:	8f ef       	ldi	r24, 0xFF	; 255
     2b8:	82 0f       	add	r24, r18
     2ba:	c8 2f       	mov	r28, r24
     2bc:	d0 e0       	ldi	r29, 0x00	; 0
     2be:	21 96       	adiw	r28, 0x01	; 1
     2c0:	c6 0f       	add	r28, r22
     2c2:	d7 1f       	adc	r29, r23
     2c4:	81 91       	ld	r24, Z+
     2c6:	8d 93       	st	X+, r24
     2c8:	ec 17       	cp	r30, r28
     2ca:	fd 07       	cpc	r31, r29
     2cc:	d9 f7       	brne	.-10     	; 0x2c4 <data_send_arr+0x20>
	can_tx(node, bufferlen + 1);
     2ce:	61 e0       	ldi	r22, 0x01	; 1
     2d0:	62 0f       	add	r22, r18
     2d2:	ca 01       	movw	r24, r20
     2d4:	a7 df       	rcall	.-178    	; 0x224 <can_tx>
}
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	08 95       	ret

000002dc <data_send8>:
void data_send8(uint8_t header, uint8_t data, uint16_t node)
{
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	1f 92       	push	r1
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
	uint8_t d[] = {data};
     2e6:	69 83       	std	Y+1, r22	; 0x01
	data_send_arr(header, d, node, 1);
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	be 01       	movw	r22, r28
     2ec:	6f 5f       	subi	r22, 0xFF	; 255
     2ee:	7f 4f       	sbci	r23, 0xFF	; 255
     2f0:	d9 df       	rcall	.-78     	; 0x2a4 <data_send_arr>
}
     2f2:	0f 90       	pop	r0
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <data_send_ecu>:
#include "Data.h"
#include "CAN.h"

void data_send_ecu(uint8_t node, uint8_t data)
{
	TransmitData[0] = node;
     2fa:	e5 e6       	ldi	r30, 0x65	; 101
     2fc:	f3 e0       	ldi	r31, 0x03	; 3
     2fe:	80 83       	st	Z, r24
	TransmitData[1] = data;
     300:	61 83       	std	Z+1, r22	; 0x01
	can_tx(ECU2ID, 2);
     302:	62 e0       	ldi	r22, 0x02	; 2
     304:	85 e0       	ldi	r24, 0x05	; 5
     306:	92 e0       	ldi	r25, 0x02	; 2
     308:	8d cf       	rjmp	.-230    	; 0x224 <can_tx>
     30a:	08 95       	ret

0000030c <__vector_18>:
}

ISR(CANIT_vect)
{
     30c:	1f 92       	push	r1
     30e:	0f 92       	push	r0
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	0f 92       	push	r0
     314:	11 24       	eor	r1, r1
     316:	0b b6       	in	r0, 0x3b	; 59
     318:	0f 92       	push	r0
     31a:	2f 93       	push	r18
     31c:	3f 93       	push	r19
     31e:	4f 93       	push	r20
     320:	5f 93       	push	r21
     322:	6f 93       	push	r22
     324:	7f 93       	push	r23
     326:	8f 93       	push	r24
     328:	9f 93       	push	r25
     32a:	af 93       	push	r26
     32c:	bf 93       	push	r27
     32e:	ef 93       	push	r30
     330:	ff 93       	push	r31
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select CANMOB 0001 = MOB1
     332:	80 e1       	ldi	r24, 0x10	; 16
     334:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	uint8_t length = ( CANCDMOB & 0x0F );
     338:	40 91 ef 00 	lds	r20, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	for ( int8_t i = 0; i < length; i++ ) ReceiveData[i] = CANMSG;
     33c:	4f 70       	andi	r20, 0x0F	; 15
     33e:	50 e0       	ldi	r21, 0x00	; 0
     340:	14 16       	cp	r1, r20
     342:	15 06       	cpc	r1, r21
     344:	94 f4       	brge	.+36     	; 0x36a <__vector_18+0x5e>
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	ea ef       	ldi	r30, 0xFA	; 250
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	30 81       	ld	r19, Z
     352:	dc 01       	movw	r26, r24
     354:	a3 59       	subi	r26, 0x93	; 147
     356:	bc 4f       	sbci	r27, 0xFC	; 252
     358:	3c 93       	st	X, r19
     35a:	2f 5f       	subi	r18, 0xFF	; 255
     35c:	82 2f       	mov	r24, r18
     35e:	02 2e       	mov	r0, r18
     360:	00 0c       	add	r0, r0
     362:	99 0b       	sbc	r25, r25
     364:	84 17       	cp	r24, r20
     366:	95 07       	cpc	r25, r21
     368:	9c f3       	brlt	.-26     	; 0x350 <__vector_18+0x44>
	
	uint16_t ReceiveAddress = (CANIDT1 << 3) | ((CANIDT2 & 0b11100000) >> 5);
     36a:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     36e:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	
	if(ReceiveAddress == MASTERID)
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	88 0f       	add	r24, r24
     376:	99 1f       	adc	r25, r25
     378:	88 0f       	add	r24, r24
     37a:	99 1f       	adc	r25, r25
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	22 95       	swap	r18
     382:	26 95       	lsr	r18
     384:	27 70       	andi	r18, 0x07	; 7
     386:	82 2b       	or	r24, r18
     388:	87 31       	cpi	r24, 0x17	; 23
     38a:	93 40       	sbci	r25, 0x03	; 3
     38c:	09 f0       	breq	.+2      	; 0x390 <__vector_18+0x84>
     38e:	47 c1       	rjmp	.+654    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
	{
		switch(ReceiveData[0])
     390:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <ReceiveData>
     394:	8e 2f       	mov	r24, r30
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	fc 01       	movw	r30, r24
     39a:	71 97       	sbiw	r30, 0x11	; 17
     39c:	e1 35       	cpi	r30, 0x51	; 81
     39e:	f1 05       	cpc	r31, r1
     3a0:	08 f0       	brcs	.+2      	; 0x3a4 <__vector_18+0x98>
     3a2:	3d c1       	rjmp	.+634    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     3a4:	e6 5b       	subi	r30, 0xB6	; 182
     3a6:	ff 4f       	sbci	r31, 0xFF	; 255
     3a8:	0c c6       	rjmp	.+3096   	; 0xfc2 <__tablejump2__>
		{
			case GAS_1:
				gas1 = (ReceiveData[1] +  (ReceiveData[2] << 8));
     3aa:	ed e6       	ldi	r30, 0x6D	; 109
     3ac:	f3 e0       	ldi	r31, 0x03	; 3
     3ae:	82 81       	ldd	r24, Z+2	; 0x02
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	98 2f       	mov	r25, r24
     3b4:	88 27       	eor	r24, r24
     3b6:	21 81       	ldd	r18, Z+1	; 0x01
     3b8:	82 0f       	add	r24, r18
     3ba:	91 1d       	adc	r25, r1
     3bc:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <gas1+0x1>
     3c0:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <gas1>
			
				//Bound checking while fixing range
				gas1perc = (gas1 < GAS1MIN) ? 0 : ((gas1 > GAS1MAX) ? (GAS1MAX - GAS1MIN) : (gas1 - GAS1MIN));
     3c4:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <gas1>
     3c8:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <gas1+0x1>
     3cc:	85 3b       	cpi	r24, 0xB5	; 181
     3ce:	92 40       	sbci	r25, 0x02	; 2
     3d0:	70 f0       	brcs	.+28     	; 0x3ee <__vector_18+0xe2>
     3d2:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <gas1>
     3d6:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <gas1+0x1>
     3da:	8a 30       	cpi	r24, 0x0A	; 10
     3dc:	93 40       	sbci	r25, 0x03	; 3
     3de:	50 f4       	brcc	.+20     	; 0x3f4 <__vector_18+0xe8>
     3e0:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <gas1>
     3e4:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <gas1+0x1>
     3e8:	85 5b       	subi	r24, 0xB5	; 181
     3ea:	92 40       	sbci	r25, 0x02	; 2
     3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <__vector_18+0xec>
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <__vector_18+0xec>
     3f4:	84 e5       	ldi	r24, 0x54	; 84
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <gas1perc+0x1>
     3fc:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <gas1perc>
				gas1eng = (gas1perc * ENGINE_MAX) / (GAS2MAX - GAS2MIN);
     400:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <gas1perc>
     404:	30 91 5b 03 	lds	r19, 0x035B	; 0x80035b <gas1perc+0x1>
     408:	a0 e5       	ldi	r26, 0x50	; 80
     40a:	b3 ec       	ldi	r27, 0xC3	; 195
     40c:	e3 d5       	rcall	.+3014   	; 0xfd4 <__umulhisi3>
     40e:	2b e5       	ldi	r18, 0x5B	; 91
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	b9 d5       	rcall	.+2930   	; 0xf8a <__divmodsi4>
     418:	20 93 52 03 	sts	0x0352, r18	; 0x800352 <gas1eng>
     41c:	30 93 53 03 	sts	0x0353, r19	; 0x800353 <gas1eng+0x1>
     420:	40 93 54 03 	sts	0x0354, r20	; 0x800354 <gas1eng+0x2>
     424:	50 93 55 03 	sts	0x0355, r21	; 0x800355 <gas1eng+0x3>
				gas1perc = (gas1perc * 100) / (GAS1MAX - GAS1MIN);
     428:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <gas1perc>
     42c:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <gas1perc+0x1>
     430:	44 e6       	ldi	r20, 0x64	; 100
     432:	48 9f       	mul	r20, r24
     434:	90 01       	movw	r18, r0
     436:	49 9f       	mul	r20, r25
     438:	30 0d       	add	r19, r0
     43a:	11 24       	eor	r1, r1
     43c:	36 95       	lsr	r19
     43e:	27 95       	ror	r18
     440:	36 95       	lsr	r19
     442:	27 95       	ror	r18
     444:	a7 e8       	ldi	r26, 0x87	; 135
     446:	b1 e6       	ldi	r27, 0x61	; 97
     448:	c5 d5       	rcall	.+2954   	; 0xfd4 <__umulhisi3>
     44a:	96 95       	lsr	r25
     44c:	87 95       	ror	r24
     44e:	96 95       	lsr	r25
     450:	87 95       	ror	r24
     452:	96 95       	lsr	r25
     454:	87 95       	ror	r24
     456:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <gas1perc+0x1>
     45a:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <gas1perc>
				break;
     45e:	df c0       	rjmp	.+446    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>

			case GAS_2:
				gas2 = (ReceiveData[1] + (ReceiveData[2] << 8));
     460:	ed e6       	ldi	r30, 0x6D	; 109
     462:	f3 e0       	ldi	r31, 0x03	; 3
     464:	82 81       	ldd	r24, Z+2	; 0x02
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	98 2f       	mov	r25, r24
     46a:	88 27       	eor	r24, r24
     46c:	21 81       	ldd	r18, Z+1	; 0x01
     46e:	82 0f       	add	r24, r18
     470:	91 1d       	adc	r25, r1
     472:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <gas2+0x1>
     476:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <gas2>
				gas2perc = (gas2 < GAS2MIN) ? 0 : ((gas2 > GAS2MAX) ? (GAS2MAX - GAS2MIN) : (gas2 - GAS2MIN));
     47a:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <gas2>
     47e:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <gas2+0x1>
     482:	81 32       	cpi	r24, 0x21	; 33
     484:	92 40       	sbci	r25, 0x02	; 2
     486:	70 f0       	brcs	.+28     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     488:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <gas2>
     48c:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <gas2+0x1>
     490:	8d 37       	cpi	r24, 0x7D	; 125
     492:	92 40       	sbci	r25, 0x02	; 2
     494:	50 f4       	brcc	.+20     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     496:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <gas2>
     49a:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <gas2+0x1>
     49e:	81 52       	subi	r24, 0x21	; 33
     4a0:	92 40       	sbci	r25, 0x02	; 2
     4a2:	05 c0       	rjmp	.+10     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4aa:	8b e5       	ldi	r24, 0x5B	; 91
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <gas2perc+0x1>
     4b2:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <gas2perc>
				gas2perc = (gas2perc * 100) / (GAS2MAX - GAS2MIN);
     4b6:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <gas2perc>
     4ba:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <gas2perc+0x1>
     4be:	24 e6       	ldi	r18, 0x64	; 100
     4c0:	28 9f       	mul	r18, r24
     4c2:	a0 01       	movw	r20, r0
     4c4:	29 9f       	mul	r18, r25
     4c6:	50 0d       	add	r21, r0
     4c8:	11 24       	eor	r1, r1
     4ca:	9a 01       	movw	r18, r20
     4cc:	a7 e1       	ldi	r26, 0x17	; 23
     4ce:	b8 e6       	ldi	r27, 0x68	; 104
     4d0:	81 d5       	rcall	.+2818   	; 0xfd4 <__umulhisi3>
     4d2:	48 1b       	sub	r20, r24
     4d4:	59 0b       	sbc	r21, r25
     4d6:	56 95       	lsr	r21
     4d8:	47 95       	ror	r20
     4da:	84 0f       	add	r24, r20
     4dc:	95 1f       	adc	r25, r21
     4de:	00 24       	eor	r0, r0
     4e0:	88 0f       	add	r24, r24
     4e2:	99 1f       	adc	r25, r25
     4e4:	00 1c       	adc	r0, r0
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	00 1c       	adc	r0, r0
     4ec:	89 2f       	mov	r24, r25
     4ee:	90 2d       	mov	r25, r0
     4f0:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <gas2perc+0x1>
     4f4:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <gas2perc>
				break;
     4f8:	92 c0       	rjmp	.+292    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>

			case BRAKE:
				brake = (ReceiveData[1] + (ReceiveData[2] << 8));
     4fa:	ed e6       	ldi	r30, 0x6D	; 109
     4fc:	f3 e0       	ldi	r31, 0x03	; 3
     4fe:	82 81       	ldd	r24, Z+2	; 0x02
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	98 2f       	mov	r25, r24
     504:	88 27       	eor	r24, r24
     506:	21 81       	ldd	r18, Z+1	; 0x01
     508:	82 0f       	add	r24, r18
     50a:	91 1d       	adc	r25, r1
     50c:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <brake+0x1>
     510:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <brake>
				brakeperc = (brake < BRAKEMIN) ? 0 : ((brake > BRAKEMAX) ? (BRAKEMAX - BRAKEMIN) : (brake - BRAKEMIN));
     514:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <brake>
     518:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <brake+0x1>
     51c:	44 97       	sbiw	r24, 0x14	; 20
     51e:	68 f0       	brcs	.+26     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     520:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <brake>
     524:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <brake+0x1>
     528:	85 36       	cpi	r24, 0x65	; 101
     52a:	91 05       	cpc	r25, r1
     52c:	48 f4       	brcc	.+18     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
     52e:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <brake>
     532:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <brake+0x1>
     536:	44 97       	sbiw	r24, 0x14	; 20
     538:	05 c0       	rjmp	.+10     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	02 c0       	rjmp	.+4      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     540:	80 e5       	ldi	r24, 0x50	; 80
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <brakeperc+0x1>
     548:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <brakeperc>
				brakeperc = (brakeperc * 100) / (BRAKEMAX - BRAKEMIN);
     54c:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <brakeperc>
     550:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <brakeperc+0x1>
     554:	44 e6       	ldi	r20, 0x64	; 100
     556:	48 9f       	mul	r20, r24
     558:	90 01       	movw	r18, r0
     55a:	49 9f       	mul	r20, r25
     55c:	30 0d       	add	r19, r0
     55e:	11 24       	eor	r1, r1
     560:	ad ec       	ldi	r26, 0xCD	; 205
     562:	bc ec       	ldi	r27, 0xCC	; 204
     564:	37 d5       	rcall	.+2670   	; 0xfd4 <__umulhisi3>
     566:	00 24       	eor	r0, r0
     568:	88 0f       	add	r24, r24
     56a:	99 1f       	adc	r25, r25
     56c:	00 1c       	adc	r0, r0
     56e:	88 0f       	add	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	00 1c       	adc	r0, r0
     574:	89 2f       	mov	r24, r25
     576:	90 2d       	mov	r25, r0
     578:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <brakeperc+0x1>
     57c:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <brakeperc>
				break;
     580:	4e c0       	rjmp	.+156    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
			
			case SHUTDOWN:
				if (ReceiveData[1]) shutdownon = 1;
     582:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <ReceiveData+0x1>
     586:	88 23       	and	r24, r24
     588:	09 f4       	brne	.+2      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
     58a:	49 c0       	rjmp	.+146    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <shutdownon>
     592:	45 c0       	rjmp	.+138    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
				break;
				
			case RPM_FRONT_LEFT:
				rpm_fl = (ReceiveData[1] + (ReceiveData[2] << 8));
     594:	ed e6       	ldi	r30, 0x6D	; 109
     596:	f3 e0       	ldi	r31, 0x03	; 3
     598:	82 81       	ldd	r24, Z+2	; 0x02
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	98 2f       	mov	r25, r24
     59e:	88 27       	eor	r24, r24
     5a0:	21 81       	ldd	r18, Z+1	; 0x01
     5a2:	82 0f       	add	r24, r18
     5a4:	91 1d       	adc	r25, r1
     5a6:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <rpm_fl+0x1>
     5aa:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <rpm_fl>
				break;
     5ae:	37 c0       	rjmp	.+110    	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
				
			case RPM_FRONT_RIGHT:
				rpm_fr = (ReceiveData[1] + (ReceiveData[2] << 8));
     5b0:	ed e6       	ldi	r30, 0x6D	; 109
     5b2:	f3 e0       	ldi	r31, 0x03	; 3
     5b4:	82 81       	ldd	r24, Z+2	; 0x02
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	98 2f       	mov	r25, r24
     5ba:	88 27       	eor	r24, r24
     5bc:	21 81       	ldd	r18, Z+1	; 0x01
     5be:	82 0f       	add	r24, r18
     5c0:	91 1d       	adc	r25, r1
     5c2:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <rpm_fr+0x1>
     5c6:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <rpm_fr>
				break;
     5ca:	29 c0       	rjmp	.+82     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
				
			case STEERING_POS:
				steerpos = (ReceiveData[1] + (ReceiveData[2] << 8));
     5cc:	ed e6       	ldi	r30, 0x6D	; 109
     5ce:	f3 e0       	ldi	r31, 0x03	; 3
     5d0:	82 81       	ldd	r24, Z+2	; 0x02
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	98 2f       	mov	r25, r24
     5d6:	88 27       	eor	r24, r24
     5d8:	21 81       	ldd	r18, Z+1	; 0x01
     5da:	82 0f       	add	r24, r18
     5dc:	91 1d       	adc	r25, r1
     5de:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <steerpos+0x1>
     5e2:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <steerpos>
				break;
     5e6:	1b c0       	rjmp	.+54     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
				
			case FLOW_LEFT:
				flowleft = (ReceiveData[1] + (ReceiveData[2] << 8));
     5e8:	ed e6       	ldi	r30, 0x6D	; 109
     5ea:	f3 e0       	ldi	r31, 0x03	; 3
     5ec:	82 81       	ldd	r24, Z+2	; 0x02
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	98 2f       	mov	r25, r24
     5f2:	88 27       	eor	r24, r24
     5f4:	21 81       	ldd	r18, Z+1	; 0x01
     5f6:	82 0f       	add	r24, r18
     5f8:	91 1d       	adc	r25, r1
     5fa:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <flowleft+0x1>
     5fe:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <flowleft>
				break;
     602:	0d c0       	rjmp	.+26     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
				
			case FLOW_RIGHT:
				flowleft = (ReceiveData[1] + (ReceiveData[2] << 8));
     604:	ed e6       	ldi	r30, 0x6D	; 109
     606:	f3 e0       	ldi	r31, 0x03	; 3
     608:	82 81       	ldd	r24, Z+2	; 0x02
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	98 2f       	mov	r25, r24
     60e:	88 27       	eor	r24, r24
     610:	21 81       	ldd	r18, Z+1	; 0x01
     612:	82 0f       	add	r24, r18
     614:	91 1d       	adc	r25, r1
     616:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <flowleft+0x1>
     61a:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <flowleft>
     61e:	ed e6       	ldi	r30, 0x6D	; 109
     620:	f3 e0       	ldi	r31, 0x03	; 3
     622:	85 e7       	ldi	r24, 0x75	; 117
     624:	93 e0       	ldi	r25, 0x03	; 3
				break;
		}
	}
	
	for (int8_t i = 0; i < 8; i++) ReceiveData[i] = 0;
     626:	11 92       	st	Z+, r1
     628:	e8 17       	cp	r30, r24
     62a:	f9 07       	cpc	r31, r25
     62c:	e1 f7       	brne	.-8      	; 0x626 <__LOCK_REGION_LENGTH__+0x226>


	CANSTMOB = 0x00; // Clear RXOK flag
     62e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 3 << DLC0)); //CAN MOb Control and DLC Register: (1<<CONMOB1) = enable reception. (0<<IDE) = can standard rev 2.0A ( id length = 11 bits), (3 << DLC0) 3 Bytes in the data field of the message.
     632:	83 e8       	ldi	r24, 0x83	; 131
     634:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 0 << MOBNB0 ); // select 0000 = CANMOB0
     638:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
}
     63c:	ff 91       	pop	r31
     63e:	ef 91       	pop	r30
     640:	bf 91       	pop	r27
     642:	af 91       	pop	r26
     644:	9f 91       	pop	r25
     646:	8f 91       	pop	r24
     648:	7f 91       	pop	r23
     64a:	6f 91       	pop	r22
     64c:	5f 91       	pop	r21
     64e:	4f 91       	pop	r20
     650:	3f 91       	pop	r19
     652:	2f 91       	pop	r18
     654:	0f 90       	pop	r0
     656:	0b be       	out	0x3b, r0	; 59
     658:	0f 90       	pop	r0
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	0f 90       	pop	r0
     65e:	1f 90       	pop	r1
     660:	18 95       	reti

00000662 <get_error>:
#include "Defines.h"
#include "Error.h"

char* get_error(enum _error e)
{
	switch(e)
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	8b 30       	cpi	r24, 0x0B	; 11
     666:	91 05       	cpc	r25, r1
     668:	10 f5       	brcc	.+68     	; 0x6ae <get_error+0x4c>
     66a:	fc 01       	movw	r30, r24
     66c:	e5 56       	subi	r30, 0x65	; 101
     66e:	ff 4f       	sbci	r31, 0xFF	; 255
     670:	a8 c4       	rjmp	.+2384   	; 0xfc2 <__tablejump2__>
	{
		case ERROR_NONE:		return "No error";

		case ERROR_GAS_DISCREPANCY:	return "Gas discrepancy";
     672:	8b e0       	ldi	r24, 0x0B	; 11
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	08 95       	ret
		case ERROR_GASBRAKE:		return "Gas & brake pressed";
     678:	8b e1       	ldi	r24, 0x1B	; 27
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	08 95       	ret

		case ERROR_GAS1RANGE:		return "Gas 1 out of range";
     67e:	8f e2       	ldi	r24, 0x2F	; 47
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	08 95       	ret
		case ERROR_GAS2RANGE:		return "Gas 2 out of range";
     684:	82 e4       	ldi	r24, 0x42	; 66
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	08 95       	ret
		case ERROR_BRAKERANGE:		return "Brake out of range";
     68a:	85 e5       	ldi	r24, 0x55	; 85
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	08 95       	ret

		case ERROR_GAS1SENSOR:		return "Gas 1 sensor faulty";
     690:	88 e6       	ldi	r24, 0x68	; 104
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	08 95       	ret
		case ERROR_GAS2SENSOR:		return "Gas 2 sensor faulty";
     696:	8c e7       	ldi	r24, 0x7C	; 124
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	08 95       	ret
		case ERROR_BRAKESENSOR:		return "Brake sensor faulty";
     69c:	80 e9       	ldi	r24, 0x90	; 144
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	08 95       	ret
		
		case ERROR_PUMPFLOW:		return "No pump water flow";
     6a2:	84 ea       	ldi	r24, 0xA4	; 164
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	08 95       	ret
		case ERROR_PUMPTEMP:		return "Pump temp too high";
     6a8:	87 eb       	ldi	r24, 0xB7	; 183
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	08 95       	ret

		default:			return "Unknown error?!";
     6ae:	8a ec       	ldi	r24, 0xCA	; 202
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	08 95       	ret

char* get_error(enum _error e)
{
	switch(e)
	{
		case ERROR_NONE:		return "No error";
     6b4:	82 e0       	ldi	r24, 0x02	; 2
     6b6:	91 e0       	ldi	r25, 0x01	; 1
		case ERROR_PUMPFLOW:		return "No pump water flow";
		case ERROR_PUMPTEMP:		return "Pump temp too high";

		default:			return "Unknown error?!";
	}
}
     6b8:	08 95       	ret

000006ba <e_checkranges>:

void e_checkranges()
{
	if(gas1 < GAS1MIN - RANGESLACK || gas1 > GAS1MAX + RANGESLACK) _errorcode = ERROR_GAS1RANGE;
     6ba:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <gas1>
     6be:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <gas1+0x1>
     6c2:	81 3a       	cpi	r24, 0xA1	; 161
     6c4:	92 40       	sbci	r25, 0x02	; 2
     6c6:	38 f0       	brcs	.+14     	; 0x6d6 <e_checkranges+0x1c>
     6c8:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <gas1>
     6cc:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <gas1+0x1>
     6d0:	8e 31       	cpi	r24, 0x1E	; 30
     6d2:	93 40       	sbci	r25, 0x03	; 3
     6d4:	18 f0       	brcs	.+6      	; 0x6dc <e_checkranges+0x22>
     6d6:	83 e0       	ldi	r24, 0x03	; 3
     6d8:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <_errorcode>
	if(gas2 < GAS2MIN - RANGESLACK || gas2 > GAS2MAX + RANGESLACK) _errorcode = ERROR_GAS2RANGE;
     6dc:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <gas2>
     6e0:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <gas2+0x1>
     6e4:	8d 30       	cpi	r24, 0x0D	; 13
     6e6:	92 40       	sbci	r25, 0x02	; 2
     6e8:	38 f0       	brcs	.+14     	; 0x6f8 <e_checkranges+0x3e>
     6ea:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <gas2>
     6ee:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <gas2+0x1>
     6f2:	81 39       	cpi	r24, 0x91	; 145
     6f4:	92 40       	sbci	r25, 0x02	; 2
     6f6:	18 f0       	brcs	.+6      	; 0x6fe <e_checkranges+0x44>
     6f8:	84 e0       	ldi	r24, 0x04	; 4
     6fa:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <_errorcode>
     6fe:	08 95       	ret

00000700 <e_checkdiscrepancy>:
	//if(brake < BRAKEMAX - RANGESLACK || brake > BRAKEMAX + RANGESLACK) _errorcode = ERROR_BRAKERANGE;
}

void e_checkdiscrepancy()
{
	int8_t dif = gas1perc - gas2perc;
     700:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <gas1perc>
     704:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <gas1perc+0x1>
     708:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <gas2perc>
     70c:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <gas2perc+0x1>
	if(dif < -10 || dif > 10) _errorcode = ERROR_GAS_DISCREPANCY;
     710:	86 5f       	subi	r24, 0xF6	; 246
     712:	82 1b       	sub	r24, r18
     714:	85 31       	cpi	r24, 0x15	; 21
     716:	18 f0       	brcs	.+6      	; 0x71e <e_checkdiscrepancy+0x1e>
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <_errorcode>
     71e:	08 95       	ret

00000720 <e_checksensors>:
}

void e_checksensors()
{
	if(gas1 == 0x0000 || gas1 == 0xFFFF) _errorcode = ERROR_GAS1SENSOR;
     720:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <gas1>
     724:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <gas1+0x1>
     728:	89 2b       	or	r24, r25
     72a:	31 f0       	breq	.+12     	; 0x738 <e_checksensors+0x18>
     72c:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <gas1>
     730:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <gas1+0x1>
     734:	01 96       	adiw	r24, 0x01	; 1
     736:	19 f4       	brne	.+6      	; 0x73e <e_checksensors+0x1e>
     738:	86 e0       	ldi	r24, 0x06	; 6
     73a:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <_errorcode>
	if(gas2 == 0x0000 || gas2 == 0xFFFF) _errorcode = ERROR_GAS2SENSOR;
     73e:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <gas2>
     742:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <gas2+0x1>
     746:	89 2b       	or	r24, r25
     748:	31 f0       	breq	.+12     	; 0x756 <e_checksensors+0x36>
     74a:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <gas2>
     74e:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <gas2+0x1>
     752:	01 96       	adiw	r24, 0x01	; 1
     754:	19 f4       	brne	.+6      	; 0x75c <e_checksensors+0x3c>
     756:	87 e0       	ldi	r24, 0x07	; 7
     758:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <_errorcode>
	if(brake == 0x0000 || brake == 0xFFFF) _errorcode = ERROR_BRAKESENSOR;
     75c:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <brake>
     760:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <brake+0x1>
     764:	89 2b       	or	r24, r25
     766:	31 f0       	breq	.+12     	; 0x774 <e_checksensors+0x54>
     768:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <brake>
     76c:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <brake+0x1>
     770:	01 96       	adiw	r24, 0x01	; 1
     772:	19 f4       	brne	.+6      	; 0x77a <e_checksensors+0x5a>
     774:	88 e0       	ldi	r24, 0x08	; 8
     776:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <_errorcode>
     77a:	08 95       	ret

0000077c <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
     77c:	16 9a       	sbi	0x02, 6	; 2
     77e:	85 e0       	ldi	r24, 0x05	; 5
     780:	8a 95       	dec	r24
     782:	f1 f7       	brne	.-4      	; 0x780 <toggle_e+0x4>
     784:	00 00       	nop
     786:	16 98       	cbi	0x02, 6	; 2
     788:	08 95       	ret

0000078a <lcd_write>:
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	d8 2f       	mov	r29, r24
     790:	66 23       	and	r22, r22
     792:	11 f0       	breq	.+4      	; 0x798 <lcd_write+0xe>
     794:	14 9a       	sbi	0x02, 4	; 2
     796:	01 c0       	rjmp	.+2      	; 0x79a <lcd_write+0x10>
     798:	14 98       	cbi	0x02, 4	; 2
     79a:	15 98       	cbi	0x02, 5	; 2
     79c:	81 b1       	in	r24, 0x01	; 1
     79e:	8f 60       	ori	r24, 0x0F	; 15
     7a0:	81 b9       	out	0x01, r24	; 1
     7a2:	c2 b1       	in	r28, 0x02	; 2
     7a4:	c0 7f       	andi	r28, 0xF0	; 240
     7a6:	8d 2f       	mov	r24, r29
     7a8:	82 95       	swap	r24
     7aa:	8f 70       	andi	r24, 0x0F	; 15
     7ac:	8c 2b       	or	r24, r28
     7ae:	82 b9       	out	0x02, r24	; 2
     7b0:	e5 df       	rcall	.-54     	; 0x77c <toggle_e>
     7b2:	df 70       	andi	r29, 0x0F	; 15
     7b4:	dc 2b       	or	r29, r28
     7b6:	d2 b9       	out	0x02, r29	; 2
     7b8:	e1 df       	rcall	.-62     	; 0x77c <toggle_e>
     7ba:	cf 60       	ori	r28, 0x0F	; 15
     7bc:	c2 b9       	out	0x02, r28	; 2
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	08 95       	ret

000007c4 <lcd_read>:
     7c4:	88 23       	and	r24, r24
     7c6:	11 f0       	breq	.+4      	; 0x7cc <lcd_read+0x8>
     7c8:	14 9a       	sbi	0x02, 4	; 2
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <lcd_read+0xa>
     7cc:	14 98       	cbi	0x02, 4	; 2
     7ce:	15 9a       	sbi	0x02, 5	; 2
     7d0:	81 b1       	in	r24, 0x01	; 1
     7d2:	80 7f       	andi	r24, 0xF0	; 240
     7d4:	81 b9       	out	0x01, r24	; 1
     7d6:	16 9a       	sbi	0x02, 6	; 2
     7d8:	85 e0       	ldi	r24, 0x05	; 5
     7da:	8a 95       	dec	r24
     7dc:	f1 f7       	brne	.-4      	; 0x7da <lcd_read+0x16>
     7de:	00 00       	nop
     7e0:	90 b1       	in	r25, 0x00	; 0
     7e2:	16 98       	cbi	0x02, 6	; 2
     7e4:	85 e0       	ldi	r24, 0x05	; 5
     7e6:	8a 95       	dec	r24
     7e8:	f1 f7       	brne	.-4      	; 0x7e6 <lcd_read+0x22>
     7ea:	00 00       	nop
     7ec:	16 9a       	sbi	0x02, 6	; 2
     7ee:	85 e0       	ldi	r24, 0x05	; 5
     7f0:	8a 95       	dec	r24
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <lcd_read+0x2c>
     7f4:	00 00       	nop
     7f6:	20 b1       	in	r18, 0x00	; 0
     7f8:	2f 70       	andi	r18, 0x0F	; 15
     7fa:	89 2f       	mov	r24, r25
     7fc:	82 95       	swap	r24
     7fe:	80 7f       	andi	r24, 0xF0	; 240
     800:	16 98       	cbi	0x02, 6	; 2
     802:	82 2b       	or	r24, r18
     804:	08 95       	ret

00000806 <lcd_waitbusy>:
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	dd df       	rcall	.-70     	; 0x7c4 <lcd_read>
     80a:	88 23       	and	r24, r24
     80c:	e4 f3       	brlt	.-8      	; 0x806 <lcd_waitbusy>
     80e:	85 e1       	ldi	r24, 0x15	; 21
     810:	8a 95       	dec	r24
     812:	f1 f7       	brne	.-4      	; 0x810 <lcd_waitbusy+0xa>
     814:	00 00       	nop
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	d5 cf       	rjmp	.-86     	; 0x7c4 <lcd_read>
     81a:	08 95       	ret

0000081c <lcd_command>:
     81c:	cf 93       	push	r28
     81e:	c8 2f       	mov	r28, r24
     820:	f2 df       	rcall	.-28     	; 0x806 <lcd_waitbusy>
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	8c 2f       	mov	r24, r28
     826:	b1 df       	rcall	.-158    	; 0x78a <lcd_write>
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <lcd_gotoxy>:
     82c:	61 11       	cpse	r22, r1
     82e:	03 c0       	rjmp	.+6      	; 0x836 <lcd_gotoxy+0xa>
     830:	80 58       	subi	r24, 0x80	; 128
     832:	f4 cf       	rjmp	.-24     	; 0x81c <lcd_command>
     834:	08 95       	ret
     836:	61 30       	cpi	r22, 0x01	; 1
     838:	19 f4       	brne	.+6      	; 0x840 <lcd_gotoxy+0x14>
     83a:	80 54       	subi	r24, 0x40	; 64
     83c:	ef cf       	rjmp	.-34     	; 0x81c <lcd_command>
     83e:	08 95       	ret
     840:	62 30       	cpi	r22, 0x02	; 2
     842:	19 f4       	brne	.+6      	; 0x84a <lcd_gotoxy+0x1e>
     844:	8c 56       	subi	r24, 0x6C	; 108
     846:	ea cf       	rjmp	.-44     	; 0x81c <lcd_command>
     848:	08 95       	ret
     84a:	8c 52       	subi	r24, 0x2C	; 44
     84c:	e7 cf       	rjmp	.-50     	; 0x81c <lcd_command>
     84e:	08 95       	ret

00000850 <lcd_clrscr>:
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	e4 cf       	rjmp	.-56     	; 0x81c <lcd_command>
     854:	08 95       	ret

00000856 <lcd_putc>:
     856:	cf 93       	push	r28
     858:	c8 2f       	mov	r28, r24
     85a:	d5 df       	rcall	.-86     	; 0x806 <lcd_waitbusy>
     85c:	ca 30       	cpi	r28, 0x0A	; 10
     85e:	99 f4       	brne	.+38     	; 0x886 <lcd_putc+0x30>
     860:	84 31       	cpi	r24, 0x14	; 20
     862:	48 f0       	brcs	.+18     	; 0x876 <lcd_putc+0x20>
     864:	90 ec       	ldi	r25, 0xC0	; 192
     866:	98 0f       	add	r25, r24
     868:	94 31       	cpi	r25, 0x14	; 20
     86a:	38 f0       	brcs	.+14     	; 0x87a <lcd_putc+0x24>
     86c:	84 51       	subi	r24, 0x14	; 20
     86e:	8c 32       	cpi	r24, 0x2C	; 44
     870:	30 f0       	brcs	.+12     	; 0x87e <lcd_putc+0x28>
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	05 c0       	rjmp	.+10     	; 0x880 <lcd_putc+0x2a>
     876:	80 e4       	ldi	r24, 0x40	; 64
     878:	03 c0       	rjmp	.+6      	; 0x880 <lcd_putc+0x2a>
     87a:	84 e1       	ldi	r24, 0x14	; 20
     87c:	01 c0       	rjmp	.+2      	; 0x880 <lcd_putc+0x2a>
     87e:	84 e5       	ldi	r24, 0x54	; 84
     880:	80 58       	subi	r24, 0x80	; 128
     882:	cc df       	rcall	.-104    	; 0x81c <lcd_command>
     884:	03 c0       	rjmp	.+6      	; 0x88c <lcd_putc+0x36>
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	8c 2f       	mov	r24, r28
     88a:	7f df       	rcall	.-258    	; 0x78a <lcd_write>
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

00000890 <lcd_puts>:
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	ec 01       	movw	r28, r24
     896:	21 96       	adiw	r28, 0x01	; 1
     898:	fc 01       	movw	r30, r24
     89a:	80 81       	ld	r24, Z
     89c:	88 23       	and	r24, r24
     89e:	21 f0       	breq	.+8      	; 0x8a8 <lcd_puts+0x18>
     8a0:	da df       	rcall	.-76     	; 0x856 <lcd_putc>
     8a2:	89 91       	ld	r24, Y+
     8a4:	81 11       	cpse	r24, r1
     8a6:	fc cf       	rjmp	.-8      	; 0x8a0 <lcd_puts+0x10>
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     8ae:	cf 93       	push	r28
     8b0:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
     8b2:	81 b1       	in	r24, 0x01	; 1
     8b4:	8f 67       	ori	r24, 0x7F	; 127
     8b6:	81 b9       	out	0x01, r24	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8b8:	8f ef       	ldi	r24, 0xFF	; 255
     8ba:	99 ef       	ldi	r25, 0xF9	; 249
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	f1 f7       	brne	.-4      	; 0x8bc <lcd_init+0xe>
     8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <lcd_init+0x14>
     8c2:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
     8c4:	11 9a       	sbi	0x02, 1	; 2
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
    lcd_e_toggle();
     8c6:	10 9a       	sbi	0x02, 0	; 2
     8c8:	59 df       	rcall	.-334    	; 0x77c <toggle_e>
     8ca:	8f e1       	ldi	r24, 0x1F	; 31
     8cc:	9e e4       	ldi	r25, 0x4E	; 78
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	f1 f7       	brne	.-4      	; 0x8ce <lcd_init+0x20>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <lcd_init+0x26>
     8d4:	00 00       	nop
     8d6:	52 df       	rcall	.-348    	; 0x77c <toggle_e>
     8d8:	8f ef       	ldi	r24, 0xFF	; 255
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <lcd_init+0x2e>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <lcd_init+0x34>
     8e2:	00 00       	nop
     8e4:	4b df       	rcall	.-362    	; 0x77c <toggle_e>
     8e6:	8f ef       	ldi	r24, 0xFF	; 255
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	f1 f7       	brne	.-4      	; 0x8ea <lcd_init+0x3c>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <lcd_init+0x42>
    lcd_e_toggle();
     8f0:	00 00       	nop
     8f2:	10 98       	cbi	0x02, 0	; 2
     8f4:	43 df       	rcall	.-378    	; 0x77c <toggle_e>
     8f6:	8f ef       	ldi	r24, 0xFF	; 255
     8f8:	90 e0       	ldi	r25, 0x00	; 0
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     8fa:	01 97       	sbiw	r24, 0x01	; 1
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <lcd_init+0x4c>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <lcd_init+0x52>
    lcd_clrscr();                           /* display clear                */ 
     900:	00 00       	nop
     902:	88 e2       	ldi	r24, 0x28	; 40
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     904:	8b df       	rcall	.-234    	; 0x81c <lcd_command>
     906:	88 e0       	ldi	r24, 0x08	; 8
     908:	89 df       	rcall	.-238    	; 0x81c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     90a:	a2 df       	rcall	.-188    	; 0x850 <lcd_clrscr>
     90c:	86 e0       	ldi	r24, 0x06	; 6
     90e:	86 df       	rcall	.-244    	; 0x81c <lcd_command>

}/* lcd_init */
     910:	8c 2f       	mov	r24, r28
     912:	84 df       	rcall	.-248    	; 0x81c <lcd_command>
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <__vector_10>:
	
	TCNT0 = _TM0;
}

ISR(TIMER2_OVF_vect) //8 Hz
{
     918:	1f 92       	push	r1
     91a:	0f 92       	push	r0
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	0f 92       	push	r0
     920:	11 24       	eor	r1, r1
     922:	0b b6       	in	r0, 0x3b	; 59
     924:	0f 92       	push	r0
     926:	2f 93       	push	r18
     928:	3f 93       	push	r19
     92a:	4f 93       	push	r20
     92c:	5f 93       	push	r21
     92e:	6f 93       	push	r22
     930:	7f 93       	push	r23
     932:	8f 93       	push	r24
     934:	9f 93       	push	r25
     936:	af 93       	push	r26
     938:	bf 93       	push	r27
     93a:	ef 93       	push	r30
     93c:	ff 93       	push	r31
	//Reset counter and full refresh LCD
	TCNT2 = _TM2;
     93e:	80 ec       	ldi	r24, 0xC0	; 192
     940:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	lcd_refresh();
}
     944:	04 d3       	rcall	.+1544   	; 0xf4e <lcd_refresh>
     946:	ff 91       	pop	r31
     948:	ef 91       	pop	r30
     94a:	bf 91       	pop	r27
     94c:	af 91       	pop	r26
     94e:	9f 91       	pop	r25
     950:	8f 91       	pop	r24
     952:	7f 91       	pop	r23
     954:	6f 91       	pop	r22
     956:	5f 91       	pop	r21
     958:	4f 91       	pop	r20
     95a:	3f 91       	pop	r19
     95c:	2f 91       	pop	r18
     95e:	0f 90       	pop	r0
     960:	0b be       	out	0x3b, r0	; 59
     962:	0f 90       	pop	r0
     964:	0f be       	out	0x3f, r0	; 63
     966:	0f 90       	pop	r0
     968:	1f 90       	pop	r1
     96a:	18 95       	reti

0000096c <debounce>:

void debounce(uint8_t* btn, uint8_t val)
{
     96c:	fc 01       	movw	r30, r24
	if(*btn >= DEBOUNCE_TIME)
     96e:	90 81       	ld	r25, Z
     970:	98 30       	cpi	r25, 0x08	; 8
     972:	48 f4       	brcc	.+18     	; 0x986 <debounce+0x1a>
	{
		if(!val) btn = 0;
	}
	else if(*btn > 0)
     974:	99 23       	and	r25, r25
     976:	19 f0       	breq	.+6      	; 0x97e <debounce+0x12>
	{
		(*btn)++;
     978:	9f 5f       	subi	r25, 0xFF	; 255
     97a:	90 83       	st	Z, r25
     97c:	08 95       	ret
	}
	else
	{
		if(val) (*btn) = 1;
     97e:	66 23       	and	r22, r22
     980:	11 f0       	breq	.+4      	; 0x986 <debounce+0x1a>
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 83       	st	Z, r24
     986:	08 95       	ret

00000988 <__vector_17>:
void debounce(uint8_t* btn, uint8_t val);

uint8_t ttt = 0;

ISR(TIMER0_OVF_vect)
{
     988:	1f 92       	push	r1
     98a:	0f 92       	push	r0
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	0f 92       	push	r0
     990:	11 24       	eor	r1, r1
     992:	0b b6       	in	r0, 0x3b	; 59
     994:	0f 92       	push	r0
     996:	2f 93       	push	r18
     998:	3f 93       	push	r19
     99a:	4f 93       	push	r20
     99c:	5f 93       	push	r21
     99e:	6f 93       	push	r22
     9a0:	7f 93       	push	r23
     9a2:	8f 93       	push	r24
     9a4:	9f 93       	push	r25
     9a6:	af 93       	push	r26
     9a8:	bf 93       	push	r27
     9aa:	ef 93       	push	r30
     9ac:	ff 93       	push	r31
	data_send8(CAN_REQUEST_DATA, SHUTDOWN, ECU2ID);
     9ae:	45 e0       	ldi	r20, 0x05	; 5
     9b0:	52 e0       	ldi	r21, 0x02	; 2
     9b2:	61 e6       	ldi	r22, 0x61	; 97
     9b4:	8d e3       	ldi	r24, 0x3D	; 61
     9b6:	92 dc       	rcall	.-1756   	; 0x2dc <data_send8>
	
	if(shutdownon) return;
     9b8:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <shutdownon>
     9bc:	81 11       	cpse	r24, r1
     9be:	c1 c0       	rjmp	.+386    	; 0xb42 <__vector_17+0x1ba>
	
	debounce(&btnblue, PIND & (1<<BUTTONBLUE));
     9c0:	69 b1       	in	r22, 0x09	; 9
     9c2:	64 70       	andi	r22, 0x04	; 4
     9c4:	84 e4       	ldi	r24, 0x44	; 68
     9c6:	93 e0       	ldi	r25, 0x03	; 3
     9c8:	d1 df       	rcall	.-94     	; 0x96c <debounce>
	debounce(&btngreen, PIND & (1<<BUTTONGREEN));
     9ca:	69 b1       	in	r22, 0x09	; 9
     9cc:	68 70       	andi	r22, 0x08	; 8
     9ce:	83 e4       	ldi	r24, 0x43	; 67
     9d0:	93 e0       	ldi	r25, 0x03	; 3
     9d2:	cc df       	rcall	.-104    	; 0x96c <debounce>
	
	//Request gas/brake values
	switch(ttt)
     9d4:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
     9d8:	82 30       	cpi	r24, 0x02	; 2
     9da:	21 f1       	breq	.+72     	; 0xa24 <__vector_17+0x9c>
     9dc:	28 f4       	brcc	.+10     	; 0x9e8 <__vector_17+0x60>
     9de:	88 23       	and	r24, r24
     9e0:	49 f0       	breq	.+18     	; 0x9f4 <__vector_17+0x6c>
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	99 f0       	breq	.+38     	; 0xa0c <__vector_17+0x84>
     9e6:	29 c0       	rjmp	.+82     	; 0xa3a <__vector_17+0xb2>
     9e8:	84 30       	cpi	r24, 0x04	; 4
     9ea:	b1 f0       	breq	.+44     	; 0xa18 <__vector_17+0x90>
     9ec:	48 f0       	brcs	.+18     	; 0xa00 <__vector_17+0x78>
     9ee:	85 30       	cpi	r24, 0x05	; 5
     9f0:	f9 f0       	breq	.+62     	; 0xa30 <__vector_17+0xa8>
     9f2:	23 c0       	rjmp	.+70     	; 0xa3a <__vector_17+0xb2>
	{
		case 0:
			data_send8(CAN_REQUEST_DATA, RPM_FRONT_LEFT, NODEID1);
     9f4:	41 e0       	ldi	r20, 0x01	; 1
     9f6:	52 e0       	ldi	r21, 0x02	; 2
     9f8:	62 e1       	ldi	r22, 0x12	; 18
     9fa:	8d e3       	ldi	r24, 0x3D	; 61
     9fc:	6f dc       	rcall	.-1826   	; 0x2dc <data_send8>
			break;
		case 3:
			data_send8(CAN_REQUEST_DATA, GAS_1, NODEID2);
     9fe:	1d c0       	rjmp	.+58     	; 0xa3a <__vector_17+0xb2>
     a00:	42 e0       	ldi	r20, 0x02	; 2
     a02:	52 e0       	ldi	r21, 0x02	; 2
     a04:	61 e2       	ldi	r22, 0x21	; 33
			break;
		case 1:
			data_send8(CAN_REQUEST_DATA, RPM_FRONT_RIGHT, NODEID1);
     a06:	8d e3       	ldi	r24, 0x3D	; 61
     a08:	69 dc       	rcall	.-1838   	; 0x2dc <data_send8>
     a0a:	17 c0       	rjmp	.+46     	; 0xa3a <__vector_17+0xb2>
     a0c:	41 e0       	ldi	r20, 0x01	; 1
     a0e:	52 e0       	ldi	r21, 0x02	; 2
			break;
     a10:	63 e1       	ldi	r22, 0x13	; 19
		case 4:
			data_send8(CAN_REQUEST_DATA, GAS_2, NODEID2);
     a12:	8d e3       	ldi	r24, 0x3D	; 61
     a14:	63 dc       	rcall	.-1850   	; 0x2dc <data_send8>
     a16:	11 c0       	rjmp	.+34     	; 0xa3a <__vector_17+0xb2>
     a18:	42 e0       	ldi	r20, 0x02	; 2
     a1a:	52 e0       	ldi	r21, 0x02	; 2
			break;
     a1c:	62 e2       	ldi	r22, 0x22	; 34
		case 2:
			data_send8(CAN_REQUEST_DATA, STEERING_POS, NODEID1);
     a1e:	8d e3       	ldi	r24, 0x3D	; 61
     a20:	5d dc       	rcall	.-1862   	; 0x2dc <data_send8>
     a22:	0b c0       	rjmp	.+22     	; 0xa3a <__vector_17+0xb2>
     a24:	41 e0       	ldi	r20, 0x01	; 1
     a26:	52 e0       	ldi	r21, 0x02	; 2
			break;
     a28:	61 e1       	ldi	r22, 0x11	; 17
		case 5:
			data_send8(CAN_REQUEST_DATA, BRAKE, NODEID2);
     a2a:	8d e3       	ldi	r24, 0x3D	; 61
     a2c:	57 dc       	rcall	.-1874   	; 0x2dc <data_send8>
     a2e:	05 c0       	rjmp	.+10     	; 0xa3a <__vector_17+0xb2>
     a30:	42 e0       	ldi	r20, 0x02	; 2
     a32:	52 e0       	ldi	r21, 0x02	; 2
			break;
	}
	
	if(_errorcode != ERROR_NONE) change_screen(SCREEN_ERROR);
     a34:	63 e2       	ldi	r22, 0x23	; 35
     a36:	8d e3       	ldi	r24, 0x3D	; 61
     a38:	51 dc       	rcall	.-1886   	; 0x2dc <data_send8>
     a3a:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <_errorcode>
     a3e:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <_errorcode+0x1>
     a42:	89 2b       	or	r24, r25
     a44:	11 f0       	breq	.+4      	; 0xa4a <__vector_17+0xc2>
	
	switch(ui_current_screen)
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	89 d2       	rcall	.+1298   	; 0xf5c <change_screen>
     a4a:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <ui_current_screen>
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	c9 f0       	breq	.+50     	; 0xa84 <__vector_17+0xfc>
     a52:	18 f4       	brcc	.+6      	; 0xa5a <__vector_17+0xd2>
     a54:	88 23       	and	r24, r24
     a56:	39 f0       	breq	.+14     	; 0xa66 <__vector_17+0xde>
     a58:	69 c0       	rjmp	.+210    	; 0xb2c <__vector_17+0x1a4>
     a5a:	83 30       	cpi	r24, 0x03	; 3
     a5c:	d1 f1       	breq	.+116    	; 0xad2 <__vector_17+0x14a>
     a5e:	84 30       	cpi	r24, 0x04	; 4
     a60:	09 f4       	brne	.+2      	; 0xa64 <__vector_17+0xdc>
	{
		case SCREEN_WELCOME:
			if(btnblue == 1)
     a62:	4f c0       	rjmp	.+158    	; 0xb02 <__vector_17+0x17a>
     a64:	63 c0       	rjmp	.+198    	; 0xb2c <__vector_17+0x1a4>
     a66:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <btnblue>
			{
				if(_errorcode == ERROR_NONE) change_screen(SCREEN_START);
     a6a:	81 30       	cpi	r24, 0x01	; 1
     a6c:	09 f0       	breq	.+2      	; 0xa70 <__vector_17+0xe8>
     a6e:	5e c0       	rjmp	.+188    	; 0xb2c <__vector_17+0x1a4>
     a70:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <_errorcode>
     a74:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <_errorcode+0x1>
     a78:	89 2b       	or	r24, r25
     a7a:	09 f0       	breq	.+2      	; 0xa7e <__vector_17+0xf6>
     a7c:	57 c0       	rjmp	.+174    	; 0xb2c <__vector_17+0x1a4>
     a7e:	83 e0       	ldi	r24, 0x03	; 3
			}
			break;
		
		case SCREEN_PREDISCHARGING:
			if(predistimer-- == 0)
     a80:	6d d2       	rcall	.+1242   	; 0xf5c <change_screen>
     a82:	54 c0       	rjmp	.+168    	; 0xb2c <__vector_17+0x1a4>
     a84:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a88:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     a8c:	9c 01       	movw	r18, r24
     a8e:	21 50       	subi	r18, 0x01	; 1
     a90:	31 09       	sbc	r19, r1
     a92:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
     a96:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
			{
				//data_send_ecu(MOTOR_CONTROLLER, _HIGH);
				change_screen(SCREEN_DRIVING);
     a9a:	89 2b       	or	r24, r25
     a9c:	19 f4       	brne	.+6      	; 0xaa4 <__vector_17+0x11c>
			}
			else if(predistimer == PREDISCHARGE_TIMER - 1900)
     a9e:	84 e0       	ldi	r24, 0x04	; 4
     aa0:	5d d2       	rcall	.+1210   	; 0xf5c <change_screen>
     aa2:	44 c0       	rjmp	.+136    	; 0xb2c <__vector_17+0x1a4>
     aa4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     aa8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
			{
				data_send8(CAN_REQUEST_DATA, FLOW_LEFT, NODEID3);
     aac:	84 3a       	cpi	r24, 0xA4	; 164
     aae:	9f 41       	sbci	r25, 0x1F	; 31
     ab0:	59 f4       	brne	.+22     	; 0xac8 <__vector_17+0x140>
     ab2:	43 e0       	ldi	r20, 0x03	; 3
     ab4:	52 e0       	ldi	r21, 0x02	; 2
				data_send8(CAN_REQUEST_DATA, FLOW_RIGHT, NODEID4);
     ab6:	61 e3       	ldi	r22, 0x31	; 49
     ab8:	8d e3       	ldi	r24, 0x3D	; 61
     aba:	10 dc       	rcall	.-2016   	; 0x2dc <data_send8>
     abc:	44 e0       	ldi	r20, 0x04	; 4
     abe:	52 e0       	ldi	r21, 0x02	; 2
			}
			else if(predistimer == PREDISCHARGE_TIMER - 2000)
     ac0:	61 e4       	ldi	r22, 0x41	; 65
     ac2:	8d e3       	ldi	r24, 0x3D	; 61
     ac4:	0b dc       	rcall	.-2026   	; 0x2dc <data_send8>
     ac6:	32 c0       	rjmp	.+100    	; 0xb2c <__vector_17+0x1a4>
				//e_checkflow();
			}
			break;
		
		case SCREEN_START:
			if(btngreen == 1)
     ac8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     acc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
			{
				e_checksensors();
     ad0:	2d c0       	rjmp	.+90     	; 0xb2c <__vector_17+0x1a4>
     ad2:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <btngreen>
				e_checkranges();
				
				if(_errorcode == ERROR_NONE)
     ad6:	81 30       	cpi	r24, 0x01	; 1
     ad8:	49 f5       	brne	.+82     	; 0xb2c <__vector_17+0x1a4>
     ada:	22 de       	rcall	.-956    	; 0x720 <e_checksensors>
     adc:	ee dd       	rcall	.-1060   	; 0x6ba <e_checkranges>
     ade:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <_errorcode>
				{
					//data_send_ecu(PREDISCHARGE, _HIGH);
					change_screen(SCREEN_PREDISCHARGING);
     ae2:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <_errorcode+0x1>
					
					readybeep = RTDS_TIME;
     ae6:	89 2b       	or	r24, r25
     ae8:	09 f5       	brne	.+66     	; 0xb2c <__vector_17+0x1a4>
     aea:	82 e0       	ldi	r24, 0x02	; 2
     aec:	37 d2       	rcall	.+1134   	; 0xf5c <change_screen>
					// TODO: Uncomment when beep should be implemented
					//PORTC |= 1 << RTDS
					
					//data_send_ecu(RUN_ENABLE, _HIGH);
					data_send_ecu(PUMP_ENABLE, _HIGH);
     aee:	80 ed       	ldi	r24, 0xD0	; 208
     af0:	97 e0       	ldi	r25, 0x07	; 7
     af2:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <readybeep+0x1>
			break;
		
		case SCREEN_DRIVING:
			if(ttt == 1)
			{
				data_send8(CAN_REQUEST_DATA, FLOW_LEFT, NODEID3);
     af6:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <readybeep>
     afa:	6f ef       	ldi	r22, 0xFF	; 255
     afc:	89 e5       	ldi	r24, 0x59	; 89
     afe:	fd db       	rcall	.-2054   	; 0x2fa <data_send_ecu>
				data_send8(CAN_REQUEST_DATA, FLOW_RIGHT, NODEID4);
     b00:	15 c0       	rjmp	.+42     	; 0xb2c <__vector_17+0x1a4>
     b02:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
     b06:	81 30       	cpi	r24, 0x01	; 1
     b08:	51 f4       	brne	.+20     	; 0xb1e <__vector_17+0x196>
     b0a:	43 e0       	ldi	r20, 0x03	; 3
			}
			if(ttt == 3)
     b0c:	52 e0       	ldi	r21, 0x02	; 2
     b0e:	61 e3       	ldi	r22, 0x31	; 49
     b10:	8d e3       	ldi	r24, 0x3D	; 61
     b12:	e4 db       	rcall	.-2104   	; 0x2dc <data_send8>
			{
				//e_checkflow();
				e_checksensors();
     b14:	44 e0       	ldi	r20, 0x04	; 4
     b16:	52 e0       	ldi	r21, 0x02	; 2
				e_checkranges();
     b18:	61 e4       	ldi	r22, 0x41	; 65
     b1a:	8d e3       	ldi	r24, 0x3D	; 61
				e_checkdiscrepancy();	
     b1c:	df db       	rcall	.-2114   	; 0x2dc <data_send8>
     b1e:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
		case SCREEN_STATUS:
		default:
			break;
	}
	
	ttt = (ttt + 1) % 6;
     b22:	83 30       	cpi	r24, 0x03	; 3
     b24:	19 f4       	brne	.+6      	; 0xb2c <__vector_17+0x1a4>
     b26:	fc dd       	rcall	.-1032   	; 0x720 <e_checksensors>
     b28:	c8 dd       	rcall	.-1136   	; 0x6ba <e_checkranges>
     b2a:	ea dd       	rcall	.-1068   	; 0x700 <e_checkdiscrepancy>
     b2c:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	01 96       	adiw	r24, 0x01	; 1
		// TODO: Uncomment when beep should be implemented
		//PORTC &= ~(1<<RTDS);
		readybeep = 0;
	}//*/
	
	TCNT0 = _TM0;
     b34:	66 e0       	ldi	r22, 0x06	; 6
     b36:	70 e0       	ldi	r23, 0x00	; 0
}
     b38:	15 d2       	rcall	.+1066   	; 0xf64 <__divmodhi4>
     b3a:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <__data_end>
     b3e:	80 ec       	ldi	r24, 0xC0	; 192
     b40:	86 bd       	out	0x26, r24	; 38
     b42:	ff 91       	pop	r31
     b44:	ef 91       	pop	r30
     b46:	bf 91       	pop	r27
     b48:	af 91       	pop	r26
     b4a:	9f 91       	pop	r25
     b4c:	8f 91       	pop	r24
     b4e:	7f 91       	pop	r23
     b50:	6f 91       	pop	r22
     b52:	5f 91       	pop	r21
     b54:	4f 91       	pop	r20
     b56:	3f 91       	pop	r19
     b58:	2f 91       	pop	r18
     b5a:	0f 90       	pop	r0
     b5c:	0b be       	out	0x3b, r0	; 59
     b5e:	0f 90       	pop	r0
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	0f 90       	pop	r0
     b64:	1f 90       	pop	r1
     b66:	18 95       	reti

00000b68 <main>:
	}
}

int main()
{
	lcd_init(LCD_DISP_ON);
     b68:	8c e0       	ldi	r24, 0x0C	; 12
	change_screen(SCREEN_STATUS);
     b6a:	a1 de       	rcall	.-702    	; 0x8ae <lcd_init>
     b6c:	85 e0       	ldi	r24, 0x05	; 5
	
	//Initialize timer0
	TCCR0A |= (1 << CS02);// || (1 << CS01);	//Prescaler
     b6e:	f6 d1       	rcall	.+1004   	; 0xf5c <change_screen>
     b70:	84 b5       	in	r24, 0x24	; 36
     b72:	84 60       	ori	r24, 0x04	; 4
	TCNT0 = _TM0;							//Set initial counter value
     b74:	84 bd       	out	0x24, r24	; 36
     b76:	90 ec       	ldi	r25, 0xC0	; 192
	TIMSK0 |= (1 << TOIE0);					//Overflow Interrupt Enable
     b78:	96 bd       	out	0x26, r25	; 38
     b7a:	ee e6       	ldi	r30, 0x6E	; 110
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	81 60       	ori	r24, 0x01	; 1
	
	//Initialize timer2
	ASSR  = (1<< AS2);						//Enable asynchronous mode
     b82:	80 83       	st	Z, r24
     b84:	88 e0       	ldi	r24, 0x08	; 8
     b86:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	TCNT2 = _TM2;							//Set initial counter value
     b8a:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	TCCR2A |= (1 << CS01)|(1 << CS00);		//Prescaler
     b8e:	e0 eb       	ldi	r30, 0xB0	; 176
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	83 60       	ori	r24, 0x03	; 3
	TIFR2   = (1 << TOV2);					//Clear interrupt flags
     b96:	80 83       	st	Z, r24
	TIMSK2  = (1 << TOIE2);					//Overflow interrupt enable
     b98:	81 e0       	ldi	r24, 0x01	; 1
	
	can_init();
     b9a:	87 bb       	out	0x17, r24	; 23
	can_rx(MASTERID);
     b9c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     ba0:	f4 da       	rcall	.-2584   	; 0x18a <can_init>
     ba2:	87 e1       	ldi	r24, 0x17	; 23
	
	//Set CPU into sleep mode(simultaneously enabling interrupts)
	set_sleep_mode(SLEEP_MODE_IDLE);
     ba4:	93 e0       	ldi	r25, 0x03	; 3
     ba6:	1f db       	rcall	.-2498   	; 0x1e6 <can_rx>
     ba8:	83 b7       	in	r24, 0x33	; 51
	sleep_enable();
     baa:	81 7f       	andi	r24, 0xF1	; 241
     bac:	83 bf       	out	0x33, r24	; 51
     bae:	83 b7       	in	r24, 0x33	; 51
	sei();
     bb0:	81 60       	ori	r24, 0x01	; 1
	sleep_cpu();
     bb2:	83 bf       	out	0x33, r24	; 51
     bb4:	78 94       	sei
     bb6:	88 95       	sleep
     bb8:	ff cf       	rjmp	.-2      	; 0xbb8 <main+0x50>

00000bba <lcd_quickrefresh>:

	lcd_quickrefresh();
}

void lcd_quickrefresh()
{
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	05 e7       	ldi	r16, 0x75	; 117
     bc2:	13 e0       	ldi	r17, 0x03	; 3
	//Write the current line buffer into their respective LCD lines
	for(uint8_t y = 0; y < 4; y++)
     bc4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd_gotoxy(0, y);
     bc6:	6c 2f       	mov	r22, r28
     bc8:	80 e0       	ldi	r24, 0x00	; 0
		lcd_puts(Linebuffer[y]);
     bca:	30 de       	rcall	.-928    	; 0x82c <lcd_gotoxy>
     bcc:	c8 01       	movw	r24, r16
}

void lcd_quickrefresh()
{
	//Write the current line buffer into their respective LCD lines
	for(uint8_t y = 0; y < 4; y++)
     bce:	60 de       	rcall	.-832    	; 0x890 <lcd_puts>
     bd0:	cf 5f       	subi	r28, 0xFF	; 255
     bd2:	0b 5e       	subi	r16, 0xEB	; 235
     bd4:	1f 4f       	sbci	r17, 0xFF	; 255
     bd6:	c4 30       	cpi	r28, 0x04	; 4
	{
		lcd_gotoxy(0, y);
		lcd_puts(Linebuffer[y]);
	}
}
     bd8:	b1 f7       	brne	.-20     	; 0xbc6 <lcd_quickrefresh+0xc>
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	08 95       	ret

00000be2 <get_screen>:
	ui_current_screen = s;
	lcd_refresh();	
}

void get_screen(char buffer[4][21], enum uiscreen s)
{
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	ec 01       	movw	r28, r24
	switch(s)
     bea:	62 30       	cpi	r22, 0x02	; 2
     bec:	09 f4       	brne	.+2      	; 0xbf0 <get_screen+0xe>
     bee:	63 c0       	rjmp	.+198    	; 0xcb6 <get_screen+0xd4>
     bf0:	28 f4       	brcc	.+10     	; 0xbfc <get_screen+0x1a>
     bf2:	66 23       	and	r22, r22
     bf4:	61 f0       	breq	.+24     	; 0xc0e <get_screen+0x2c>
     bf6:	61 30       	cpi	r22, 0x01	; 1
     bf8:	71 f1       	breq	.+92     	; 0xc56 <get_screen+0x74>
     bfa:	82 c1       	rjmp	.+772    	; 0xf00 <get_screen+0x31e>
     bfc:	64 30       	cpi	r22, 0x04	; 4
     bfe:	09 f4       	brne	.+2      	; 0xc02 <get_screen+0x20>
     c00:	df c0       	rjmp	.+446    	; 0xdc0 <get_screen+0x1de>
     c02:	08 f4       	brcc	.+2      	; 0xc06 <get_screen+0x24>
     c04:	9b c0       	rjmp	.+310    	; 0xd3c <get_screen+0x15a>
     c06:	65 30       	cpi	r22, 0x05	; 5
     c08:	09 f4       	brne	.+2      	; 0xc0c <get_screen+0x2a>
     c0a:	1c c1       	rjmp	.+568    	; 0xe44 <get_screen+0x262>
     c0c:	79 c1       	rjmp	.+754    	; 0xf00 <get_screen+0x31e>
	{
		case SCREEN_WELCOME:
			snprintf(buffer[0], sizeof buffer[0], "        HU-2        ");
     c0e:	85 e1       	ldi	r24, 0x15	; 21
     c10:	ea ed       	ldi	r30, 0xDA	; 218
     c12:	f1 e0       	ldi	r31, 0x01	; 1
     c14:	de 01       	movw	r26, r28
     c16:	01 90       	ld	r0, Z+
     c18:	0d 92       	st	X+, r0
     c1a:	8a 95       	dec	r24
     c1c:	e1 f7       	brne	.-8      	; 0xc16 <get_screen+0x34>
			snprintf(buffer[1], sizeof buffer[1], SOFTWARE_VERSION);
     c1e:	de 01       	movw	r26, r28
     c20:	55 96       	adiw	r26, 0x15	; 21
     c22:	80 e1       	ldi	r24, 0x10	; 16
     c24:	ef ee       	ldi	r30, 0xEF	; 239
     c26:	f1 e0       	ldi	r31, 0x01	; 1
     c28:	01 90       	ld	r0, Z+
     c2a:	0d 92       	st	X+, r0
     c2c:	8a 95       	dec	r24
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <get_screen+0x46>
			snprintf(buffer[2], sizeof buffer[2], "                    ");
     c30:	de 01       	movw	r26, r28
     c32:	9a 96       	adiw	r26, 0x2a	; 42
     c34:	85 e1       	ldi	r24, 0x15	; 21
     c36:	ef ef       	ldi	r30, 0xFF	; 255
     c38:	f1 e0       	ldi	r31, 0x01	; 1
     c3a:	01 90       	ld	r0, Z+
     c3c:	0d 92       	st	X+, r0
     c3e:	8a 95       	dec	r24
     c40:	e1 f7       	brne	.-8      	; 0xc3a <get_screen+0x58>
			snprintf(buffer[3], sizeof buffer[3], " Press blue button  ");
     c42:	de 01       	movw	r26, r28
     c44:	df 96       	adiw	r26, 0x3f	; 63
     c46:	85 e1       	ldi	r24, 0x15	; 21
     c48:	e4 e1       	ldi	r30, 0x14	; 20
     c4a:	f2 e0       	ldi	r31, 0x02	; 2
     c4c:	01 90       	ld	r0, Z+
     c4e:	0d 92       	st	X+, r0
     c50:	8a 95       	dec	r24
     c52:	e1 f7       	brne	.-8      	; 0xc4c <get_screen+0x6a>
			break;
     c54:	78 c1       	rjmp	.+752    	; 0xf46 <get_screen+0x364>

		case SCREEN_ERROR:
			snprintf(buffer[0], sizeof buffer[0], "     !!!ERROR!!!    ");
     c56:	85 e1       	ldi	r24, 0x15	; 21
     c58:	e9 e2       	ldi	r30, 0x29	; 41
     c5a:	f2 e0       	ldi	r31, 0x02	; 2
     c5c:	de 01       	movw	r26, r28
     c5e:	01 90       	ld	r0, Z+
     c60:	0d 92       	st	X+, r0
     c62:	8a 95       	dec	r24
     c64:	e1 f7       	brne	.-8      	; 0xc5e <get_screen+0x7c>
			snprintf(buffer[1], sizeof buffer[1], get_error(_errorcode));
     c66:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <_errorcode>
     c6a:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <_errorcode+0x1>
     c6e:	f9 dc       	rcall	.-1550   	; 0x662 <get_error>
     c70:	9f 93       	push	r25
     c72:	8f 93       	push	r24
     c74:	1f 92       	push	r1
     c76:	85 e1       	ldi	r24, 0x15	; 21
     c78:	8f 93       	push	r24
     c7a:	ce 01       	movw	r24, r28
     c7c:	45 96       	adiw	r24, 0x15	; 21
     c7e:	9f 93       	push	r25
     c80:	8f 93       	push	r24
     c82:	ed d1       	rcall	.+986    	; 0x105e <snprintf>
			snprintf(buffer[2], sizeof buffer[2], "                    ");
     c84:	de 01       	movw	r26, r28
     c86:	9a 96       	adiw	r26, 0x2a	; 42
     c88:	85 e1       	ldi	r24, 0x15	; 21
     c8a:	ef ef       	ldi	r30, 0xFF	; 255
     c8c:	f1 e0       	ldi	r31, 0x01	; 1
     c8e:	01 90       	ld	r0, Z+
     c90:	0d 92       	st	X+, r0
     c92:	8a 95       	dec	r24
     c94:	e1 f7       	brne	.-8      	; 0xc8e <get_screen+0xac>
			snprintf(buffer[3], sizeof buffer[3], "                    ");
     c96:	de 01       	movw	r26, r28
     c98:	df 96       	adiw	r26, 0x3f	; 63
     c9a:	85 e1       	ldi	r24, 0x15	; 21
     c9c:	ef ef       	ldi	r30, 0xFF	; 255
     c9e:	f1 e0       	ldi	r31, 0x01	; 1
     ca0:	01 90       	ld	r0, Z+
     ca2:	0d 92       	st	X+, r0
     ca4:	8a 95       	dec	r24
     ca6:	e1 f7       	brne	.-8      	; 0xca0 <get_screen+0xbe>
			break;
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	48 c1       	rjmp	.+656    	; 0xf46 <get_screen+0x364>

		case SCREEN_PREDISCHARGING:
			snprintf(buffer[0], sizeof buffer[0], " Precharging...     ");
     cb6:	85 e1       	ldi	r24, 0x15	; 21
     cb8:	ee e3       	ldi	r30, 0x3E	; 62
     cba:	f2 e0       	ldi	r31, 0x02	; 2
     cbc:	de 01       	movw	r26, r28
     cbe:	01 90       	ld	r0, Z+
     cc0:	0d 92       	st	X+, r0
     cc2:	8a 95       	dec	r24
     cc4:	e1 f7       	brne	.-8      	; 0xcbe <get_screen+0xdc>
			snprintf(buffer[1], sizeof buffer[1], " %5d              ", predistimer);
     cc6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     cca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     cce:	9f 93       	push	r25
     cd0:	8f 93       	push	r24
     cd2:	83 e5       	ldi	r24, 0x53	; 83
     cd4:	92 e0       	ldi	r25, 0x02	; 2
     cd6:	9f 93       	push	r25
     cd8:	8f 93       	push	r24
     cda:	1f 92       	push	r1
     cdc:	15 e1       	ldi	r17, 0x15	; 21
     cde:	1f 93       	push	r17
     ce0:	ce 01       	movw	r24, r28
     ce2:	45 96       	adiw	r24, 0x15	; 21
     ce4:	9f 93       	push	r25
     ce6:	8f 93       	push	r24
     ce8:	ba d1       	rcall	.+884    	; 0x105e <snprintf>
			snprintf(buffer[2], sizeof buffer[2], "                    ");
     cea:	de 01       	movw	r26, r28
     cec:	9a 96       	adiw	r26, 0x2a	; 42
     cee:	85 e1       	ldi	r24, 0x15	; 21
     cf0:	ef ef       	ldi	r30, 0xFF	; 255
     cf2:	f1 e0       	ldi	r31, 0x01	; 1
     cf4:	01 90       	ld	r0, Z+
     cf6:	0d 92       	st	X+, r0
     cf8:	8a 95       	dec	r24
     cfa:	e1 f7       	brne	.-8      	; 0xcf4 <get_screen+0x112>
			snprintf(buffer[3], sizeof buffer[3], "Flow: L%5d  R%5d", flowleft, flowright);
     cfc:	20 91 47 03 	lds	r18, 0x0347	; 0x800347 <flowright>
     d00:	30 91 48 03 	lds	r19, 0x0348	; 0x800348 <flowright+0x1>
     d04:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <flowleft>
     d08:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <flowleft+0x1>
     d0c:	3f 93       	push	r19
     d0e:	2f 93       	push	r18
     d10:	9f 93       	push	r25
     d12:	8f 93       	push	r24
     d14:	86 e6       	ldi	r24, 0x66	; 102
     d16:	92 e0       	ldi	r25, 0x02	; 2
     d18:	9f 93       	push	r25
     d1a:	8f 93       	push	r24
     d1c:	1f 92       	push	r1
     d1e:	1f 93       	push	r17
     d20:	de 01       	movw	r26, r28
     d22:	df 96       	adiw	r26, 0x3f	; 63
     d24:	bf 93       	push	r27
     d26:	af 93       	push	r26
     d28:	9a d1       	rcall	.+820    	; 0x105e <snprintf>
			break;
     d2a:	8d b7       	in	r24, 0x3d	; 61
     d2c:	9e b7       	in	r25, 0x3e	; 62
     d2e:	42 96       	adiw	r24, 0x12	; 18
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	9e bf       	out	0x3e, r25	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	8d bf       	out	0x3d, r24	; 61
     d3a:	05 c1       	rjmp	.+522    	; 0xf46 <get_screen+0x364>

		case SCREEN_START:
			snprintf(buffer[0], sizeof buffer[0], "Gas1:%4d Gas2:%4d", gas1, gas2);
     d3c:	20 91 5e 03 	lds	r18, 0x035E	; 0x80035e <gas2>
     d40:	30 91 5f 03 	lds	r19, 0x035F	; 0x80035f <gas2+0x1>
     d44:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <gas1>
     d48:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <gas1+0x1>
     d4c:	3f 93       	push	r19
     d4e:	2f 93       	push	r18
     d50:	9f 93       	push	r25
     d52:	8f 93       	push	r24
     d54:	87 e7       	ldi	r24, 0x77	; 119
     d56:	92 e0       	ldi	r25, 0x02	; 2
     d58:	9f 93       	push	r25
     d5a:	8f 93       	push	r24
     d5c:	1f 92       	push	r1
     d5e:	15 e1       	ldi	r17, 0x15	; 21
     d60:	1f 93       	push	r17
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	7b d1       	rcall	.+758    	; 0x105e <snprintf>
			snprintf(buffer[1], sizeof buffer[1], "Brake:%4d          ", brake);
     d68:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <brake>
     d6c:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <brake+0x1>
     d70:	9f 93       	push	r25
     d72:	8f 93       	push	r24
     d74:	89 e8       	ldi	r24, 0x89	; 137
     d76:	92 e0       	ldi	r25, 0x02	; 2
     d78:	9f 93       	push	r25
     d7a:	8f 93       	push	r24
     d7c:	1f 92       	push	r1
     d7e:	1f 93       	push	r17
     d80:	ce 01       	movw	r24, r28
     d82:	45 96       	adiw	r24, 0x15	; 21
     d84:	9f 93       	push	r25
     d86:	8f 93       	push	r24
     d88:	6a d1       	rcall	.+724    	; 0x105e <snprintf>
			snprintf(buffer[2], sizeof buffer[2], "                    ");
     d8a:	de 01       	movw	r26, r28
     d8c:	9a 96       	adiw	r26, 0x2a	; 42
     d8e:	85 e1       	ldi	r24, 0x15	; 21
     d90:	ef ef       	ldi	r30, 0xFF	; 255
     d92:	f1 e0       	ldi	r31, 0x01	; 1
     d94:	01 90       	ld	r0, Z+
     d96:	0d 92       	st	X+, r0
     d98:	8a 95       	dec	r24
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <get_screen+0x1b2>
			snprintf(buffer[3], sizeof buffer[3], "Press green to begin");
     d9c:	de 01       	movw	r26, r28
     d9e:	df 96       	adiw	r26, 0x3f	; 63
     da0:	85 e1       	ldi	r24, 0x15	; 21
     da2:	ed e9       	ldi	r30, 0x9D	; 157
     da4:	f2 e0       	ldi	r31, 0x02	; 2
     da6:	01 90       	ld	r0, Z+
     da8:	0d 92       	st	X+, r0
     daa:	8a 95       	dec	r24
     dac:	e1 f7       	brne	.-8      	; 0xda6 <get_screen+0x1c4>
			break;
     dae:	8d b7       	in	r24, 0x3d	; 61
     db0:	9e b7       	in	r25, 0x3e	; 62
     db2:	42 96       	adiw	r24, 0x12	; 18
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	9e bf       	out	0x3e, r25	; 62
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	8d bf       	out	0x3d, r24	; 61
     dbe:	c3 c0       	rjmp	.+390    	; 0xf46 <get_screen+0x364>

		case SCREEN_DRIVING:
			snprintf(buffer[0], sizeof buffer[0], "Gas1:%3d%%, Gas2:%3d%%", gas1perc, gas2perc);
     dc0:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <gas2perc>
     dc4:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <gas2perc+0x1>
     dc8:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <gas1perc>
     dcc:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <gas1perc+0x1>
     dd0:	3f 93       	push	r19
     dd2:	2f 93       	push	r18
     dd4:	9f 93       	push	r25
     dd6:	8f 93       	push	r24
     dd8:	82 eb       	ldi	r24, 0xB2	; 178
     dda:	92 e0       	ldi	r25, 0x02	; 2
     ddc:	9f 93       	push	r25
     dde:	8f 93       	push	r24
     de0:	1f 92       	push	r1
     de2:	15 e1       	ldi	r17, 0x15	; 21
     de4:	1f 93       	push	r17
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	39 d1       	rcall	.+626    	; 0x105e <snprintf>
			snprintf(buffer[1], sizeof buffer[1], "Brake:%3d%%          ", brakeperc);
     dec:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <brakeperc>
     df0:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <brakeperc+0x1>
     df4:	9f 93       	push	r25
     df6:	8f 93       	push	r24
     df8:	89 ec       	ldi	r24, 0xC9	; 201
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	9f 93       	push	r25
     dfe:	8f 93       	push	r24
     e00:	1f 92       	push	r1
     e02:	1f 93       	push	r17
     e04:	ce 01       	movw	r24, r28
     e06:	45 96       	adiw	r24, 0x15	; 21
     e08:	9f 93       	push	r25
     e0a:	8f 93       	push	r24
     e0c:	28 d1       	rcall	.+592    	; 0x105e <snprintf>
			snprintf(buffer[2], sizeof buffer[2], "                    ");
     e0e:	de 01       	movw	r26, r28
     e10:	9a 96       	adiw	r26, 0x2a	; 42
     e12:	85 e1       	ldi	r24, 0x15	; 21
     e14:	ef ef       	ldi	r30, 0xFF	; 255
     e16:	f1 e0       	ldi	r31, 0x01	; 1
     e18:	01 90       	ld	r0, Z+
     e1a:	0d 92       	st	X+, r0
     e1c:	8a 95       	dec	r24
     e1e:	e1 f7       	brne	.-8      	; 0xe18 <get_screen+0x236>
			snprintf(buffer[3], sizeof buffer[3], "                    ");
     e20:	de 01       	movw	r26, r28
     e22:	df 96       	adiw	r26, 0x3f	; 63
     e24:	85 e1       	ldi	r24, 0x15	; 21
     e26:	ef ef       	ldi	r30, 0xFF	; 255
     e28:	f1 e0       	ldi	r31, 0x01	; 1
     e2a:	01 90       	ld	r0, Z+
     e2c:	0d 92       	st	X+, r0
     e2e:	8a 95       	dec	r24
     e30:	e1 f7       	brne	.-8      	; 0xe2a <get_screen+0x248>
			break;
     e32:	8d b7       	in	r24, 0x3d	; 61
     e34:	9e b7       	in	r25, 0x3e	; 62
     e36:	42 96       	adiw	r24, 0x12	; 18
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	9e bf       	out	0x3e, r25	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	8d bf       	out	0x3d, r24	; 61
     e42:	81 c0       	rjmp	.+258    	; 0xf46 <get_screen+0x364>

		case SCREEN_STATUS:
			snprintf(buffer[0], sizeof buffer[0], "Flow: L%5d  R%5d", flowleft, flowright);
     e44:	20 91 47 03 	lds	r18, 0x0347	; 0x800347 <flowright>
     e48:	30 91 48 03 	lds	r19, 0x0348	; 0x800348 <flowright+0x1>
     e4c:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <flowleft>
     e50:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <flowleft+0x1>
     e54:	3f 93       	push	r19
     e56:	2f 93       	push	r18
     e58:	9f 93       	push	r25
     e5a:	8f 93       	push	r24
     e5c:	86 e6       	ldi	r24, 0x66	; 102
     e5e:	92 e0       	ldi	r25, 0x02	; 2
     e60:	9f 93       	push	r25
     e62:	8f 93       	push	r24
     e64:	1f 92       	push	r1
     e66:	15 e1       	ldi	r17, 0x15	; 21
     e68:	1f 93       	push	r17
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	f7 d0       	rcall	.+494    	; 0x105e <snprintf>
			snprintf(buffer[1], sizeof buffer[1], "Rpm: FL%5d FR%5d", rpm_fl, rpm_fr);
     e70:	20 91 4d 03 	lds	r18, 0x034D	; 0x80034d <rpm_fr>
     e74:	30 91 4e 03 	lds	r19, 0x034E	; 0x80034e <rpm_fr+0x1>
     e78:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <rpm_fl>
     e7c:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <rpm_fl+0x1>
     e80:	3f 93       	push	r19
     e82:	2f 93       	push	r18
     e84:	9f 93       	push	r25
     e86:	8f 93       	push	r24
     e88:	8f ed       	ldi	r24, 0xDF	; 223
     e8a:	92 e0       	ldi	r25, 0x02	; 2
     e8c:	9f 93       	push	r25
     e8e:	8f 93       	push	r24
     e90:	1f 92       	push	r1
     e92:	1f 93       	push	r17
     e94:	ce 01       	movw	r24, r28
     e96:	45 96       	adiw	r24, 0x15	; 21
     e98:	9f 93       	push	r25
     e9a:	8f 93       	push	r24
     e9c:	e0 d0       	rcall	.+448    	; 0x105e <snprintf>
			snprintf(buffer[2], sizeof buffer[2], "Gas1:%3d%%, Gas2:%3d%%", gas1perc, gas2perc);
     e9e:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <gas2perc>
     ea2:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <gas2perc+0x1>
     ea6:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <gas1perc>
     eaa:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <gas1perc+0x1>
     eae:	3f 93       	push	r19
     eb0:	2f 93       	push	r18
     eb2:	9f 93       	push	r25
     eb4:	8f 93       	push	r24
     eb6:	82 eb       	ldi	r24, 0xB2	; 178
     eb8:	92 e0       	ldi	r25, 0x02	; 2
     eba:	9f 93       	push	r25
     ebc:	8f 93       	push	r24
     ebe:	1f 92       	push	r1
     ec0:	1f 93       	push	r17
     ec2:	ce 01       	movw	r24, r28
     ec4:	8a 96       	adiw	r24, 0x2a	; 42
     ec6:	9f 93       	push	r25
     ec8:	8f 93       	push	r24
     eca:	c9 d0       	rcall	.+402    	; 0x105e <snprintf>
			snprintf(buffer[3], sizeof buffer[3], "Steerpos: %5d     ", steerpos);
     ecc:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <steerpos>
     ed0:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <steerpos+0x1>
     ed4:	9f 93       	push	r25
     ed6:	8f 93       	push	r24
     ed8:	80 ef       	ldi	r24, 0xF0	; 240
     eda:	92 e0       	ldi	r25, 0x02	; 2
     edc:	9f 93       	push	r25
     ede:	8f 93       	push	r24
     ee0:	1f 92       	push	r1
     ee2:	1f 93       	push	r17
     ee4:	de 01       	movw	r26, r28
     ee6:	df 96       	adiw	r26, 0x3f	; 63
     ee8:	bf 93       	push	r27
     eea:	af 93       	push	r26
     eec:	b8 d0       	rcall	.+368    	; 0x105e <snprintf>
			break;
     eee:	8d b7       	in	r24, 0x3d	; 61
     ef0:	9e b7       	in	r25, 0x3e	; 62
     ef2:	86 96       	adiw	r24, 0x26	; 38
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	9e bf       	out	0x3e, r25	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	8d bf       	out	0x3d, r24	; 61
     efe:	23 c0       	rjmp	.+70     	; 0xf46 <get_screen+0x364>

		default:
			snprintf(buffer[0], sizeof buffer[0], " Unknown screen ID  ");
     f00:	85 e1       	ldi	r24, 0x15	; 21
     f02:	e3 e0       	ldi	r30, 0x03	; 3
     f04:	f3 e0       	ldi	r31, 0x03	; 3
     f06:	de 01       	movw	r26, r28
     f08:	01 90       	ld	r0, Z+
     f0a:	0d 92       	st	X+, r0
     f0c:	8a 95       	dec	r24
     f0e:	e1 f7       	brne	.-8      	; 0xf08 <get_screen+0x326>
			snprintf(buffer[1], sizeof buffer[1], "                    ");
     f10:	de 01       	movw	r26, r28
     f12:	55 96       	adiw	r26, 0x15	; 21
     f14:	85 e1       	ldi	r24, 0x15	; 21
     f16:	ef ef       	ldi	r30, 0xFF	; 255
     f18:	f1 e0       	ldi	r31, 0x01	; 1
     f1a:	01 90       	ld	r0, Z+
     f1c:	0d 92       	st	X+, r0
     f1e:	8a 95       	dec	r24
     f20:	e1 f7       	brne	.-8      	; 0xf1a <get_screen+0x338>
			snprintf(buffer[2], sizeof buffer[2], " Tell Jeremy to fix ");
     f22:	de 01       	movw	r26, r28
     f24:	9a 96       	adiw	r26, 0x2a	; 42
     f26:	85 e1       	ldi	r24, 0x15	; 21
     f28:	e8 e1       	ldi	r30, 0x18	; 24
     f2a:	f3 e0       	ldi	r31, 0x03	; 3
     f2c:	01 90       	ld	r0, Z+
     f2e:	0d 92       	st	X+, r0
     f30:	8a 95       	dec	r24
     f32:	e1 f7       	brne	.-8      	; 0xf2c <get_screen+0x34a>
			snprintf(buffer[3], sizeof buffer[3], " his stuff          ");
     f34:	de 01       	movw	r26, r28
     f36:	df 96       	adiw	r26, 0x3f	; 63
     f38:	85 e1       	ldi	r24, 0x15	; 21
     f3a:	ed e2       	ldi	r30, 0x2D	; 45
     f3c:	f3 e0       	ldi	r31, 0x03	; 3
     f3e:	01 90       	ld	r0, Z+
     f40:	0d 92       	st	X+, r0
     f42:	8a 95       	dec	r24
     f44:	e1 f7       	brne	.-8      	; 0xf3e <get_screen+0x35c>
			snprintf(buffer[2], sizeof buffer[2], "                    ");
			snprintf(buffer[3], sizeof buffer[3], "                    ");
			break;
		*/
	}
}
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	1f 91       	pop	r17
     f4c:	08 95       	ret

00000f4e <lcd_refresh>:
#include "UI.h"
#include "Error.h"

void lcd_refresh()
{
	get_screen(Linebuffer, ui_current_screen);
     f4e:	60 91 64 03 	lds	r22, 0x0364	; 0x800364 <ui_current_screen>
     f52:	85 e7       	ldi	r24, 0x75	; 117
     f54:	93 e0       	ldi	r25, 0x03	; 3

	lcd_quickrefresh();
     f56:	45 de       	rcall	.-886    	; 0xbe2 <get_screen>
     f58:	30 ce       	rjmp	.-928    	; 0xbba <lcd_quickrefresh>
     f5a:	08 95       	ret

00000f5c <change_screen>:
	}
}

void change_screen(enum uiscreen s)
{
	ui_current_screen = s;
     f5c:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <ui_current_screen>
	lcd_refresh();	
     f60:	f6 cf       	rjmp	.-20     	; 0xf4e <lcd_refresh>
     f62:	08 95       	ret

00000f64 <__divmodhi4>:
     f64:	97 fb       	bst	r25, 7
     f66:	07 2e       	mov	r0, r23
     f68:	16 f4       	brtc	.+4      	; 0xf6e <__divmodhi4+0xa>
     f6a:	00 94       	com	r0
     f6c:	06 d0       	rcall	.+12     	; 0xf7a <__divmodhi4_neg1>
     f6e:	77 fd       	sbrc	r23, 7
     f70:	08 d0       	rcall	.+16     	; 0xf82 <__divmodhi4_neg2>
     f72:	3f d0       	rcall	.+126    	; 0xff2 <__udivmodhi4>
     f74:	07 fc       	sbrc	r0, 7
     f76:	05 d0       	rcall	.+10     	; 0xf82 <__divmodhi4_neg2>
     f78:	3e f4       	brtc	.+14     	; 0xf88 <__divmodhi4_exit>

00000f7a <__divmodhi4_neg1>:
     f7a:	90 95       	com	r25
     f7c:	81 95       	neg	r24
     f7e:	9f 4f       	sbci	r25, 0xFF	; 255
     f80:	08 95       	ret

00000f82 <__divmodhi4_neg2>:
     f82:	70 95       	com	r23
     f84:	61 95       	neg	r22
     f86:	7f 4f       	sbci	r23, 0xFF	; 255

00000f88 <__divmodhi4_exit>:
     f88:	08 95       	ret

00000f8a <__divmodsi4>:
     f8a:	05 2e       	mov	r0, r21
     f8c:	97 fb       	bst	r25, 7
     f8e:	16 f4       	brtc	.+4      	; 0xf94 <__divmodsi4+0xa>
     f90:	00 94       	com	r0
     f92:	0f d0       	rcall	.+30     	; 0xfb2 <__negsi2>
     f94:	57 fd       	sbrc	r21, 7
     f96:	05 d0       	rcall	.+10     	; 0xfa2 <__divmodsi4_neg2>
     f98:	40 d0       	rcall	.+128    	; 0x101a <__udivmodsi4>
     f9a:	07 fc       	sbrc	r0, 7
     f9c:	02 d0       	rcall	.+4      	; 0xfa2 <__divmodsi4_neg2>
     f9e:	46 f4       	brtc	.+16     	; 0xfb0 <__divmodsi4_exit>
     fa0:	08 c0       	rjmp	.+16     	; 0xfb2 <__negsi2>

00000fa2 <__divmodsi4_neg2>:
     fa2:	50 95       	com	r21
     fa4:	40 95       	com	r20
     fa6:	30 95       	com	r19
     fa8:	21 95       	neg	r18
     faa:	3f 4f       	sbci	r19, 0xFF	; 255
     fac:	4f 4f       	sbci	r20, 0xFF	; 255
     fae:	5f 4f       	sbci	r21, 0xFF	; 255

00000fb0 <__divmodsi4_exit>:
     fb0:	08 95       	ret

00000fb2 <__negsi2>:
     fb2:	90 95       	com	r25
     fb4:	80 95       	com	r24
     fb6:	70 95       	com	r23
     fb8:	61 95       	neg	r22
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	8f 4f       	sbci	r24, 0xFF	; 255
     fbe:	9f 4f       	sbci	r25, 0xFF	; 255
     fc0:	08 95       	ret

00000fc2 <__tablejump2__>:
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	00 24       	eor	r0, r0
     fc8:	00 1c       	adc	r0, r0
     fca:	0b be       	out	0x3b, r0	; 59
     fcc:	07 90       	elpm	r0, Z+
     fce:	f6 91       	elpm	r31, Z
     fd0:	e0 2d       	mov	r30, r0
     fd2:	09 94       	ijmp

00000fd4 <__umulhisi3>:
     fd4:	a2 9f       	mul	r26, r18
     fd6:	b0 01       	movw	r22, r0
     fd8:	b3 9f       	mul	r27, r19
     fda:	c0 01       	movw	r24, r0
     fdc:	a3 9f       	mul	r26, r19
     fde:	70 0d       	add	r23, r0
     fe0:	81 1d       	adc	r24, r1
     fe2:	11 24       	eor	r1, r1
     fe4:	91 1d       	adc	r25, r1
     fe6:	b2 9f       	mul	r27, r18
     fe8:	70 0d       	add	r23, r0
     fea:	81 1d       	adc	r24, r1
     fec:	11 24       	eor	r1, r1
     fee:	91 1d       	adc	r25, r1
     ff0:	08 95       	ret

00000ff2 <__udivmodhi4>:
     ff2:	aa 1b       	sub	r26, r26
     ff4:	bb 1b       	sub	r27, r27
     ff6:	51 e1       	ldi	r21, 0x11	; 17
     ff8:	07 c0       	rjmp	.+14     	; 0x1008 <__udivmodhi4_ep>

00000ffa <__udivmodhi4_loop>:
     ffa:	aa 1f       	adc	r26, r26
     ffc:	bb 1f       	adc	r27, r27
     ffe:	a6 17       	cp	r26, r22
    1000:	b7 07       	cpc	r27, r23
    1002:	10 f0       	brcs	.+4      	; 0x1008 <__udivmodhi4_ep>
    1004:	a6 1b       	sub	r26, r22
    1006:	b7 0b       	sbc	r27, r23

00001008 <__udivmodhi4_ep>:
    1008:	88 1f       	adc	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	5a 95       	dec	r21
    100e:	a9 f7       	brne	.-22     	; 0xffa <__udivmodhi4_loop>
    1010:	80 95       	com	r24
    1012:	90 95       	com	r25
    1014:	bc 01       	movw	r22, r24
    1016:	cd 01       	movw	r24, r26
    1018:	08 95       	ret

0000101a <__udivmodsi4>:
    101a:	a1 e2       	ldi	r26, 0x21	; 33
    101c:	1a 2e       	mov	r1, r26
    101e:	aa 1b       	sub	r26, r26
    1020:	bb 1b       	sub	r27, r27
    1022:	fd 01       	movw	r30, r26
    1024:	0d c0       	rjmp	.+26     	; 0x1040 <__udivmodsi4_ep>

00001026 <__udivmodsi4_loop>:
    1026:	aa 1f       	adc	r26, r26
    1028:	bb 1f       	adc	r27, r27
    102a:	ee 1f       	adc	r30, r30
    102c:	ff 1f       	adc	r31, r31
    102e:	a2 17       	cp	r26, r18
    1030:	b3 07       	cpc	r27, r19
    1032:	e4 07       	cpc	r30, r20
    1034:	f5 07       	cpc	r31, r21
    1036:	20 f0       	brcs	.+8      	; 0x1040 <__udivmodsi4_ep>
    1038:	a2 1b       	sub	r26, r18
    103a:	b3 0b       	sbc	r27, r19
    103c:	e4 0b       	sbc	r30, r20
    103e:	f5 0b       	sbc	r31, r21

00001040 <__udivmodsi4_ep>:
    1040:	66 1f       	adc	r22, r22
    1042:	77 1f       	adc	r23, r23
    1044:	88 1f       	adc	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	1a 94       	dec	r1
    104a:	69 f7       	brne	.-38     	; 0x1026 <__udivmodsi4_loop>
    104c:	60 95       	com	r22
    104e:	70 95       	com	r23
    1050:	80 95       	com	r24
    1052:	90 95       	com	r25
    1054:	9b 01       	movw	r18, r22
    1056:	ac 01       	movw	r20, r24
    1058:	bd 01       	movw	r22, r26
    105a:	cf 01       	movw	r24, r30
    105c:	08 95       	ret

0000105e <snprintf>:
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	2e 97       	sbiw	r28, 0x0e	; 14
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	0d 89       	ldd	r16, Y+21	; 0x15
    1078:	1e 89       	ldd	r17, Y+22	; 0x16
    107a:	8f 89       	ldd	r24, Y+23	; 0x17
    107c:	98 8d       	ldd	r25, Y+24	; 0x18
    107e:	26 e0       	ldi	r18, 0x06	; 6
    1080:	2c 83       	std	Y+4, r18	; 0x04
    1082:	1a 83       	std	Y+2, r17	; 0x02
    1084:	09 83       	std	Y+1, r16	; 0x01
    1086:	97 ff       	sbrs	r25, 7
    1088:	02 c0       	rjmp	.+4      	; 0x108e <snprintf+0x30>
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	90 e8       	ldi	r25, 0x80	; 128
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	9e 83       	std	Y+6, r25	; 0x06
    1092:	8d 83       	std	Y+5, r24	; 0x05
    1094:	ae 01       	movw	r20, r28
    1096:	45 5e       	subi	r20, 0xE5	; 229
    1098:	5f 4f       	sbci	r21, 0xFF	; 255
    109a:	69 8d       	ldd	r22, Y+25	; 0x19
    109c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    109e:	ce 01       	movw	r24, r28
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	19 d0       	rcall	.+50     	; 0x10d6 <vfprintf>
    10a4:	4d 81       	ldd	r20, Y+5	; 0x05
    10a6:	5e 81       	ldd	r21, Y+6	; 0x06
    10a8:	57 fd       	sbrc	r21, 7
    10aa:	0a c0       	rjmp	.+20     	; 0x10c0 <snprintf+0x62>
    10ac:	2f 81       	ldd	r18, Y+7	; 0x07
    10ae:	38 85       	ldd	r19, Y+8	; 0x08
    10b0:	42 17       	cp	r20, r18
    10b2:	53 07       	cpc	r21, r19
    10b4:	0c f4       	brge	.+2      	; 0x10b8 <snprintf+0x5a>
    10b6:	9a 01       	movw	r18, r20
    10b8:	f8 01       	movw	r30, r16
    10ba:	e2 0f       	add	r30, r18
    10bc:	f3 1f       	adc	r31, r19
    10be:	10 82       	st	Z, r1
    10c0:	2e 96       	adiw	r28, 0x0e	; 14
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	08 95       	ret

000010d6 <vfprintf>:
    10d6:	2f 92       	push	r2
    10d8:	3f 92       	push	r3
    10da:	4f 92       	push	r4
    10dc:	5f 92       	push	r5
    10de:	6f 92       	push	r6
    10e0:	7f 92       	push	r7
    10e2:	8f 92       	push	r8
    10e4:	9f 92       	push	r9
    10e6:	af 92       	push	r10
    10e8:	bf 92       	push	r11
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	2b 97       	sbiw	r28, 0x0b	; 11
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	6c 01       	movw	r12, r24
    110c:	7b 01       	movw	r14, r22
    110e:	8a 01       	movw	r16, r20
    1110:	fc 01       	movw	r30, r24
    1112:	17 82       	std	Z+7, r1	; 0x07
    1114:	16 82       	std	Z+6, r1	; 0x06
    1116:	83 81       	ldd	r24, Z+3	; 0x03
    1118:	81 ff       	sbrs	r24, 1
    111a:	bf c1       	rjmp	.+894    	; 0x149a <__stack+0x39b>
    111c:	ce 01       	movw	r24, r28
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	3c 01       	movw	r6, r24
    1122:	f6 01       	movw	r30, r12
    1124:	93 81       	ldd	r25, Z+3	; 0x03
    1126:	f7 01       	movw	r30, r14
    1128:	93 fd       	sbrc	r25, 3
    112a:	85 91       	lpm	r24, Z+
    112c:	93 ff       	sbrs	r25, 3
    112e:	81 91       	ld	r24, Z+
    1130:	7f 01       	movw	r14, r30
    1132:	88 23       	and	r24, r24
    1134:	09 f4       	brne	.+2      	; 0x1138 <__stack+0x39>
    1136:	ad c1       	rjmp	.+858    	; 0x1492 <__stack+0x393>
    1138:	85 32       	cpi	r24, 0x25	; 37
    113a:	39 f4       	brne	.+14     	; 0x114a <__stack+0x4b>
    113c:	93 fd       	sbrc	r25, 3
    113e:	85 91       	lpm	r24, Z+
    1140:	93 ff       	sbrs	r25, 3
    1142:	81 91       	ld	r24, Z+
    1144:	7f 01       	movw	r14, r30
    1146:	85 32       	cpi	r24, 0x25	; 37
    1148:	21 f4       	brne	.+8      	; 0x1152 <__stack+0x53>
    114a:	b6 01       	movw	r22, r12
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	d6 d1       	rcall	.+940    	; 0x14fc <fputc>
    1150:	e8 cf       	rjmp	.-48     	; 0x1122 <__stack+0x23>
    1152:	91 2c       	mov	r9, r1
    1154:	21 2c       	mov	r2, r1
    1156:	31 2c       	mov	r3, r1
    1158:	ff e1       	ldi	r31, 0x1F	; 31
    115a:	f3 15       	cp	r31, r3
    115c:	d8 f0       	brcs	.+54     	; 0x1194 <__stack+0x95>
    115e:	8b 32       	cpi	r24, 0x2B	; 43
    1160:	79 f0       	breq	.+30     	; 0x1180 <__stack+0x81>
    1162:	38 f4       	brcc	.+14     	; 0x1172 <__stack+0x73>
    1164:	80 32       	cpi	r24, 0x20	; 32
    1166:	79 f0       	breq	.+30     	; 0x1186 <__stack+0x87>
    1168:	83 32       	cpi	r24, 0x23	; 35
    116a:	a1 f4       	brne	.+40     	; 0x1194 <__stack+0x95>
    116c:	23 2d       	mov	r18, r3
    116e:	20 61       	ori	r18, 0x10	; 16
    1170:	1d c0       	rjmp	.+58     	; 0x11ac <__stack+0xad>
    1172:	8d 32       	cpi	r24, 0x2D	; 45
    1174:	61 f0       	breq	.+24     	; 0x118e <__stack+0x8f>
    1176:	80 33       	cpi	r24, 0x30	; 48
    1178:	69 f4       	brne	.+26     	; 0x1194 <__stack+0x95>
    117a:	23 2d       	mov	r18, r3
    117c:	21 60       	ori	r18, 0x01	; 1
    117e:	16 c0       	rjmp	.+44     	; 0x11ac <__stack+0xad>
    1180:	83 2d       	mov	r24, r3
    1182:	82 60       	ori	r24, 0x02	; 2
    1184:	38 2e       	mov	r3, r24
    1186:	e3 2d       	mov	r30, r3
    1188:	e4 60       	ori	r30, 0x04	; 4
    118a:	3e 2e       	mov	r3, r30
    118c:	2a c0       	rjmp	.+84     	; 0x11e2 <__stack+0xe3>
    118e:	f3 2d       	mov	r31, r3
    1190:	f8 60       	ori	r31, 0x08	; 8
    1192:	1d c0       	rjmp	.+58     	; 0x11ce <__stack+0xcf>
    1194:	37 fc       	sbrc	r3, 7
    1196:	2d c0       	rjmp	.+90     	; 0x11f2 <__stack+0xf3>
    1198:	20 ed       	ldi	r18, 0xD0	; 208
    119a:	28 0f       	add	r18, r24
    119c:	2a 30       	cpi	r18, 0x0A	; 10
    119e:	40 f0       	brcs	.+16     	; 0x11b0 <__stack+0xb1>
    11a0:	8e 32       	cpi	r24, 0x2E	; 46
    11a2:	b9 f4       	brne	.+46     	; 0x11d2 <__stack+0xd3>
    11a4:	36 fc       	sbrc	r3, 6
    11a6:	75 c1       	rjmp	.+746    	; 0x1492 <__stack+0x393>
    11a8:	23 2d       	mov	r18, r3
    11aa:	20 64       	ori	r18, 0x40	; 64
    11ac:	32 2e       	mov	r3, r18
    11ae:	19 c0       	rjmp	.+50     	; 0x11e2 <__stack+0xe3>
    11b0:	36 fe       	sbrs	r3, 6
    11b2:	06 c0       	rjmp	.+12     	; 0x11c0 <__stack+0xc1>
    11b4:	8a e0       	ldi	r24, 0x0A	; 10
    11b6:	98 9e       	mul	r9, r24
    11b8:	20 0d       	add	r18, r0
    11ba:	11 24       	eor	r1, r1
    11bc:	92 2e       	mov	r9, r18
    11be:	11 c0       	rjmp	.+34     	; 0x11e2 <__stack+0xe3>
    11c0:	ea e0       	ldi	r30, 0x0A	; 10
    11c2:	2e 9e       	mul	r2, r30
    11c4:	20 0d       	add	r18, r0
    11c6:	11 24       	eor	r1, r1
    11c8:	22 2e       	mov	r2, r18
    11ca:	f3 2d       	mov	r31, r3
    11cc:	f0 62       	ori	r31, 0x20	; 32
    11ce:	3f 2e       	mov	r3, r31
    11d0:	08 c0       	rjmp	.+16     	; 0x11e2 <__stack+0xe3>
    11d2:	8c 36       	cpi	r24, 0x6C	; 108
    11d4:	21 f4       	brne	.+8      	; 0x11de <__stack+0xdf>
    11d6:	83 2d       	mov	r24, r3
    11d8:	80 68       	ori	r24, 0x80	; 128
    11da:	38 2e       	mov	r3, r24
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <__stack+0xe3>
    11de:	88 36       	cpi	r24, 0x68	; 104
    11e0:	41 f4       	brne	.+16     	; 0x11f2 <__stack+0xf3>
    11e2:	f7 01       	movw	r30, r14
    11e4:	93 fd       	sbrc	r25, 3
    11e6:	85 91       	lpm	r24, Z+
    11e8:	93 ff       	sbrs	r25, 3
    11ea:	81 91       	ld	r24, Z+
    11ec:	7f 01       	movw	r14, r30
    11ee:	81 11       	cpse	r24, r1
    11f0:	b3 cf       	rjmp	.-154    	; 0x1158 <__stack+0x59>
    11f2:	98 2f       	mov	r25, r24
    11f4:	9f 7d       	andi	r25, 0xDF	; 223
    11f6:	95 54       	subi	r25, 0x45	; 69
    11f8:	93 30       	cpi	r25, 0x03	; 3
    11fa:	28 f4       	brcc	.+10     	; 0x1206 <__stack+0x107>
    11fc:	0c 5f       	subi	r16, 0xFC	; 252
    11fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1200:	9f e3       	ldi	r25, 0x3F	; 63
    1202:	99 83       	std	Y+1, r25	; 0x01
    1204:	0d c0       	rjmp	.+26     	; 0x1220 <__stack+0x121>
    1206:	83 36       	cpi	r24, 0x63	; 99
    1208:	31 f0       	breq	.+12     	; 0x1216 <__stack+0x117>
    120a:	83 37       	cpi	r24, 0x73	; 115
    120c:	71 f0       	breq	.+28     	; 0x122a <__stack+0x12b>
    120e:	83 35       	cpi	r24, 0x53	; 83
    1210:	09 f0       	breq	.+2      	; 0x1214 <__stack+0x115>
    1212:	55 c0       	rjmp	.+170    	; 0x12be <__stack+0x1bf>
    1214:	20 c0       	rjmp	.+64     	; 0x1256 <__stack+0x157>
    1216:	f8 01       	movw	r30, r16
    1218:	80 81       	ld	r24, Z
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	0e 5f       	subi	r16, 0xFE	; 254
    121e:	1f 4f       	sbci	r17, 0xFF	; 255
    1220:	88 24       	eor	r8, r8
    1222:	83 94       	inc	r8
    1224:	91 2c       	mov	r9, r1
    1226:	53 01       	movw	r10, r6
    1228:	12 c0       	rjmp	.+36     	; 0x124e <__stack+0x14f>
    122a:	28 01       	movw	r4, r16
    122c:	f2 e0       	ldi	r31, 0x02	; 2
    122e:	4f 0e       	add	r4, r31
    1230:	51 1c       	adc	r5, r1
    1232:	f8 01       	movw	r30, r16
    1234:	a0 80       	ld	r10, Z
    1236:	b1 80       	ldd	r11, Z+1	; 0x01
    1238:	36 fe       	sbrs	r3, 6
    123a:	03 c0       	rjmp	.+6      	; 0x1242 <__stack+0x143>
    123c:	69 2d       	mov	r22, r9
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <__stack+0x147>
    1242:	6f ef       	ldi	r22, 0xFF	; 255
    1244:	7f ef       	ldi	r23, 0xFF	; 255
    1246:	c5 01       	movw	r24, r10
    1248:	4e d1       	rcall	.+668    	; 0x14e6 <strnlen>
    124a:	4c 01       	movw	r8, r24
    124c:	82 01       	movw	r16, r4
    124e:	f3 2d       	mov	r31, r3
    1250:	ff 77       	andi	r31, 0x7F	; 127
    1252:	3f 2e       	mov	r3, r31
    1254:	15 c0       	rjmp	.+42     	; 0x1280 <__stack+0x181>
    1256:	28 01       	movw	r4, r16
    1258:	22 e0       	ldi	r18, 0x02	; 2
    125a:	42 0e       	add	r4, r18
    125c:	51 1c       	adc	r5, r1
    125e:	f8 01       	movw	r30, r16
    1260:	a0 80       	ld	r10, Z
    1262:	b1 80       	ldd	r11, Z+1	; 0x01
    1264:	36 fe       	sbrs	r3, 6
    1266:	03 c0       	rjmp	.+6      	; 0x126e <__stack+0x16f>
    1268:	69 2d       	mov	r22, r9
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <__stack+0x173>
    126e:	6f ef       	ldi	r22, 0xFF	; 255
    1270:	7f ef       	ldi	r23, 0xFF	; 255
    1272:	c5 01       	movw	r24, r10
    1274:	2d d1       	rcall	.+602    	; 0x14d0 <strnlen_P>
    1276:	4c 01       	movw	r8, r24
    1278:	f3 2d       	mov	r31, r3
    127a:	f0 68       	ori	r31, 0x80	; 128
    127c:	3f 2e       	mov	r3, r31
    127e:	82 01       	movw	r16, r4
    1280:	33 fc       	sbrc	r3, 3
    1282:	19 c0       	rjmp	.+50     	; 0x12b6 <__stack+0x1b7>
    1284:	82 2d       	mov	r24, r2
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	88 16       	cp	r8, r24
    128a:	99 06       	cpc	r9, r25
    128c:	a0 f4       	brcc	.+40     	; 0x12b6 <__stack+0x1b7>
    128e:	b6 01       	movw	r22, r12
    1290:	80 e2       	ldi	r24, 0x20	; 32
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	33 d1       	rcall	.+614    	; 0x14fc <fputc>
    1296:	2a 94       	dec	r2
    1298:	f5 cf       	rjmp	.-22     	; 0x1284 <__stack+0x185>
    129a:	f5 01       	movw	r30, r10
    129c:	37 fc       	sbrc	r3, 7
    129e:	85 91       	lpm	r24, Z+
    12a0:	37 fe       	sbrs	r3, 7
    12a2:	81 91       	ld	r24, Z+
    12a4:	5f 01       	movw	r10, r30
    12a6:	b6 01       	movw	r22, r12
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	28 d1       	rcall	.+592    	; 0x14fc <fputc>
    12ac:	21 10       	cpse	r2, r1
    12ae:	2a 94       	dec	r2
    12b0:	21 e0       	ldi	r18, 0x01	; 1
    12b2:	82 1a       	sub	r8, r18
    12b4:	91 08       	sbc	r9, r1
    12b6:	81 14       	cp	r8, r1
    12b8:	91 04       	cpc	r9, r1
    12ba:	79 f7       	brne	.-34     	; 0x129a <__stack+0x19b>
    12bc:	e1 c0       	rjmp	.+450    	; 0x1480 <__stack+0x381>
    12be:	84 36       	cpi	r24, 0x64	; 100
    12c0:	11 f0       	breq	.+4      	; 0x12c6 <__stack+0x1c7>
    12c2:	89 36       	cpi	r24, 0x69	; 105
    12c4:	39 f5       	brne	.+78     	; 0x1314 <__stack+0x215>
    12c6:	f8 01       	movw	r30, r16
    12c8:	37 fe       	sbrs	r3, 7
    12ca:	07 c0       	rjmp	.+14     	; 0x12da <__stack+0x1db>
    12cc:	60 81       	ld	r22, Z
    12ce:	71 81       	ldd	r23, Z+1	; 0x01
    12d0:	82 81       	ldd	r24, Z+2	; 0x02
    12d2:	93 81       	ldd	r25, Z+3	; 0x03
    12d4:	0c 5f       	subi	r16, 0xFC	; 252
    12d6:	1f 4f       	sbci	r17, 0xFF	; 255
    12d8:	08 c0       	rjmp	.+16     	; 0x12ea <__stack+0x1eb>
    12da:	60 81       	ld	r22, Z
    12dc:	71 81       	ldd	r23, Z+1	; 0x01
    12de:	07 2e       	mov	r0, r23
    12e0:	00 0c       	add	r0, r0
    12e2:	88 0b       	sbc	r24, r24
    12e4:	99 0b       	sbc	r25, r25
    12e6:	0e 5f       	subi	r16, 0xFE	; 254
    12e8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ea:	f3 2d       	mov	r31, r3
    12ec:	ff 76       	andi	r31, 0x6F	; 111
    12ee:	3f 2e       	mov	r3, r31
    12f0:	97 ff       	sbrs	r25, 7
    12f2:	09 c0       	rjmp	.+18     	; 0x1306 <__stack+0x207>
    12f4:	90 95       	com	r25
    12f6:	80 95       	com	r24
    12f8:	70 95       	com	r23
    12fa:	61 95       	neg	r22
    12fc:	7f 4f       	sbci	r23, 0xFF	; 255
    12fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1300:	9f 4f       	sbci	r25, 0xFF	; 255
    1302:	f0 68       	ori	r31, 0x80	; 128
    1304:	3f 2e       	mov	r3, r31
    1306:	2a e0       	ldi	r18, 0x0A	; 10
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	a3 01       	movw	r20, r6
    130c:	33 d1       	rcall	.+614    	; 0x1574 <__ultoa_invert>
    130e:	88 2e       	mov	r8, r24
    1310:	86 18       	sub	r8, r6
    1312:	44 c0       	rjmp	.+136    	; 0x139c <__stack+0x29d>
    1314:	85 37       	cpi	r24, 0x75	; 117
    1316:	31 f4       	brne	.+12     	; 0x1324 <__stack+0x225>
    1318:	23 2d       	mov	r18, r3
    131a:	2f 7e       	andi	r18, 0xEF	; 239
    131c:	b2 2e       	mov	r11, r18
    131e:	2a e0       	ldi	r18, 0x0A	; 10
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	25 c0       	rjmp	.+74     	; 0x136e <__stack+0x26f>
    1324:	93 2d       	mov	r25, r3
    1326:	99 7f       	andi	r25, 0xF9	; 249
    1328:	b9 2e       	mov	r11, r25
    132a:	8f 36       	cpi	r24, 0x6F	; 111
    132c:	c1 f0       	breq	.+48     	; 0x135e <__stack+0x25f>
    132e:	18 f4       	brcc	.+6      	; 0x1336 <__stack+0x237>
    1330:	88 35       	cpi	r24, 0x58	; 88
    1332:	79 f0       	breq	.+30     	; 0x1352 <__stack+0x253>
    1334:	ae c0       	rjmp	.+348    	; 0x1492 <__stack+0x393>
    1336:	80 37       	cpi	r24, 0x70	; 112
    1338:	19 f0       	breq	.+6      	; 0x1340 <__stack+0x241>
    133a:	88 37       	cpi	r24, 0x78	; 120
    133c:	21 f0       	breq	.+8      	; 0x1346 <__stack+0x247>
    133e:	a9 c0       	rjmp	.+338    	; 0x1492 <__stack+0x393>
    1340:	e9 2f       	mov	r30, r25
    1342:	e0 61       	ori	r30, 0x10	; 16
    1344:	be 2e       	mov	r11, r30
    1346:	b4 fe       	sbrs	r11, 4
    1348:	0d c0       	rjmp	.+26     	; 0x1364 <__stack+0x265>
    134a:	fb 2d       	mov	r31, r11
    134c:	f4 60       	ori	r31, 0x04	; 4
    134e:	bf 2e       	mov	r11, r31
    1350:	09 c0       	rjmp	.+18     	; 0x1364 <__stack+0x265>
    1352:	34 fe       	sbrs	r3, 4
    1354:	0a c0       	rjmp	.+20     	; 0x136a <__stack+0x26b>
    1356:	29 2f       	mov	r18, r25
    1358:	26 60       	ori	r18, 0x06	; 6
    135a:	b2 2e       	mov	r11, r18
    135c:	06 c0       	rjmp	.+12     	; 0x136a <__stack+0x26b>
    135e:	28 e0       	ldi	r18, 0x08	; 8
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	05 c0       	rjmp	.+10     	; 0x136e <__stack+0x26f>
    1364:	20 e1       	ldi	r18, 0x10	; 16
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	02 c0       	rjmp	.+4      	; 0x136e <__stack+0x26f>
    136a:	20 e1       	ldi	r18, 0x10	; 16
    136c:	32 e0       	ldi	r19, 0x02	; 2
    136e:	f8 01       	movw	r30, r16
    1370:	b7 fe       	sbrs	r11, 7
    1372:	07 c0       	rjmp	.+14     	; 0x1382 <__stack+0x283>
    1374:	60 81       	ld	r22, Z
    1376:	71 81       	ldd	r23, Z+1	; 0x01
    1378:	82 81       	ldd	r24, Z+2	; 0x02
    137a:	93 81       	ldd	r25, Z+3	; 0x03
    137c:	0c 5f       	subi	r16, 0xFC	; 252
    137e:	1f 4f       	sbci	r17, 0xFF	; 255
    1380:	06 c0       	rjmp	.+12     	; 0x138e <__stack+0x28f>
    1382:	60 81       	ld	r22, Z
    1384:	71 81       	ldd	r23, Z+1	; 0x01
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0e 5f       	subi	r16, 0xFE	; 254
    138c:	1f 4f       	sbci	r17, 0xFF	; 255
    138e:	a3 01       	movw	r20, r6
    1390:	f1 d0       	rcall	.+482    	; 0x1574 <__ultoa_invert>
    1392:	88 2e       	mov	r8, r24
    1394:	86 18       	sub	r8, r6
    1396:	fb 2d       	mov	r31, r11
    1398:	ff 77       	andi	r31, 0x7F	; 127
    139a:	3f 2e       	mov	r3, r31
    139c:	36 fe       	sbrs	r3, 6
    139e:	0d c0       	rjmp	.+26     	; 0x13ba <__stack+0x2bb>
    13a0:	23 2d       	mov	r18, r3
    13a2:	2e 7f       	andi	r18, 0xFE	; 254
    13a4:	a2 2e       	mov	r10, r18
    13a6:	89 14       	cp	r8, r9
    13a8:	58 f4       	brcc	.+22     	; 0x13c0 <__stack+0x2c1>
    13aa:	34 fe       	sbrs	r3, 4
    13ac:	0b c0       	rjmp	.+22     	; 0x13c4 <__stack+0x2c5>
    13ae:	32 fc       	sbrc	r3, 2
    13b0:	09 c0       	rjmp	.+18     	; 0x13c4 <__stack+0x2c5>
    13b2:	83 2d       	mov	r24, r3
    13b4:	8e 7e       	andi	r24, 0xEE	; 238
    13b6:	a8 2e       	mov	r10, r24
    13b8:	05 c0       	rjmp	.+10     	; 0x13c4 <__stack+0x2c5>
    13ba:	b8 2c       	mov	r11, r8
    13bc:	a3 2c       	mov	r10, r3
    13be:	03 c0       	rjmp	.+6      	; 0x13c6 <__stack+0x2c7>
    13c0:	b8 2c       	mov	r11, r8
    13c2:	01 c0       	rjmp	.+2      	; 0x13c6 <__stack+0x2c7>
    13c4:	b9 2c       	mov	r11, r9
    13c6:	a4 fe       	sbrs	r10, 4
    13c8:	0f c0       	rjmp	.+30     	; 0x13e8 <__stack+0x2e9>
    13ca:	fe 01       	movw	r30, r28
    13cc:	e8 0d       	add	r30, r8
    13ce:	f1 1d       	adc	r31, r1
    13d0:	80 81       	ld	r24, Z
    13d2:	80 33       	cpi	r24, 0x30	; 48
    13d4:	21 f4       	brne	.+8      	; 0x13de <__stack+0x2df>
    13d6:	9a 2d       	mov	r25, r10
    13d8:	99 7e       	andi	r25, 0xE9	; 233
    13da:	a9 2e       	mov	r10, r25
    13dc:	09 c0       	rjmp	.+18     	; 0x13f0 <__stack+0x2f1>
    13de:	a2 fe       	sbrs	r10, 2
    13e0:	06 c0       	rjmp	.+12     	; 0x13ee <__stack+0x2ef>
    13e2:	b3 94       	inc	r11
    13e4:	b3 94       	inc	r11
    13e6:	04 c0       	rjmp	.+8      	; 0x13f0 <__stack+0x2f1>
    13e8:	8a 2d       	mov	r24, r10
    13ea:	86 78       	andi	r24, 0x86	; 134
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <__stack+0x2f1>
    13ee:	b3 94       	inc	r11
    13f0:	a3 fc       	sbrc	r10, 3
    13f2:	10 c0       	rjmp	.+32     	; 0x1414 <__stack+0x315>
    13f4:	a0 fe       	sbrs	r10, 0
    13f6:	06 c0       	rjmp	.+12     	; 0x1404 <__stack+0x305>
    13f8:	b2 14       	cp	r11, r2
    13fa:	80 f4       	brcc	.+32     	; 0x141c <__stack+0x31d>
    13fc:	28 0c       	add	r2, r8
    13fe:	92 2c       	mov	r9, r2
    1400:	9b 18       	sub	r9, r11
    1402:	0d c0       	rjmp	.+26     	; 0x141e <__stack+0x31f>
    1404:	b2 14       	cp	r11, r2
    1406:	58 f4       	brcc	.+22     	; 0x141e <__stack+0x31f>
    1408:	b6 01       	movw	r22, r12
    140a:	80 e2       	ldi	r24, 0x20	; 32
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	76 d0       	rcall	.+236    	; 0x14fc <fputc>
    1410:	b3 94       	inc	r11
    1412:	f8 cf       	rjmp	.-16     	; 0x1404 <__stack+0x305>
    1414:	b2 14       	cp	r11, r2
    1416:	18 f4       	brcc	.+6      	; 0x141e <__stack+0x31f>
    1418:	2b 18       	sub	r2, r11
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <__stack+0x321>
    141c:	98 2c       	mov	r9, r8
    141e:	21 2c       	mov	r2, r1
    1420:	a4 fe       	sbrs	r10, 4
    1422:	0f c0       	rjmp	.+30     	; 0x1442 <__stack+0x343>
    1424:	b6 01       	movw	r22, r12
    1426:	80 e3       	ldi	r24, 0x30	; 48
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	68 d0       	rcall	.+208    	; 0x14fc <fputc>
    142c:	a2 fe       	sbrs	r10, 2
    142e:	16 c0       	rjmp	.+44     	; 0x145c <__stack+0x35d>
    1430:	a1 fc       	sbrc	r10, 1
    1432:	03 c0       	rjmp	.+6      	; 0x143a <__stack+0x33b>
    1434:	88 e7       	ldi	r24, 0x78	; 120
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 c0       	rjmp	.+4      	; 0x143e <__stack+0x33f>
    143a:	88 e5       	ldi	r24, 0x58	; 88
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	b6 01       	movw	r22, r12
    1440:	0c c0       	rjmp	.+24     	; 0x145a <__stack+0x35b>
    1442:	8a 2d       	mov	r24, r10
    1444:	86 78       	andi	r24, 0x86	; 134
    1446:	51 f0       	breq	.+20     	; 0x145c <__stack+0x35d>
    1448:	a1 fe       	sbrs	r10, 1
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <__stack+0x351>
    144c:	8b e2       	ldi	r24, 0x2B	; 43
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <__stack+0x353>
    1450:	80 e2       	ldi	r24, 0x20	; 32
    1452:	a7 fc       	sbrc	r10, 7
    1454:	8d e2       	ldi	r24, 0x2D	; 45
    1456:	b6 01       	movw	r22, r12
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	50 d0       	rcall	.+160    	; 0x14fc <fputc>
    145c:	89 14       	cp	r8, r9
    145e:	30 f4       	brcc	.+12     	; 0x146c <__stack+0x36d>
    1460:	b6 01       	movw	r22, r12
    1462:	80 e3       	ldi	r24, 0x30	; 48
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	4a d0       	rcall	.+148    	; 0x14fc <fputc>
    1468:	9a 94       	dec	r9
    146a:	f8 cf       	rjmp	.-16     	; 0x145c <__stack+0x35d>
    146c:	8a 94       	dec	r8
    146e:	f3 01       	movw	r30, r6
    1470:	e8 0d       	add	r30, r8
    1472:	f1 1d       	adc	r31, r1
    1474:	80 81       	ld	r24, Z
    1476:	b6 01       	movw	r22, r12
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	40 d0       	rcall	.+128    	; 0x14fc <fputc>
    147c:	81 10       	cpse	r8, r1
    147e:	f6 cf       	rjmp	.-20     	; 0x146c <__stack+0x36d>
    1480:	22 20       	and	r2, r2
    1482:	09 f4       	brne	.+2      	; 0x1486 <__stack+0x387>
    1484:	4e ce       	rjmp	.-868    	; 0x1122 <__stack+0x23>
    1486:	b6 01       	movw	r22, r12
    1488:	80 e2       	ldi	r24, 0x20	; 32
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	37 d0       	rcall	.+110    	; 0x14fc <fputc>
    148e:	2a 94       	dec	r2
    1490:	f7 cf       	rjmp	.-18     	; 0x1480 <__stack+0x381>
    1492:	f6 01       	movw	r30, r12
    1494:	86 81       	ldd	r24, Z+6	; 0x06
    1496:	97 81       	ldd	r25, Z+7	; 0x07
    1498:	02 c0       	rjmp	.+4      	; 0x149e <__stack+0x39f>
    149a:	8f ef       	ldi	r24, 0xFF	; 255
    149c:	9f ef       	ldi	r25, 0xFF	; 255
    149e:	2b 96       	adiw	r28, 0x0b	; 11
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	1f 91       	pop	r17
    14b0:	0f 91       	pop	r16
    14b2:	ff 90       	pop	r15
    14b4:	ef 90       	pop	r14
    14b6:	df 90       	pop	r13
    14b8:	cf 90       	pop	r12
    14ba:	bf 90       	pop	r11
    14bc:	af 90       	pop	r10
    14be:	9f 90       	pop	r9
    14c0:	8f 90       	pop	r8
    14c2:	7f 90       	pop	r7
    14c4:	6f 90       	pop	r6
    14c6:	5f 90       	pop	r5
    14c8:	4f 90       	pop	r4
    14ca:	3f 90       	pop	r3
    14cc:	2f 90       	pop	r2
    14ce:	08 95       	ret

000014d0 <strnlen_P>:
    14d0:	fc 01       	movw	r30, r24
    14d2:	05 90       	lpm	r0, Z+
    14d4:	61 50       	subi	r22, 0x01	; 1
    14d6:	70 40       	sbci	r23, 0x00	; 0
    14d8:	01 10       	cpse	r0, r1
    14da:	d8 f7       	brcc	.-10     	; 0x14d2 <strnlen_P+0x2>
    14dc:	80 95       	com	r24
    14de:	90 95       	com	r25
    14e0:	8e 0f       	add	r24, r30
    14e2:	9f 1f       	adc	r25, r31
    14e4:	08 95       	ret

000014e6 <strnlen>:
    14e6:	fc 01       	movw	r30, r24
    14e8:	61 50       	subi	r22, 0x01	; 1
    14ea:	70 40       	sbci	r23, 0x00	; 0
    14ec:	01 90       	ld	r0, Z+
    14ee:	01 10       	cpse	r0, r1
    14f0:	d8 f7       	brcc	.-10     	; 0x14e8 <strnlen+0x2>
    14f2:	80 95       	com	r24
    14f4:	90 95       	com	r25
    14f6:	8e 0f       	add	r24, r30
    14f8:	9f 1f       	adc	r25, r31
    14fa:	08 95       	ret

000014fc <fputc>:
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	fb 01       	movw	r30, r22
    1506:	23 81       	ldd	r18, Z+3	; 0x03
    1508:	21 fd       	sbrc	r18, 1
    150a:	03 c0       	rjmp	.+6      	; 0x1512 <fputc+0x16>
    150c:	8f ef       	ldi	r24, 0xFF	; 255
    150e:	9f ef       	ldi	r25, 0xFF	; 255
    1510:	2c c0       	rjmp	.+88     	; 0x156a <fputc+0x6e>
    1512:	22 ff       	sbrs	r18, 2
    1514:	16 c0       	rjmp	.+44     	; 0x1542 <fputc+0x46>
    1516:	46 81       	ldd	r20, Z+6	; 0x06
    1518:	57 81       	ldd	r21, Z+7	; 0x07
    151a:	24 81       	ldd	r18, Z+4	; 0x04
    151c:	35 81       	ldd	r19, Z+5	; 0x05
    151e:	42 17       	cp	r20, r18
    1520:	53 07       	cpc	r21, r19
    1522:	44 f4       	brge	.+16     	; 0x1534 <fputc+0x38>
    1524:	a0 81       	ld	r26, Z
    1526:	b1 81       	ldd	r27, Z+1	; 0x01
    1528:	9d 01       	movw	r18, r26
    152a:	2f 5f       	subi	r18, 0xFF	; 255
    152c:	3f 4f       	sbci	r19, 0xFF	; 255
    152e:	31 83       	std	Z+1, r19	; 0x01
    1530:	20 83       	st	Z, r18
    1532:	8c 93       	st	X, r24
    1534:	26 81       	ldd	r18, Z+6	; 0x06
    1536:	37 81       	ldd	r19, Z+7	; 0x07
    1538:	2f 5f       	subi	r18, 0xFF	; 255
    153a:	3f 4f       	sbci	r19, 0xFF	; 255
    153c:	37 83       	std	Z+7, r19	; 0x07
    153e:	26 83       	std	Z+6, r18	; 0x06
    1540:	14 c0       	rjmp	.+40     	; 0x156a <fputc+0x6e>
    1542:	8b 01       	movw	r16, r22
    1544:	ec 01       	movw	r28, r24
    1546:	fb 01       	movw	r30, r22
    1548:	00 84       	ldd	r0, Z+8	; 0x08
    154a:	f1 85       	ldd	r31, Z+9	; 0x09
    154c:	e0 2d       	mov	r30, r0
    154e:	09 95       	icall
    1550:	89 2b       	or	r24, r25
    1552:	e1 f6       	brne	.-72     	; 0x150c <fputc+0x10>
    1554:	d8 01       	movw	r26, r16
    1556:	16 96       	adiw	r26, 0x06	; 6
    1558:	8d 91       	ld	r24, X+
    155a:	9c 91       	ld	r25, X
    155c:	17 97       	sbiw	r26, 0x07	; 7
    155e:	01 96       	adiw	r24, 0x01	; 1
    1560:	17 96       	adiw	r26, 0x07	; 7
    1562:	9c 93       	st	X, r25
    1564:	8e 93       	st	-X, r24
    1566:	16 97       	sbiw	r26, 0x06	; 6
    1568:	ce 01       	movw	r24, r28
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	08 95       	ret

00001574 <__ultoa_invert>:
    1574:	fa 01       	movw	r30, r20
    1576:	aa 27       	eor	r26, r26
    1578:	28 30       	cpi	r18, 0x08	; 8
    157a:	51 f1       	breq	.+84     	; 0x15d0 <__ultoa_invert+0x5c>
    157c:	20 31       	cpi	r18, 0x10	; 16
    157e:	81 f1       	breq	.+96     	; 0x15e0 <__ultoa_invert+0x6c>
    1580:	e8 94       	clt
    1582:	6f 93       	push	r22
    1584:	6e 7f       	andi	r22, 0xFE	; 254
    1586:	6e 5f       	subi	r22, 0xFE	; 254
    1588:	7f 4f       	sbci	r23, 0xFF	; 255
    158a:	8f 4f       	sbci	r24, 0xFF	; 255
    158c:	9f 4f       	sbci	r25, 0xFF	; 255
    158e:	af 4f       	sbci	r26, 0xFF	; 255
    1590:	b1 e0       	ldi	r27, 0x01	; 1
    1592:	3e d0       	rcall	.+124    	; 0x1610 <__ultoa_invert+0x9c>
    1594:	b4 e0       	ldi	r27, 0x04	; 4
    1596:	3c d0       	rcall	.+120    	; 0x1610 <__ultoa_invert+0x9c>
    1598:	67 0f       	add	r22, r23
    159a:	78 1f       	adc	r23, r24
    159c:	89 1f       	adc	r24, r25
    159e:	9a 1f       	adc	r25, r26
    15a0:	a1 1d       	adc	r26, r1
    15a2:	68 0f       	add	r22, r24
    15a4:	79 1f       	adc	r23, r25
    15a6:	8a 1f       	adc	r24, r26
    15a8:	91 1d       	adc	r25, r1
    15aa:	a1 1d       	adc	r26, r1
    15ac:	6a 0f       	add	r22, r26
    15ae:	71 1d       	adc	r23, r1
    15b0:	81 1d       	adc	r24, r1
    15b2:	91 1d       	adc	r25, r1
    15b4:	a1 1d       	adc	r26, r1
    15b6:	20 d0       	rcall	.+64     	; 0x15f8 <__ultoa_invert+0x84>
    15b8:	09 f4       	brne	.+2      	; 0x15bc <__ultoa_invert+0x48>
    15ba:	68 94       	set
    15bc:	3f 91       	pop	r19
    15be:	2a e0       	ldi	r18, 0x0A	; 10
    15c0:	26 9f       	mul	r18, r22
    15c2:	11 24       	eor	r1, r1
    15c4:	30 19       	sub	r19, r0
    15c6:	30 5d       	subi	r19, 0xD0	; 208
    15c8:	31 93       	st	Z+, r19
    15ca:	de f6       	brtc	.-74     	; 0x1582 <__ultoa_invert+0xe>
    15cc:	cf 01       	movw	r24, r30
    15ce:	08 95       	ret
    15d0:	46 2f       	mov	r20, r22
    15d2:	47 70       	andi	r20, 0x07	; 7
    15d4:	40 5d       	subi	r20, 0xD0	; 208
    15d6:	41 93       	st	Z+, r20
    15d8:	b3 e0       	ldi	r27, 0x03	; 3
    15da:	0f d0       	rcall	.+30     	; 0x15fa <__ultoa_invert+0x86>
    15dc:	c9 f7       	brne	.-14     	; 0x15d0 <__ultoa_invert+0x5c>
    15de:	f6 cf       	rjmp	.-20     	; 0x15cc <__ultoa_invert+0x58>
    15e0:	46 2f       	mov	r20, r22
    15e2:	4f 70       	andi	r20, 0x0F	; 15
    15e4:	40 5d       	subi	r20, 0xD0	; 208
    15e6:	4a 33       	cpi	r20, 0x3A	; 58
    15e8:	18 f0       	brcs	.+6      	; 0x15f0 <__ultoa_invert+0x7c>
    15ea:	49 5d       	subi	r20, 0xD9	; 217
    15ec:	31 fd       	sbrc	r19, 1
    15ee:	40 52       	subi	r20, 0x20	; 32
    15f0:	41 93       	st	Z+, r20
    15f2:	02 d0       	rcall	.+4      	; 0x15f8 <__ultoa_invert+0x84>
    15f4:	a9 f7       	brne	.-22     	; 0x15e0 <__ultoa_invert+0x6c>
    15f6:	ea cf       	rjmp	.-44     	; 0x15cc <__ultoa_invert+0x58>
    15f8:	b4 e0       	ldi	r27, 0x04	; 4
    15fa:	a6 95       	lsr	r26
    15fc:	97 95       	ror	r25
    15fe:	87 95       	ror	r24
    1600:	77 95       	ror	r23
    1602:	67 95       	ror	r22
    1604:	ba 95       	dec	r27
    1606:	c9 f7       	brne	.-14     	; 0x15fa <__ultoa_invert+0x86>
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	61 05       	cpc	r22, r1
    160c:	71 05       	cpc	r23, r1
    160e:	08 95       	ret
    1610:	9b 01       	movw	r18, r22
    1612:	ac 01       	movw	r20, r24
    1614:	0a 2e       	mov	r0, r26
    1616:	06 94       	lsr	r0
    1618:	57 95       	ror	r21
    161a:	47 95       	ror	r20
    161c:	37 95       	ror	r19
    161e:	27 95       	ror	r18
    1620:	ba 95       	dec	r27
    1622:	c9 f7       	brne	.-14     	; 0x1616 <__ultoa_invert+0xa2>
    1624:	62 0f       	add	r22, r18
    1626:	73 1f       	adc	r23, r19
    1628:	84 1f       	adc	r24, r20
    162a:	95 1f       	adc	r25, r21
    162c:	a0 1d       	adc	r26, r0
    162e:	08 95       	ret

00001630 <_exit>:
    1630:	f8 94       	cli

00001632 <__stop_program>:
    1632:	ff cf       	rjmp	.-2      	; 0x1632 <__stop_program>
