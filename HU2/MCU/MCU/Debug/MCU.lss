
MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000242  00800100  00001752  000017e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001752  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000087  00800342  00800342  00001a28  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025c2  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f6  00000000  00000000  00004246  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000118f  00000000  00000000  0000543c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d0  00000000  00000000  000065cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ee  00000000  00000000  00006b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001925  00000000  00000000  0000758a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00008eaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a5 c0       	rjmp	.+330    	; 0x14c <__ctors_end>
       2:	00 00       	nop
       4:	c1 c0       	rjmp	.+386    	; 0x188 <__bad_interrupt>
       6:	00 00       	nop
       8:	bf c0       	rjmp	.+382    	; 0x188 <__bad_interrupt>
       a:	00 00       	nop
       c:	bd c0       	rjmp	.+378    	; 0x188 <__bad_interrupt>
       e:	00 00       	nop
      10:	bb c0       	rjmp	.+374    	; 0x188 <__bad_interrupt>
      12:	00 00       	nop
      14:	b9 c0       	rjmp	.+370    	; 0x188 <__bad_interrupt>
      16:	00 00       	nop
      18:	b7 c0       	rjmp	.+366    	; 0x188 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b5 c0       	rjmp	.+362    	; 0x188 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b3 c0       	rjmp	.+358    	; 0x188 <__bad_interrupt>
      22:	00 00       	nop
      24:	b1 c0       	rjmp	.+354    	; 0x188 <__bad_interrupt>
      26:	00 00       	nop
      28:	98 c4       	rjmp	.+2352   	; 0x95a <__vector_10>
      2a:	00 00       	nop
      2c:	ad c0       	rjmp	.+346    	; 0x188 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ab c0       	rjmp	.+342    	; 0x188 <__bad_interrupt>
      32:	00 00       	nop
      34:	a9 c0       	rjmp	.+338    	; 0x188 <__bad_interrupt>
      36:	00 00       	nop
      38:	a7 c0       	rjmp	.+334    	; 0x188 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a5 c0       	rjmp	.+330    	; 0x188 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a3 c0       	rjmp	.+326    	; 0x188 <__bad_interrupt>
      42:	00 00       	nop
      44:	c2 c4       	rjmp	.+2436   	; 0x9ca <__vector_17>
      46:	00 00       	nop
      48:	72 c1       	rjmp	.+740    	; 0x32e <__vector_18>
      4a:	00 00       	nop
      4c:	9d c0       	rjmp	.+314    	; 0x188 <__bad_interrupt>
      4e:	00 00       	nop
      50:	9b c0       	rjmp	.+310    	; 0x188 <__bad_interrupt>
      52:	00 00       	nop
      54:	99 c0       	rjmp	.+306    	; 0x188 <__bad_interrupt>
      56:	00 00       	nop
      58:	97 c0       	rjmp	.+302    	; 0x188 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	95 c0       	rjmp	.+298    	; 0x188 <__bad_interrupt>
      5e:	00 00       	nop
      60:	93 c0       	rjmp	.+294    	; 0x188 <__bad_interrupt>
      62:	00 00       	nop
      64:	91 c0       	rjmp	.+290    	; 0x188 <__bad_interrupt>
      66:	00 00       	nop
      68:	8f c0       	rjmp	.+286    	; 0x188 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8d c0       	rjmp	.+282    	; 0x188 <__bad_interrupt>
      6e:	00 00       	nop
      70:	8b c0       	rjmp	.+278    	; 0x188 <__bad_interrupt>
      72:	00 00       	nop
      74:	89 c0       	rjmp	.+274    	; 0x188 <__bad_interrupt>
      76:	00 00       	nop
      78:	87 c0       	rjmp	.+270    	; 0x188 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	85 c0       	rjmp	.+266    	; 0x188 <__bad_interrupt>
      7e:	00 00       	nop
      80:	83 c0       	rjmp	.+262    	; 0x188 <__bad_interrupt>
      82:	00 00       	nop
      84:	81 c0       	rjmp	.+258    	; 0x188 <__bad_interrupt>
      86:	00 00       	nop
      88:	7f c0       	rjmp	.+254    	; 0x188 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7d c0       	rjmp	.+250    	; 0x188 <__bad_interrupt>
      8e:	00 00       	nop
      90:	7b c0       	rjmp	.+246    	; 0x188 <__bad_interrupt>
      92:	00 00       	nop
      94:	f7 02       	muls	r31, r23
      96:	db 02       	muls	r29, r27
      98:	e9 02       	muls	r30, r25
      9a:	20 03       	mulsu	r18, r16
      9c:	20 03       	mulsu	r18, r16
      9e:	20 03       	mulsu	r18, r16
      a0:	20 03       	mulsu	r18, r16
      a2:	20 03       	mulsu	r18, r16
      a4:	20 03       	mulsu	r18, r16
      a6:	20 03       	mulsu	r18, r16
      a8:	20 03       	mulsu	r18, r16
      aa:	20 03       	mulsu	r18, r16
      ac:	20 03       	mulsu	r18, r16
      ae:	20 03       	mulsu	r18, r16
      b0:	20 03       	mulsu	r18, r16
      b2:	20 03       	mulsu	r18, r16
      b4:	e6 01       	movw	r28, r12
      b6:	41 02       	muls	r20, r17
      b8:	8e 02       	muls	r24, r30
      ba:	20 03       	mulsu	r18, r16
      bc:	20 03       	mulsu	r18, r16
      be:	20 03       	mulsu	r18, r16
      c0:	20 03       	mulsu	r18, r16
      c2:	20 03       	mulsu	r18, r16
      c4:	20 03       	mulsu	r18, r16
      c6:	20 03       	mulsu	r18, r16
      c8:	20 03       	mulsu	r18, r16
      ca:	20 03       	mulsu	r18, r16
      cc:	20 03       	mulsu	r18, r16
      ce:	20 03       	mulsu	r18, r16
      d0:	20 03       	mulsu	r18, r16
      d2:	20 03       	mulsu	r18, r16
      d4:	05 03       	mulsu	r16, r21
      d6:	20 03       	mulsu	r18, r16
      d8:	20 03       	mulsu	r18, r16
      da:	20 03       	mulsu	r18, r16
      dc:	20 03       	mulsu	r18, r16
      de:	20 03       	mulsu	r18, r16
      e0:	20 03       	mulsu	r18, r16
      e2:	20 03       	mulsu	r18, r16
      e4:	20 03       	mulsu	r18, r16
      e6:	20 03       	mulsu	r18, r16
      e8:	20 03       	mulsu	r18, r16
      ea:	20 03       	mulsu	r18, r16
      ec:	20 03       	mulsu	r18, r16
      ee:	20 03       	mulsu	r18, r16
      f0:	20 03       	mulsu	r18, r16
      f2:	20 03       	mulsu	r18, r16
      f4:	13 03       	mulsu	r17, r19
      f6:	20 03       	mulsu	r18, r16
      f8:	20 03       	mulsu	r18, r16
      fa:	20 03       	mulsu	r18, r16
      fc:	20 03       	mulsu	r18, r16
      fe:	20 03       	mulsu	r18, r16
     100:	20 03       	mulsu	r18, r16
     102:	20 03       	mulsu	r18, r16
     104:	20 03       	mulsu	r18, r16
     106:	20 03       	mulsu	r18, r16
     108:	20 03       	mulsu	r18, r16
     10a:	20 03       	mulsu	r18, r16
     10c:	20 03       	mulsu	r18, r16
     10e:	20 03       	mulsu	r18, r16
     110:	20 03       	mulsu	r18, r16
     112:	20 03       	mulsu	r18, r16
     114:	20 03       	mulsu	r18, r16
     116:	20 03       	mulsu	r18, r16
     118:	20 03       	mulsu	r18, r16
     11a:	20 03       	mulsu	r18, r16
     11c:	20 03       	mulsu	r18, r16
     11e:	20 03       	mulsu	r18, r16
     120:	20 03       	mulsu	r18, r16
     122:	20 03       	mulsu	r18, r16
     124:	20 03       	mulsu	r18, r16
     126:	20 03       	mulsu	r18, r16
     128:	20 03       	mulsu	r18, r16
     12a:	20 03       	mulsu	r18, r16
     12c:	20 03       	mulsu	r18, r16
     12e:	20 03       	mulsu	r18, r16
     130:	20 03       	mulsu	r18, r16
     132:	20 03       	mulsu	r18, r16
     134:	d2 02       	muls	r29, r18
     136:	6b 03       	fmul	r22, r19
     138:	4a 03       	fmul	r20, r18
     13a:	4d 03       	fmul	r20, r21
     13c:	50 03       	mulsu	r21, r16
     13e:	53 03       	mulsu	r21, r19
     140:	56 03       	mulsu	r21, r22
     142:	59 03       	fmul	r21, r17
     144:	5c 03       	fmul	r21, r20
     146:	5f 03       	fmul	r21, r23
     148:	62 03       	mulsu	r22, r18
     14a:	65 03       	mulsu	r22, r21

0000014c <__ctors_end>:
     14c:	11 24       	eor	r1, r1
     14e:	1f be       	out	0x3f, r1	; 63
     150:	cf ef       	ldi	r28, 0xFF	; 255
     152:	d0 e1       	ldi	r29, 0x10	; 16
     154:	de bf       	out	0x3e, r29	; 62
     156:	cd bf       	out	0x3d, r28	; 61

00000158 <__do_copy_data>:
     158:	13 e0       	ldi	r17, 0x03	; 3
     15a:	a0 e0       	ldi	r26, 0x00	; 0
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	e2 e5       	ldi	r30, 0x52	; 82
     160:	f7 e1       	ldi	r31, 0x17	; 23
     162:	00 e0       	ldi	r16, 0x00	; 0
     164:	0b bf       	out	0x3b, r16	; 59
     166:	02 c0       	rjmp	.+4      	; 0x16c <__do_copy_data+0x14>
     168:	07 90       	elpm	r0, Z+
     16a:	0d 92       	st	X+, r0
     16c:	a2 34       	cpi	r26, 0x42	; 66
     16e:	b1 07       	cpc	r27, r17
     170:	d9 f7       	brne	.-10     	; 0x168 <__do_copy_data+0x10>

00000172 <__do_clear_bss>:
     172:	23 e0       	ldi	r18, 0x03	; 3
     174:	a2 e4       	ldi	r26, 0x42	; 66
     176:	b3 e0       	ldi	r27, 0x03	; 3
     178:	01 c0       	rjmp	.+2      	; 0x17c <.do_clear_bss_start>

0000017a <.do_clear_bss_loop>:
     17a:	1d 92       	st	X+, r1

0000017c <.do_clear_bss_start>:
     17c:	a9 3c       	cpi	r26, 0xC9	; 201
     17e:	b2 07       	cpc	r27, r18
     180:	e1 f7       	brne	.-8      	; 0x17a <.do_clear_bss_loop>
     182:	68 d5       	rcall	.+2768   	; 0xc54 <main>
     184:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <_exit>

00000188 <__bad_interrupt>:
     188:	3b cf       	rjmp	.-394    	; 0x0 <__vectors>

0000018a <can_init>:
	data_send_arr_nh(d, node, 2);
}

//***** CAN initalization *****************************************************
void can_init()
{	
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
	CANGCON = ( 1 << SWRES );   // Software reset
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	
	CANTCON = 0x00;				// CAN timing prescaler set to 0;
     194:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	
	CANBT1 = 0x02;	// Set baud rate to 500kb (assuming 16Mhz IOclk)
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x0C;
     19e:	8c e0       	ldi	r24, 0x0C	; 12
     1a0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x37;
     1a4:	87 e3       	ldi	r24, 0x37	; 55
     1a6:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	for (int8_t mob=0; mob<14; mob++)
     1aa:	80 e0       	ldi	r24, 0x00	; 0
	{
		CANPAGE = ( mob << 4 ); // Selects Message Object 0-14
     1ac:	cd ee       	ldi	r28, 0xED	; 237
     1ae:	d0 e0       	ldi	r29, 0x00	; 0
		CANCDMOB = 0x00;		// Disable mob
     1b0:	af ee       	ldi	r26, 0xEF	; 239
     1b2:	b0 e0       	ldi	r27, 0x00	; 0
		CANSTMOB = 0x00;		// Clear mob status register;
     1b4:	ee ee       	ldi	r30, 0xEE	; 238
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT2 = 0x0C;
	CANBT3 = 0x37;

	for (int8_t mob=0; mob<14; mob++)
	{
		CANPAGE = ( mob << 4 ); // Selects Message Object 0-14
     1b8:	98 2f       	mov	r25, r24
     1ba:	92 95       	swap	r25
     1bc:	90 7f       	andi	r25, 0xF0	; 240
     1be:	98 83       	st	Y, r25
		CANCDMOB = 0x00;		// Disable mob
     1c0:	1c 92       	st	X, r1
		CANSTMOB = 0x00;		// Clear mob status register;
     1c2:	10 82       	st	Z, r1
     1c4:	8f 5f       	subi	r24, 0xFF	; 255
	
	CANBT1 = 0x02;	// Set baud rate to 500kb (assuming 16Mhz IOclk)
	CANBT2 = 0x0C;
	CANBT3 = 0x37;

	for (int8_t mob=0; mob<14; mob++)
     1c6:	8e 30       	cpi	r24, 0x0E	; 14
     1c8:	b9 f7       	brne	.-18     	; 0x1b8 <can_init+0x2e>
		CANPAGE = ( mob << 4 ); // Selects Message Object 0-14
		CANCDMOB = 0x00;		// Disable mob
		CANSTMOB = 0x00;		// Clear mob status register;
	}
	
	CANIE2 = (( 1 << IEMOB1 ) | ( 0 << IEMOB0 ));  // IEMOB1 = MOB1 Enable interrupts on mob1 for reception and transmission
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	CANGIE = ( 1 << ENIT ) | ( 1 << ENRX ) | ( 0 << ENTX );   // Enable interrupts on receive
     1d0:	80 ea       	ldi	r24, 0xA0	; 160
     1d2:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	CANGCON |= ( 1 << 1 );	// Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
     1d6:	e8 ed       	ldi	r30, 0xD8	; 216
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	80 81       	ld	r24, Z
     1dc:	82 60       	ori	r24, 0x02	; 2
     1de:	80 83       	st	Z, r24
}
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	08 95       	ret

000001e6 <can_rx>:

//***** CAN Creating RX *****************************************************
void can_rx(uint16_t NODE_ID)
{
	CANPAGE = ( 1 << MOBNB0 ); // Select message object 0
     1e6:	20 e1       	ldi	r18, 0x10	; 16
     1e8:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
	CANIDT1 = NODE_ID >> 3; // Receive Address
     1ec:	9c 01       	movw	r18, r24
     1ee:	36 95       	lsr	r19
     1f0:	27 95       	ror	r18
     1f2:	36 95       	lsr	r19
     1f4:	27 95       	ror	r18
     1f6:	36 95       	lsr	r19
     1f8:	27 95       	ror	r18
     1fa:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	CANIDT2 = NODE_ID << 5; //
     1fe:	82 95       	swap	r24
     200:	88 0f       	add	r24, r24
     202:	80 7e       	andi	r24, 0xE0	; 224
     204:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT3 = 0x00; 		// ""
     208:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT4 = 0x00; 		// ""
     20c:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	
	CANIDM1 = 0b11111111;   // Receive Address
     210:	8f ef       	ldi	r24, 0xFF	; 255
     212:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDM2 = 0b11100000;	//
     216:	80 ee       	ldi	r24, 0xE0	; 224
     218:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>

	CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 3 << DLC0));  // Enable Reception | 11 bit | IDE DLC8
     21c:	83 e8       	ldi	r24, 0x83	; 131
     21e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     222:	08 95       	ret

00000224 <can_tx>:
}

//***** CAN Creating TX *****************************************************
void can_tx(uint16_t Address, uint8_t DLC)
{	
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	9c 01       	movw	r18, r24
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 0 << MOBNB0 ); // select 0000 = CANMOB0
     22a:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	while ( CANEN2 & ( 1 << ENMOB0 ) ); // Wait for MOb 0 to be free
     22e:	ec ed       	ldi	r30, 0xDC	; 220
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	90 81       	ld	r25, Z
     234:	90 fd       	sbrc	r25, 0
     236:	fd cf       	rjmp	.-6      	; 0x232 <can_tx+0xe>
	
	CANSTMOB = 0x00;   // Clear mob status register
     238:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	
	CANIDT4 = 0x00;     		//
     23c:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = 0x00;				//
     240:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = Address << 5;		//
     244:	82 2f       	mov	r24, r18
     246:	82 95       	swap	r24
     248:	88 0f       	add	r24, r24
     24a:	80 7e       	andi	r24, 0xE0	; 224
     24c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = Address >> 3;		//
     250:	36 95       	lsr	r19
     252:	27 95       	ror	r18
     254:	36 95       	lsr	r19
     256:	27 95       	ror	r18
     258:	36 95       	lsr	r19
     25a:	27 95       	ror	r18
     25c:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     260:	e5 e6       	ldi	r30, 0x65	; 101
     262:	f3 e0       	ldi	r31, 0x03	; 3
     264:	2d e6       	ldi	r18, 0x6D	; 109
     266:	33 e0       	ldi	r19, 0x03	; 3
     268:	df 01       	movw	r26, r30
	
	for ( int8_t i = 0; i < 8; i++ ) CANMSG = TransmitData[i]; //CAN Data Message Register: setting the data in the message register
     26a:	ca ef       	ldi	r28, 0xFA	; 250
     26c:	d0 e0       	ldi	r29, 0x00	; 0
     26e:	8d 91       	ld	r24, X+
     270:	88 83       	st	Y, r24
     272:	a2 17       	cp	r26, r18
     274:	b3 07       	cpc	r27, r19
     276:	d9 f7       	brne	.-10     	; 0x26e <can_tx+0x4a>
	
	CANCDMOB = (( 1 << CONMOB0 ) | ( 0 << IDE ) | ( DLC << DLC0)); //CAN MOb Control and DLC Register: (1<<CONMOB1) = enable reception. (0<<IDE) = can standard rev 2.0A ( id length = 11 bits), (DLC << DLC0) Set *DLC* Bytes in the data field of the message.
     278:	60 64       	ori	r22, 0x40	; 64
     27a:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	while ( ! ( CANSTMOB & ( 1 << TXOK ) ) );	// wait for TXOK flag set	// JEROEN PAS NOU OP JONGE
     27e:	ae ee       	ldi	r26, 0xEE	; 238
     280:	b0 e0       	ldi	r27, 0x00	; 0
     282:	8c 91       	ld	r24, X
     284:	86 ff       	sbrs	r24, 6
     286:	fd cf       	rjmp	.-6      	; 0x282 <can_tx+0x5e>
	
	CANCDMOB = 0x00; //Clear CAN Mob Control and DLC Register
     288:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	CANSTMOB = 0x00; // Clear TXOK flag
     28c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select 0001 = MOB1
     290:	80 e1       	ldi	r24, 0x10	; 16
     292:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
	for (int8_t i = 0; i < 8; i++) TransmitData[i] = 0; //Resetting Transmit Data
     296:	11 92       	st	Z+, r1
     298:	2e 17       	cp	r18, r30
     29a:	3f 07       	cpc	r19, r31
     29c:	e1 f7       	brne	.-8      	; 0x296 <can_tx+0x72>
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <data_send_arr>:
#include <avr/interrupt.h>
#include "Defines.h"
#include "CAN.h"

void data_send_arr(uint8_t header, uint8_t buffer[], uint16_t node, uint8_t bufferlen)
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
	TransmitData[0] = header;
     2a8:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <TransmitData>
	for(uint8_t i = 0; i < bufferlen; i++) TransmitData[i+1] = buffer[i];
     2ac:	22 23       	and	r18, r18
     2ae:	79 f0       	breq	.+30     	; 0x2ce <data_send_arr+0x2a>
     2b0:	fb 01       	movw	r30, r22
     2b2:	a6 e6       	ldi	r26, 0x66	; 102
     2b4:	b3 e0       	ldi	r27, 0x03	; 3
     2b6:	8f ef       	ldi	r24, 0xFF	; 255
     2b8:	82 0f       	add	r24, r18
     2ba:	c8 2f       	mov	r28, r24
     2bc:	d0 e0       	ldi	r29, 0x00	; 0
     2be:	21 96       	adiw	r28, 0x01	; 1
     2c0:	c6 0f       	add	r28, r22
     2c2:	d7 1f       	adc	r29, r23
     2c4:	81 91       	ld	r24, Z+
     2c6:	8d 93       	st	X+, r24
     2c8:	ec 17       	cp	r30, r28
     2ca:	fd 07       	cpc	r31, r29
     2cc:	d9 f7       	brne	.-10     	; 0x2c4 <data_send_arr+0x20>
	can_tx(node, bufferlen + 1);
     2ce:	61 e0       	ldi	r22, 0x01	; 1
     2d0:	62 0f       	add	r22, r18
     2d2:	ca 01       	movw	r24, r20
     2d4:	a7 df       	rcall	.-178    	; 0x224 <can_tx>
}
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	08 95       	ret

000002dc <data_send8>:
void data_send8(uint8_t header, uint8_t data, uint16_t node)
{
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	1f 92       	push	r1
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
	uint8_t d[] = {data};
     2e6:	69 83       	std	Y+1, r22	; 0x01
	data_send_arr(header, d, node, 1);
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	be 01       	movw	r22, r28
     2ec:	6f 5f       	subi	r22, 0xFF	; 255
     2ee:	7f 4f       	sbci	r23, 0xFF	; 255
     2f0:	d9 df       	rcall	.-78     	; 0x2a4 <data_send_arr>
}
     2f2:	0f 90       	pop	r0
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <data_send16>:
void data_send16(uint8_t header, uint16_t data, uint16_t node)
{
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	00 d0       	rcall	.+0      	; 0x300 <data_send16+0x6>
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
	uint8_t d[] = {data & 255, /*<-- Low byte | High byte -->*/ (data >> 8) & 255};
     304:	69 83       	std	Y+1, r22	; 0x01
     306:	7a 83       	std	Y+2, r23	; 0x02
	data_send_arr(header, d, node, 2);
     308:	22 e0       	ldi	r18, 0x02	; 2
     30a:	be 01       	movw	r22, r28
     30c:	6f 5f       	subi	r22, 0xFF	; 255
     30e:	7f 4f       	sbci	r23, 0xFF	; 255
     310:	c9 df       	rcall	.-110    	; 0x2a4 <data_send_arr>
}
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <data_send_ecu>:
#include "Data.h"
#include "CAN.h"

void data_send_ecu(uint8_t node, uint8_t data)
{
	TransmitData[0] = node;
     31c:	e5 e6       	ldi	r30, 0x65	; 101
     31e:	f3 e0       	ldi	r31, 0x03	; 3
     320:	80 83       	st	Z, r24
	TransmitData[1] = data;
     322:	61 83       	std	Z+1, r22	; 0x01
	can_tx(ECU2ID, 2);
     324:	62 e0       	ldi	r22, 0x02	; 2
     326:	85 e0       	ldi	r24, 0x05	; 5
     328:	92 e0       	ldi	r25, 0x02	; 2
     32a:	7c cf       	rjmp	.-264    	; 0x224 <can_tx>
     32c:	08 95       	ret

0000032e <__vector_18>:
}

ISR(CANIT_vect)
{
     32e:	1f 92       	push	r1
     330:	0f 92       	push	r0
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	0f 92       	push	r0
     336:	11 24       	eor	r1, r1
     338:	0b b6       	in	r0, 0x3b	; 59
     33a:	0f 92       	push	r0
     33c:	2f 93       	push	r18
     33e:	3f 93       	push	r19
     340:	4f 93       	push	r20
     342:	5f 93       	push	r21
     344:	6f 93       	push	r22
     346:	7f 93       	push	r23
     348:	8f 93       	push	r24
     34a:	9f 93       	push	r25
     34c:	af 93       	push	r26
     34e:	bf 93       	push	r27
     350:	ef 93       	push	r30
     352:	ff 93       	push	r31
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select CANMOB 0001 = MOB1
     354:	80 e1       	ldi	r24, 0x10	; 16
     356:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	uint8_t length = ( CANCDMOB & 0x0F );
     35a:	40 91 ef 00 	lds	r20, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	for ( int8_t i = 0; i < length; i++ ) ReceiveData[i] = CANMSG;
     35e:	4f 70       	andi	r20, 0x0F	; 15
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	14 16       	cp	r1, r20
     364:	15 06       	cpc	r1, r21
     366:	94 f4       	brge	.+36     	; 0x38c <__vector_18+0x5e>
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	20 e0       	ldi	r18, 0x00	; 0
     36e:	ea ef       	ldi	r30, 0xFA	; 250
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	30 81       	ld	r19, Z
     374:	dc 01       	movw	r26, r24
     376:	a3 59       	subi	r26, 0x93	; 147
     378:	bc 4f       	sbci	r27, 0xFC	; 252
     37a:	3c 93       	st	X, r19
     37c:	2f 5f       	subi	r18, 0xFF	; 255
     37e:	82 2f       	mov	r24, r18
     380:	02 2e       	mov	r0, r18
     382:	00 0c       	add	r0, r0
     384:	99 0b       	sbc	r25, r25
     386:	84 17       	cp	r24, r20
     388:	95 07       	cpc	r25, r21
     38a:	9c f3       	brlt	.-26     	; 0x372 <__vector_18+0x44>
	
	uint16_t ReceiveAddress = (CANIDT1 << 3) | ((CANIDT2 & 0b11100000) >> 5);
     38c:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     390:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	
	if(ReceiveAddress == MASTERID)
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	88 0f       	add	r24, r24
     398:	99 1f       	adc	r25, r25
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	22 95       	swap	r18
     3a4:	26 95       	lsr	r18
     3a6:	27 70       	andi	r18, 0x07	; 7
     3a8:	82 2b       	or	r24, r18
     3aa:	87 31       	cpi	r24, 0x17	; 23
     3ac:	93 40       	sbci	r25, 0x03	; 3
     3ae:	09 f0       	breq	.+2      	; 0x3b2 <__vector_18+0x84>
     3b0:	47 c1       	rjmp	.+654    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
	{
		switch(ReceiveData[0])
     3b2:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <ReceiveData>
     3b6:	8e 2f       	mov	r24, r30
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	fc 01       	movw	r30, r24
     3bc:	71 97       	sbiw	r30, 0x11	; 17
     3be:	e1 35       	cpi	r30, 0x51	; 81
     3c0:	f1 05       	cpc	r31, r1
     3c2:	08 f0       	brcs	.+2      	; 0x3c6 <__vector_18+0x98>
     3c4:	3d c1       	rjmp	.+634    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
     3c6:	e6 5b       	subi	r30, 0xB6	; 182
     3c8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ca:	a2 c6       	rjmp	.+3396   	; 0x1110 <__tablejump2__>
		{
			case GAS_1:
				gas1 = (ReceiveData[1] +  (ReceiveData[2] << 8));
     3cc:	ed e6       	ldi	r30, 0x6D	; 109
     3ce:	f3 e0       	ldi	r31, 0x03	; 3
     3d0:	82 81       	ldd	r24, Z+2	; 0x02
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	98 2f       	mov	r25, r24
     3d6:	88 27       	eor	r24, r24
     3d8:	21 81       	ldd	r18, Z+1	; 0x01
     3da:	82 0f       	add	r24, r18
     3dc:	91 1d       	adc	r25, r1
     3de:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <gas1+0x1>
     3e2:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <gas1>
			
				//Bound checking while fixing range
				gas1perc = (gas1 < GAS1MIN) ? 0 : ((gas1 > GAS1MAX) ? (GAS1MAX - GAS1MIN) : (gas1 - GAS1MIN));
     3e6:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <gas1>
     3ea:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <gas1+0x1>
     3ee:	85 3b       	cpi	r24, 0xB5	; 181
     3f0:	92 40       	sbci	r25, 0x02	; 2
     3f2:	70 f0       	brcs	.+28     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3f4:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <gas1>
     3f8:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <gas1+0x1>
     3fc:	8a 30       	cpi	r24, 0x0A	; 10
     3fe:	93 40       	sbci	r25, 0x03	; 3
     400:	50 f4       	brcc	.+20     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     402:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <gas1>
     406:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <gas1+0x1>
     40a:	85 5b       	subi	r24, 0xB5	; 181
     40c:	92 40       	sbci	r25, 0x02	; 2
     40e:	05 c0       	rjmp	.+10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	02 c0       	rjmp	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     416:	84 e5       	ldi	r24, 0x54	; 84
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <gas1perc+0x1>
     41e:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <gas1perc>
				gas1eng = (gas1perc * ENGINE_MAX) / (GAS2MAX - GAS2MIN);
     422:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <gas1perc>
     426:	30 91 5b 03 	lds	r19, 0x035B	; 0x80035b <gas1perc+0x1>
     42a:	a0 e5       	ldi	r26, 0x50	; 80
     42c:	b3 ec       	ldi	r27, 0xC3	; 195
     42e:	79 d6       	rcall	.+3314   	; 0x1122 <__umulhisi3>
     430:	2b e5       	ldi	r18, 0x5B	; 91
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	40 e0       	ldi	r20, 0x00	; 0
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	4f d6       	rcall	.+3230   	; 0x10d8 <__divmodsi4>
     43a:	20 93 52 03 	sts	0x0352, r18	; 0x800352 <gas1eng>
     43e:	30 93 53 03 	sts	0x0353, r19	; 0x800353 <gas1eng+0x1>
     442:	40 93 54 03 	sts	0x0354, r20	; 0x800354 <gas1eng+0x2>
     446:	50 93 55 03 	sts	0x0355, r21	; 0x800355 <gas1eng+0x3>
				gas1perc = (gas1perc * 100) / (GAS1MAX - GAS1MIN);
     44a:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <gas1perc>
     44e:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <gas1perc+0x1>
     452:	44 e6       	ldi	r20, 0x64	; 100
     454:	48 9f       	mul	r20, r24
     456:	90 01       	movw	r18, r0
     458:	49 9f       	mul	r20, r25
     45a:	30 0d       	add	r19, r0
     45c:	11 24       	eor	r1, r1
     45e:	36 95       	lsr	r19
     460:	27 95       	ror	r18
     462:	36 95       	lsr	r19
     464:	27 95       	ror	r18
     466:	a7 e8       	ldi	r26, 0x87	; 135
     468:	b1 e6       	ldi	r27, 0x61	; 97
     46a:	5b d6       	rcall	.+3254   	; 0x1122 <__umulhisi3>
     46c:	96 95       	lsr	r25
     46e:	87 95       	ror	r24
     470:	96 95       	lsr	r25
     472:	87 95       	ror	r24
     474:	96 95       	lsr	r25
     476:	87 95       	ror	r24
     478:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <gas1perc+0x1>
     47c:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <gas1perc>
				break;
     480:	df c0       	rjmp	.+446    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>

			case GAS_2:
				gas2 = (ReceiveData[1] + (ReceiveData[2] << 8));
     482:	ed e6       	ldi	r30, 0x6D	; 109
     484:	f3 e0       	ldi	r31, 0x03	; 3
     486:	82 81       	ldd	r24, Z+2	; 0x02
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	98 2f       	mov	r25, r24
     48c:	88 27       	eor	r24, r24
     48e:	21 81       	ldd	r18, Z+1	; 0x01
     490:	82 0f       	add	r24, r18
     492:	91 1d       	adc	r25, r1
     494:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <gas2+0x1>
     498:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <gas2>
				gas2perc = (gas2 < GAS2MIN) ? 0 : ((gas2 > GAS2MAX) ? (GAS2MAX - GAS2MIN) : (gas2 - GAS2MIN));
     49c:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <gas2>
     4a0:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <gas2+0x1>
     4a4:	81 32       	cpi	r24, 0x21	; 33
     4a6:	92 40       	sbci	r25, 0x02	; 2
     4a8:	70 f0       	brcs	.+28     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4aa:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <gas2>
     4ae:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <gas2+0x1>
     4b2:	8d 37       	cpi	r24, 0x7D	; 125
     4b4:	92 40       	sbci	r25, 0x02	; 2
     4b6:	50 f4       	brcc	.+20     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4b8:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <gas2>
     4bc:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <gas2+0x1>
     4c0:	81 52       	subi	r24, 0x21	; 33
     4c2:	92 40       	sbci	r25, 0x02	; 2
     4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4cc:	8b e5       	ldi	r24, 0x5B	; 91
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <gas2perc+0x1>
     4d4:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <gas2perc>
				gas2perc = (gas2perc * 100) / (GAS2MAX - GAS2MIN);
     4d8:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <gas2perc>
     4dc:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <gas2perc+0x1>
     4e0:	24 e6       	ldi	r18, 0x64	; 100
     4e2:	28 9f       	mul	r18, r24
     4e4:	a0 01       	movw	r20, r0
     4e6:	29 9f       	mul	r18, r25
     4e8:	50 0d       	add	r21, r0
     4ea:	11 24       	eor	r1, r1
     4ec:	9a 01       	movw	r18, r20
     4ee:	a7 e1       	ldi	r26, 0x17	; 23
     4f0:	b8 e6       	ldi	r27, 0x68	; 104
     4f2:	17 d6       	rcall	.+3118   	; 0x1122 <__umulhisi3>
     4f4:	48 1b       	sub	r20, r24
     4f6:	59 0b       	sbc	r21, r25
     4f8:	56 95       	lsr	r21
     4fa:	47 95       	ror	r20
     4fc:	84 0f       	add	r24, r20
     4fe:	95 1f       	adc	r25, r21
     500:	00 24       	eor	r0, r0
     502:	88 0f       	add	r24, r24
     504:	99 1f       	adc	r25, r25
     506:	00 1c       	adc	r0, r0
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	00 1c       	adc	r0, r0
     50e:	89 2f       	mov	r24, r25
     510:	90 2d       	mov	r25, r0
     512:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <gas2perc+0x1>
     516:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <gas2perc>
				break;
     51a:	92 c0       	rjmp	.+292    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>

			case BRAKE:
				brake = (ReceiveData[1] + (ReceiveData[2] << 8));
     51c:	ed e6       	ldi	r30, 0x6D	; 109
     51e:	f3 e0       	ldi	r31, 0x03	; 3
     520:	82 81       	ldd	r24, Z+2	; 0x02
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	98 2f       	mov	r25, r24
     526:	88 27       	eor	r24, r24
     528:	21 81       	ldd	r18, Z+1	; 0x01
     52a:	82 0f       	add	r24, r18
     52c:	91 1d       	adc	r25, r1
     52e:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <brake+0x1>
     532:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <brake>
				brakeperc = (brake < BRAKEMIN) ? 0 : ((brake > BRAKEMAX) ? (BRAKEMAX - BRAKEMIN) : (brake - BRAKEMIN));
     536:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <brake>
     53a:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <brake+0x1>
     53e:	44 97       	sbiw	r24, 0x14	; 20
     540:	68 f0       	brcs	.+26     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
     542:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <brake>
     546:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <brake+0x1>
     54a:	85 36       	cpi	r24, 0x65	; 101
     54c:	91 05       	cpc	r25, r1
     54e:	48 f4       	brcc	.+18     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     550:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <brake>
     554:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <brake+0x1>
     558:	44 97       	sbiw	r24, 0x14	; 20
     55a:	05 c0       	rjmp	.+10     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	02 c0       	rjmp	.+4      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     562:	80 e5       	ldi	r24, 0x50	; 80
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <brakeperc+0x1>
     56a:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <brakeperc>
				brakeperc = (brakeperc * 100) / (BRAKEMAX - BRAKEMIN);
     56e:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <brakeperc>
     572:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <brakeperc+0x1>
     576:	44 e6       	ldi	r20, 0x64	; 100
     578:	48 9f       	mul	r20, r24
     57a:	90 01       	movw	r18, r0
     57c:	49 9f       	mul	r20, r25
     57e:	30 0d       	add	r19, r0
     580:	11 24       	eor	r1, r1
     582:	ad ec       	ldi	r26, 0xCD	; 205
     584:	bc ec       	ldi	r27, 0xCC	; 204
     586:	cd d5       	rcall	.+2970   	; 0x1122 <__umulhisi3>
     588:	00 24       	eor	r0, r0
     58a:	88 0f       	add	r24, r24
     58c:	99 1f       	adc	r25, r25
     58e:	00 1c       	adc	r0, r0
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	00 1c       	adc	r0, r0
     596:	89 2f       	mov	r24, r25
     598:	90 2d       	mov	r25, r0
     59a:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <brakeperc+0x1>
     59e:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <brakeperc>
				break;
     5a2:	4e c0       	rjmp	.+156    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
			
			case SHUTDOWN:
				if (ReceiveData[1]) shutdownon = 1;
     5a4:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <ReceiveData+0x1>
     5a8:	88 23       	and	r24, r24
     5aa:	09 f4       	brne	.+2      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     5ac:	49 c0       	rjmp	.+146    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <shutdownon>
     5b4:	45 c0       	rjmp	.+138    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
				break;
				
			case RPM_FRONT_LEFT:
				rpm_fl = (ReceiveData[1] + (ReceiveData[2] << 8));
     5b6:	ed e6       	ldi	r30, 0x6D	; 109
     5b8:	f3 e0       	ldi	r31, 0x03	; 3
     5ba:	82 81       	ldd	r24, Z+2	; 0x02
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	98 2f       	mov	r25, r24
     5c0:	88 27       	eor	r24, r24
     5c2:	21 81       	ldd	r18, Z+1	; 0x01
     5c4:	82 0f       	add	r24, r18
     5c6:	91 1d       	adc	r25, r1
     5c8:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <rpm_fl+0x1>
     5cc:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <rpm_fl>
				break;
     5d0:	37 c0       	rjmp	.+110    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
				
			case RPM_FRONT_RIGHT:
				rpm_fr = (ReceiveData[1] + (ReceiveData[2] << 8));
     5d2:	ed e6       	ldi	r30, 0x6D	; 109
     5d4:	f3 e0       	ldi	r31, 0x03	; 3
     5d6:	82 81       	ldd	r24, Z+2	; 0x02
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	98 2f       	mov	r25, r24
     5dc:	88 27       	eor	r24, r24
     5de:	21 81       	ldd	r18, Z+1	; 0x01
     5e0:	82 0f       	add	r24, r18
     5e2:	91 1d       	adc	r25, r1
     5e4:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <rpm_fr+0x1>
     5e8:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <rpm_fr>
				break;
     5ec:	29 c0       	rjmp	.+82     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
				
			case STEERING_POS:
				steerpos = (ReceiveData[1] + (ReceiveData[2] << 8));
     5ee:	ed e6       	ldi	r30, 0x6D	; 109
     5f0:	f3 e0       	ldi	r31, 0x03	; 3
     5f2:	82 81       	ldd	r24, Z+2	; 0x02
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	98 2f       	mov	r25, r24
     5f8:	88 27       	eor	r24, r24
     5fa:	21 81       	ldd	r18, Z+1	; 0x01
     5fc:	82 0f       	add	r24, r18
     5fe:	91 1d       	adc	r25, r1
     600:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <steerpos+0x1>
     604:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <steerpos>
				break;
     608:	1b c0       	rjmp	.+54     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
				
			case FLOW_LEFT:
				flowleft = (ReceiveData[1] + (ReceiveData[2] << 8));
     60a:	ed e6       	ldi	r30, 0x6D	; 109
     60c:	f3 e0       	ldi	r31, 0x03	; 3
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	98 2f       	mov	r25, r24
     614:	88 27       	eor	r24, r24
     616:	21 81       	ldd	r18, Z+1	; 0x01
     618:	82 0f       	add	r24, r18
     61a:	91 1d       	adc	r25, r1
     61c:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <flowleft+0x1>
     620:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <flowleft>
				break;
     624:	0d c0       	rjmp	.+26     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
				
			case FLOW_RIGHT:
				flowleft = (ReceiveData[1] + (ReceiveData[2] << 8));
     626:	ed e6       	ldi	r30, 0x6D	; 109
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	82 81       	ldd	r24, Z+2	; 0x02
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	98 2f       	mov	r25, r24
     630:	88 27       	eor	r24, r24
     632:	21 81       	ldd	r18, Z+1	; 0x01
     634:	82 0f       	add	r24, r18
     636:	91 1d       	adc	r25, r1
     638:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <flowleft+0x1>
     63c:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <flowleft>
     640:	ed e6       	ldi	r30, 0x6D	; 109
     642:	f3 e0       	ldi	r31, 0x03	; 3
     644:	85 e7       	ldi	r24, 0x75	; 117
     646:	93 e0       	ldi	r25, 0x03	; 3
				break;
		}
	}
	
	for (int8_t i = 0; i < 8; i++) ReceiveData[i] = 0;
     648:	11 92       	st	Z+, r1
     64a:	e8 17       	cp	r30, r24
     64c:	f9 07       	cpc	r31, r25
     64e:	e1 f7       	brne	.-8      	; 0x648 <__LOCK_REGION_LENGTH__+0x248>


	CANSTMOB = 0x00; // Clear RXOK flag
     650:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 3 << DLC0)); //CAN MOb Control and DLC Register: (1<<CONMOB1) = enable reception. (0<<IDE) = can standard rev 2.0A ( id length = 11 bits), (3 << DLC0) 3 Bytes in the data field of the message.
     654:	83 e8       	ldi	r24, 0x83	; 131
     656:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 0 << MOBNB0 ); // select 0000 = CANMOB0
     65a:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
}
     65e:	ff 91       	pop	r31
     660:	ef 91       	pop	r30
     662:	bf 91       	pop	r27
     664:	af 91       	pop	r26
     666:	9f 91       	pop	r25
     668:	8f 91       	pop	r24
     66a:	7f 91       	pop	r23
     66c:	6f 91       	pop	r22
     66e:	5f 91       	pop	r21
     670:	4f 91       	pop	r20
     672:	3f 91       	pop	r19
     674:	2f 91       	pop	r18
     676:	0f 90       	pop	r0
     678:	0b be       	out	0x3b, r0	; 59
     67a:	0f 90       	pop	r0
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	0f 90       	pop	r0
     680:	1f 90       	pop	r1
     682:	18 95       	reti

00000684 <get_error>:
#include "Defines.h"
#include "Error.h"

char* get_error(enum _error e)
{
	switch(e)
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	8b 30       	cpi	r24, 0x0B	; 11
     688:	91 05       	cpc	r25, r1
     68a:	10 f5       	brcc	.+68     	; 0x6d0 <get_error+0x4c>
     68c:	fc 01       	movw	r30, r24
     68e:	e5 56       	subi	r30, 0x65	; 101
     690:	ff 4f       	sbci	r31, 0xFF	; 255
     692:	3e c5       	rjmp	.+2684   	; 0x1110 <__tablejump2__>
	{
		case ERROR_NONE:		return "No error";

		case ERROR_GAS_DISCREPANCY:	return "Gas discrepancy";
     694:	8b e0       	ldi	r24, 0x0B	; 11
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	08 95       	ret
		case ERROR_GASBRAKE:		return "Gas & brake pressed";
     69a:	8b e1       	ldi	r24, 0x1B	; 27
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	08 95       	ret

		case ERROR_GAS1RANGE:		return "Gas 1 out of range";
     6a0:	8f e2       	ldi	r24, 0x2F	; 47
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	08 95       	ret
		case ERROR_GAS2RANGE:		return "Gas 2 out of range";
     6a6:	82 e4       	ldi	r24, 0x42	; 66
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	08 95       	ret
		case ERROR_BRAKERANGE:		return "Brake out of range";
     6ac:	85 e5       	ldi	r24, 0x55	; 85
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	08 95       	ret

		case ERROR_GAS1SENSOR:		return "Gas 1 sensor faulty";
     6b2:	88 e6       	ldi	r24, 0x68	; 104
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	08 95       	ret
		case ERROR_GAS2SENSOR:		return "Gas 2 sensor faulty";
     6b8:	8c e7       	ldi	r24, 0x7C	; 124
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	08 95       	ret
		case ERROR_BRAKESENSOR:		return "Brake sensor faulty";
     6be:	80 e9       	ldi	r24, 0x90	; 144
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	08 95       	ret
		
		case ERROR_PUMPFLOW:		return "No pump water flow";
     6c4:	84 ea       	ldi	r24, 0xA4	; 164
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	08 95       	ret
		case ERROR_PUMPTEMP:		return "Pump temp too high";
     6ca:	87 eb       	ldi	r24, 0xB7	; 183
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	08 95       	ret

		default:			return "Unknown error?!";
     6d0:	8a ec       	ldi	r24, 0xCA	; 202
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	08 95       	ret

char* get_error(enum _error e)
{
	switch(e)
	{
		case ERROR_NONE:		return "No error";
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	91 e0       	ldi	r25, 0x01	; 1
		case ERROR_PUMPFLOW:		return "No pump water flow";
		case ERROR_PUMPTEMP:		return "Pump temp too high";

		default:			return "Unknown error?!";
	}
}
     6da:	08 95       	ret

000006dc <e_checkranges>:

void e_checkranges()
{
	if(gas1 < GAS1MIN - RANGESLACK || gas1 > GAS1MAX + RANGESLACK) _errorcode = ERROR_GAS1RANGE;
     6dc:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <gas1>
     6e0:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <gas1+0x1>
     6e4:	81 3a       	cpi	r24, 0xA1	; 161
     6e6:	92 40       	sbci	r25, 0x02	; 2
     6e8:	38 f0       	brcs	.+14     	; 0x6f8 <e_checkranges+0x1c>
     6ea:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <gas1>
     6ee:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <gas1+0x1>
     6f2:	8e 31       	cpi	r24, 0x1E	; 30
     6f4:	93 40       	sbci	r25, 0x03	; 3
     6f6:	18 f0       	brcs	.+6      	; 0x6fe <e_checkranges+0x22>
     6f8:	83 e0       	ldi	r24, 0x03	; 3
     6fa:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <_errorcode>
	if(gas2 < GAS2MIN - RANGESLACK || gas2 > GAS2MAX + RANGESLACK) _errorcode = ERROR_GAS2RANGE;
     6fe:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <gas2>
     702:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <gas2+0x1>
     706:	8d 30       	cpi	r24, 0x0D	; 13
     708:	92 40       	sbci	r25, 0x02	; 2
     70a:	38 f0       	brcs	.+14     	; 0x71a <e_checkranges+0x3e>
     70c:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <gas2>
     710:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <gas2+0x1>
     714:	81 39       	cpi	r24, 0x91	; 145
     716:	92 40       	sbci	r25, 0x02	; 2
     718:	18 f0       	brcs	.+6      	; 0x720 <e_checkranges+0x44>
     71a:	84 e0       	ldi	r24, 0x04	; 4
     71c:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <_errorcode>
     720:	08 95       	ret

00000722 <e_checkdiscrepancy>:
	//if(brake < BRAKEMAX - RANGESLACK || brake > BRAKEMAX + RANGESLACK) _errorcode = ERROR_BRAKERANGE;
}

void e_checkdiscrepancy()
{
	int8_t dif = gas1perc - gas2perc;
     722:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <gas1perc>
     726:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <gas1perc+0x1>
     72a:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <gas2perc>
     72e:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <gas2perc+0x1>
	if(dif < -10 || dif > 10) _errorcode = ERROR_GAS_DISCREPANCY;
     732:	86 5f       	subi	r24, 0xF6	; 246
     734:	82 1b       	sub	r24, r18
     736:	85 31       	cpi	r24, 0x15	; 21
     738:	18 f0       	brcs	.+6      	; 0x740 <e_checkdiscrepancy+0x1e>
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <_errorcode>
     740:	08 95       	ret

00000742 <e_checksensors>:
}

void e_checksensors()
{
	if(gas1 == 0x0000 || gas1 == 0xFFFF) _errorcode = ERROR_GAS1SENSOR;
     742:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <gas1>
     746:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <gas1+0x1>
     74a:	89 2b       	or	r24, r25
     74c:	31 f0       	breq	.+12     	; 0x75a <e_checksensors+0x18>
     74e:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <gas1>
     752:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <gas1+0x1>
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	19 f4       	brne	.+6      	; 0x760 <e_checksensors+0x1e>
     75a:	86 e0       	ldi	r24, 0x06	; 6
     75c:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <_errorcode>
	if(gas2 == 0x0000 || gas2 == 0xFFFF) _errorcode = ERROR_GAS2SENSOR;
     760:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <gas2>
     764:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <gas2+0x1>
     768:	89 2b       	or	r24, r25
     76a:	31 f0       	breq	.+12     	; 0x778 <e_checksensors+0x36>
     76c:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <gas2>
     770:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <gas2+0x1>
     774:	01 96       	adiw	r24, 0x01	; 1
     776:	19 f4       	brne	.+6      	; 0x77e <e_checksensors+0x3c>
     778:	87 e0       	ldi	r24, 0x07	; 7
     77a:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <_errorcode>
	if(brake == 0x0000 || brake == 0xFFFF) _errorcode = ERROR_BRAKESENSOR;
     77e:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <brake>
     782:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <brake+0x1>
     786:	89 2b       	or	r24, r25
     788:	31 f0       	breq	.+12     	; 0x796 <e_checksensors+0x54>
     78a:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <brake>
     78e:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <brake+0x1>
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	19 f4       	brne	.+6      	; 0x79c <e_checksensors+0x5a>
     796:	88 e0       	ldi	r24, 0x08	; 8
     798:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <_errorcode>
     79c:	08 95       	ret

0000079e <e_checkflow>:
}

void e_checkflow()
{
	if(flowleft < FLOWMIN || flowright < FLOWMIN) _errorcode = ERROR_PUMPFLOW;
     79e:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <flowleft>
     7a2:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <flowleft+0x1>
     7a6:	0a 97       	sbiw	r24, 0x0a	; 10
     7a8:	30 f0       	brcs	.+12     	; 0x7b6 <e_checkflow+0x18>
     7aa:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <flowright>
     7ae:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <flowright+0x1>
     7b2:	0a 97       	sbiw	r24, 0x0a	; 10
     7b4:	18 f4       	brcc	.+6      	; 0x7bc <e_checkflow+0x1e>
     7b6:	89 e0       	ldi	r24, 0x09	; 9
     7b8:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <_errorcode>
     7bc:	08 95       	ret

000007be <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
     7be:	16 9a       	sbi	0x02, 6	; 2
     7c0:	85 e0       	ldi	r24, 0x05	; 5
     7c2:	8a 95       	dec	r24
     7c4:	f1 f7       	brne	.-4      	; 0x7c2 <toggle_e+0x4>
     7c6:	00 00       	nop
     7c8:	16 98       	cbi	0x02, 6	; 2
     7ca:	08 95       	ret

000007cc <lcd_write>:
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	d8 2f       	mov	r29, r24
     7d2:	66 23       	and	r22, r22
     7d4:	11 f0       	breq	.+4      	; 0x7da <lcd_write+0xe>
     7d6:	14 9a       	sbi	0x02, 4	; 2
     7d8:	01 c0       	rjmp	.+2      	; 0x7dc <lcd_write+0x10>
     7da:	14 98       	cbi	0x02, 4	; 2
     7dc:	15 98       	cbi	0x02, 5	; 2
     7de:	81 b1       	in	r24, 0x01	; 1
     7e0:	8f 60       	ori	r24, 0x0F	; 15
     7e2:	81 b9       	out	0x01, r24	; 1
     7e4:	c2 b1       	in	r28, 0x02	; 2
     7e6:	c0 7f       	andi	r28, 0xF0	; 240
     7e8:	8d 2f       	mov	r24, r29
     7ea:	82 95       	swap	r24
     7ec:	8f 70       	andi	r24, 0x0F	; 15
     7ee:	8c 2b       	or	r24, r28
     7f0:	82 b9       	out	0x02, r24	; 2
     7f2:	e5 df       	rcall	.-54     	; 0x7be <toggle_e>
     7f4:	df 70       	andi	r29, 0x0F	; 15
     7f6:	dc 2b       	or	r29, r28
     7f8:	d2 b9       	out	0x02, r29	; 2
     7fa:	e1 df       	rcall	.-62     	; 0x7be <toggle_e>
     7fc:	cf 60       	ori	r28, 0x0F	; 15
     7fe:	c2 b9       	out	0x02, r28	; 2
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	08 95       	ret

00000806 <lcd_read>:
     806:	88 23       	and	r24, r24
     808:	11 f0       	breq	.+4      	; 0x80e <lcd_read+0x8>
     80a:	14 9a       	sbi	0x02, 4	; 2
     80c:	01 c0       	rjmp	.+2      	; 0x810 <lcd_read+0xa>
     80e:	14 98       	cbi	0x02, 4	; 2
     810:	15 9a       	sbi	0x02, 5	; 2
     812:	81 b1       	in	r24, 0x01	; 1
     814:	80 7f       	andi	r24, 0xF0	; 240
     816:	81 b9       	out	0x01, r24	; 1
     818:	16 9a       	sbi	0x02, 6	; 2
     81a:	85 e0       	ldi	r24, 0x05	; 5
     81c:	8a 95       	dec	r24
     81e:	f1 f7       	brne	.-4      	; 0x81c <lcd_read+0x16>
     820:	00 00       	nop
     822:	90 b1       	in	r25, 0x00	; 0
     824:	16 98       	cbi	0x02, 6	; 2
     826:	85 e0       	ldi	r24, 0x05	; 5
     828:	8a 95       	dec	r24
     82a:	f1 f7       	brne	.-4      	; 0x828 <lcd_read+0x22>
     82c:	00 00       	nop
     82e:	16 9a       	sbi	0x02, 6	; 2
     830:	85 e0       	ldi	r24, 0x05	; 5
     832:	8a 95       	dec	r24
     834:	f1 f7       	brne	.-4      	; 0x832 <lcd_read+0x2c>
     836:	00 00       	nop
     838:	20 b1       	in	r18, 0x00	; 0
     83a:	2f 70       	andi	r18, 0x0F	; 15
     83c:	89 2f       	mov	r24, r25
     83e:	82 95       	swap	r24
     840:	80 7f       	andi	r24, 0xF0	; 240
     842:	16 98       	cbi	0x02, 6	; 2
     844:	82 2b       	or	r24, r18
     846:	08 95       	ret

00000848 <lcd_waitbusy>:
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	dd df       	rcall	.-70     	; 0x806 <lcd_read>
     84c:	88 23       	and	r24, r24
     84e:	e4 f3       	brlt	.-8      	; 0x848 <lcd_waitbusy>
     850:	85 e1       	ldi	r24, 0x15	; 21
     852:	8a 95       	dec	r24
     854:	f1 f7       	brne	.-4      	; 0x852 <lcd_waitbusy+0xa>
     856:	00 00       	nop
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	d5 cf       	rjmp	.-86     	; 0x806 <lcd_read>
     85c:	08 95       	ret

0000085e <lcd_command>:
     85e:	cf 93       	push	r28
     860:	c8 2f       	mov	r28, r24
     862:	f2 df       	rcall	.-28     	; 0x848 <lcd_waitbusy>
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	8c 2f       	mov	r24, r28
     868:	b1 df       	rcall	.-158    	; 0x7cc <lcd_write>
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <lcd_gotoxy>:
     86e:	61 11       	cpse	r22, r1
     870:	03 c0       	rjmp	.+6      	; 0x878 <lcd_gotoxy+0xa>
     872:	80 58       	subi	r24, 0x80	; 128
     874:	f4 cf       	rjmp	.-24     	; 0x85e <lcd_command>
     876:	08 95       	ret
     878:	61 30       	cpi	r22, 0x01	; 1
     87a:	19 f4       	brne	.+6      	; 0x882 <lcd_gotoxy+0x14>
     87c:	80 54       	subi	r24, 0x40	; 64
     87e:	ef cf       	rjmp	.-34     	; 0x85e <lcd_command>
     880:	08 95       	ret
     882:	62 30       	cpi	r22, 0x02	; 2
     884:	19 f4       	brne	.+6      	; 0x88c <lcd_gotoxy+0x1e>
     886:	8c 56       	subi	r24, 0x6C	; 108
     888:	ea cf       	rjmp	.-44     	; 0x85e <lcd_command>
     88a:	08 95       	ret
     88c:	8c 52       	subi	r24, 0x2C	; 44
     88e:	e7 cf       	rjmp	.-50     	; 0x85e <lcd_command>
     890:	08 95       	ret

00000892 <lcd_clrscr>:
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	e4 cf       	rjmp	.-56     	; 0x85e <lcd_command>
     896:	08 95       	ret

00000898 <lcd_putc>:
     898:	cf 93       	push	r28
     89a:	c8 2f       	mov	r28, r24
     89c:	d5 df       	rcall	.-86     	; 0x848 <lcd_waitbusy>
     89e:	ca 30       	cpi	r28, 0x0A	; 10
     8a0:	99 f4       	brne	.+38     	; 0x8c8 <lcd_putc+0x30>
     8a2:	84 31       	cpi	r24, 0x14	; 20
     8a4:	48 f0       	brcs	.+18     	; 0x8b8 <lcd_putc+0x20>
     8a6:	90 ec       	ldi	r25, 0xC0	; 192
     8a8:	98 0f       	add	r25, r24
     8aa:	94 31       	cpi	r25, 0x14	; 20
     8ac:	38 f0       	brcs	.+14     	; 0x8bc <lcd_putc+0x24>
     8ae:	84 51       	subi	r24, 0x14	; 20
     8b0:	8c 32       	cpi	r24, 0x2C	; 44
     8b2:	30 f0       	brcs	.+12     	; 0x8c0 <lcd_putc+0x28>
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	05 c0       	rjmp	.+10     	; 0x8c2 <lcd_putc+0x2a>
     8b8:	80 e4       	ldi	r24, 0x40	; 64
     8ba:	03 c0       	rjmp	.+6      	; 0x8c2 <lcd_putc+0x2a>
     8bc:	84 e1       	ldi	r24, 0x14	; 20
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <lcd_putc+0x2a>
     8c0:	84 e5       	ldi	r24, 0x54	; 84
     8c2:	80 58       	subi	r24, 0x80	; 128
     8c4:	cc df       	rcall	.-104    	; 0x85e <lcd_command>
     8c6:	03 c0       	rjmp	.+6      	; 0x8ce <lcd_putc+0x36>
     8c8:	61 e0       	ldi	r22, 0x01	; 1
     8ca:	8c 2f       	mov	r24, r28
     8cc:	7f df       	rcall	.-258    	; 0x7cc <lcd_write>
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <lcd_puts>:
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	ec 01       	movw	r28, r24
     8d8:	21 96       	adiw	r28, 0x01	; 1
     8da:	fc 01       	movw	r30, r24
     8dc:	80 81       	ld	r24, Z
     8de:	88 23       	and	r24, r24
     8e0:	21 f0       	breq	.+8      	; 0x8ea <lcd_puts+0x18>
     8e2:	da df       	rcall	.-76     	; 0x898 <lcd_putc>
     8e4:	89 91       	ld	r24, Y+
     8e6:	81 11       	cpse	r24, r1
     8e8:	fc cf       	rjmp	.-8      	; 0x8e2 <lcd_puts+0x10>
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	08 95       	ret

000008f0 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     8f0:	cf 93       	push	r28
     8f2:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
     8f4:	81 b1       	in	r24, 0x01	; 1
     8f6:	8f 67       	ori	r24, 0x7F	; 127
     8f8:	81 b9       	out	0x01, r24	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	99 ef       	ldi	r25, 0xF9	; 249
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	f1 f7       	brne	.-4      	; 0x8fe <lcd_init+0xe>
     902:	00 c0       	rjmp	.+0      	; 0x904 <lcd_init+0x14>
     904:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
     906:	11 9a       	sbi	0x02, 1	; 2
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
    lcd_e_toggle();
     908:	10 9a       	sbi	0x02, 0	; 2
     90a:	59 df       	rcall	.-334    	; 0x7be <toggle_e>
     90c:	8f e1       	ldi	r24, 0x1F	; 31
     90e:	9e e4       	ldi	r25, 0x4E	; 78
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	f1 f7       	brne	.-4      	; 0x910 <lcd_init+0x20>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     914:	00 c0       	rjmp	.+0      	; 0x916 <lcd_init+0x26>
     916:	00 00       	nop
     918:	52 df       	rcall	.-348    	; 0x7be <toggle_e>
     91a:	8f ef       	ldi	r24, 0xFF	; 255
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	f1 f7       	brne	.-4      	; 0x91e <lcd_init+0x2e>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     922:	00 c0       	rjmp	.+0      	; 0x924 <lcd_init+0x34>
     924:	00 00       	nop
     926:	4b df       	rcall	.-362    	; 0x7be <toggle_e>
     928:	8f ef       	ldi	r24, 0xFF	; 255
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	f1 f7       	brne	.-4      	; 0x92c <lcd_init+0x3c>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     930:	00 c0       	rjmp	.+0      	; 0x932 <lcd_init+0x42>
    lcd_e_toggle();
     932:	00 00       	nop
     934:	10 98       	cbi	0x02, 0	; 2
     936:	43 df       	rcall	.-378    	; 0x7be <toggle_e>
     938:	8f ef       	ldi	r24, 0xFF	; 255
     93a:	90 e0       	ldi	r25, 0x00	; 0
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     93c:	01 97       	sbiw	r24, 0x01	; 1
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     93e:	f1 f7       	brne	.-4      	; 0x93c <lcd_init+0x4c>
     940:	00 c0       	rjmp	.+0      	; 0x942 <lcd_init+0x52>
    lcd_clrscr();                           /* display clear                */ 
     942:	00 00       	nop
     944:	88 e2       	ldi	r24, 0x28	; 40
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     946:	8b df       	rcall	.-234    	; 0x85e <lcd_command>
     948:	88 e0       	ldi	r24, 0x08	; 8
     94a:	89 df       	rcall	.-238    	; 0x85e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     94c:	a2 df       	rcall	.-188    	; 0x892 <lcd_clrscr>
     94e:	86 e0       	ldi	r24, 0x06	; 6
     950:	86 df       	rcall	.-244    	; 0x85e <lcd_command>

}/* lcd_init */
     952:	8c 2f       	mov	r24, r28
     954:	84 df       	rcall	.-248    	; 0x85e <lcd_command>
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <__vector_10>:
	
	TCNT0 = _TM0;
}

ISR(TIMER2_OVF_vect) //8 Hz
{
     95a:	1f 92       	push	r1
     95c:	0f 92       	push	r0
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	0f 92       	push	r0
     962:	11 24       	eor	r1, r1
     964:	0b b6       	in	r0, 0x3b	; 59
     966:	0f 92       	push	r0
     968:	2f 93       	push	r18
     96a:	3f 93       	push	r19
     96c:	4f 93       	push	r20
     96e:	5f 93       	push	r21
     970:	6f 93       	push	r22
     972:	7f 93       	push	r23
     974:	8f 93       	push	r24
     976:	9f 93       	push	r25
     978:	af 93       	push	r26
     97a:	bf 93       	push	r27
     97c:	ef 93       	push	r30
     97e:	ff 93       	push	r31
	//Reset counter and full refresh LCD
	TCNT2 = _TM2;
     980:	80 ec       	ldi	r24, 0xC0	; 192
     982:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	lcd_refresh();
}
     986:	59 d3       	rcall	.+1714   	; 0x103a <lcd_refresh>
     988:	ff 91       	pop	r31
     98a:	ef 91       	pop	r30
     98c:	bf 91       	pop	r27
     98e:	af 91       	pop	r26
     990:	9f 91       	pop	r25
     992:	8f 91       	pop	r24
     994:	7f 91       	pop	r23
     996:	6f 91       	pop	r22
     998:	5f 91       	pop	r21
     99a:	4f 91       	pop	r20
     99c:	3f 91       	pop	r19
     99e:	2f 91       	pop	r18
     9a0:	0f 90       	pop	r0
     9a2:	0b be       	out	0x3b, r0	; 59
     9a4:	0f 90       	pop	r0
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	0f 90       	pop	r0
     9aa:	1f 90       	pop	r1
     9ac:	18 95       	reti

000009ae <debounce>:

void debounce(uint8_t* btn, uint8_t val)
{
     9ae:	fc 01       	movw	r30, r24
	if(*btn >= DEBOUNCE_TIME)
     9b0:	90 81       	ld	r25, Z
     9b2:	98 30       	cpi	r25, 0x08	; 8
     9b4:	48 f4       	brcc	.+18     	; 0x9c8 <debounce+0x1a>
	{
		if(!val) btn = 0;
	}
	else if(*btn > 0)
     9b6:	99 23       	and	r25, r25
     9b8:	19 f0       	breq	.+6      	; 0x9c0 <debounce+0x12>
	{
		(*btn)++;
     9ba:	9f 5f       	subi	r25, 0xFF	; 255
     9bc:	90 83       	st	Z, r25
     9be:	08 95       	ret
	}
	else
	{
		if(val) (*btn) = 1;
     9c0:	66 23       	and	r22, r22
     9c2:	11 f0       	breq	.+4      	; 0x9c8 <debounce+0x1a>
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	80 83       	st	Z, r24
     9c8:	08 95       	ret

000009ca <__vector_17>:
void debounce(uint8_t* btn, uint8_t val);

uint8_t ttt = 0; //Counter to make sure each node only gets one request at a time

ISR(TIMER0_OVF_vect)
{
     9ca:	1f 92       	push	r1
     9cc:	0f 92       	push	r0
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	0f 92       	push	r0
     9d2:	11 24       	eor	r1, r1
     9d4:	0b b6       	in	r0, 0x3b	; 59
     9d6:	0f 92       	push	r0
     9d8:	cf 92       	push	r12
     9da:	df 92       	push	r13
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	2f 93       	push	r18
     9e2:	3f 93       	push	r19
     9e4:	4f 93       	push	r20
     9e6:	5f 93       	push	r21
     9e8:	6f 93       	push	r22
     9ea:	7f 93       	push	r23
     9ec:	8f 93       	push	r24
     9ee:	9f 93       	push	r25
     9f0:	af 93       	push	r26
     9f2:	bf 93       	push	r27
     9f4:	ef 93       	push	r30
     9f6:	ff 93       	push	r31
	data_send8(CAN_REQUEST_DATA, SHUTDOWN, ECU2ID);
     9f8:	45 e0       	ldi	r20, 0x05	; 5
     9fa:	52 e0       	ldi	r21, 0x02	; 2
     9fc:	61 e6       	ldi	r22, 0x61	; 97
     9fe:	8d e3       	ldi	r24, 0x3D	; 61
     a00:	6d dc       	rcall	.-1830   	; 0x2dc <data_send8>
	
	if(shutdownon) return;
     a02:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <shutdownon>
     a06:	81 11       	cpse	r24, r1
     a08:	0e c1       	rjmp	.+540    	; 0xc26 <__vector_17+0x25c>
	
	debounce(&btnblue, PIND & (1<<BUTTONBLUE));
     a0a:	69 b1       	in	r22, 0x09	; 9
     a0c:	64 70       	andi	r22, 0x04	; 4
     a0e:	84 e4       	ldi	r24, 0x44	; 68
     a10:	93 e0       	ldi	r25, 0x03	; 3
     a12:	cd df       	rcall	.-102    	; 0x9ae <debounce>
	debounce(&btngreen, PIND & (1<<BUTTONGREEN));
     a14:	69 b1       	in	r22, 0x09	; 9
     a16:	68 70       	andi	r22, 0x08	; 8
     a18:	83 e4       	ldi	r24, 0x43	; 67
     a1a:	93 e0       	ldi	r25, 0x03	; 3
     a1c:	c8 df       	rcall	.-112    	; 0x9ae <debounce>
	
	//Request gas/brake values
	switch(ttt)
     a1e:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
     a22:	81 30       	cpi	r24, 0x01	; 1
     a24:	79 f0       	breq	.+30     	; 0xa44 <__vector_17+0x7a>
     a26:	18 f0       	brcs	.+6      	; 0xa2e <__vector_17+0x64>
     a28:	82 30       	cpi	r24, 0x02	; 2
     a2a:	b9 f0       	breq	.+46     	; 0xa5a <__vector_17+0x90>
     a2c:	20 c0       	rjmp	.+64     	; 0xa6e <__vector_17+0xa4>
	{
		case 0:
			data_send8(CAN_REQUEST_DATA, RPM_FRONT_LEFT, NODEID1);
     a2e:	41 e0       	ldi	r20, 0x01	; 1
     a30:	52 e0       	ldi	r21, 0x02	; 2
     a32:	62 e1       	ldi	r22, 0x12	; 18
     a34:	8d e3       	ldi	r24, 0x3D	; 61
			data_send8(CAN_REQUEST_DATA, GAS_1, NODEID2);
     a36:	52 dc       	rcall	.-1884   	; 0x2dc <data_send8>
     a38:	42 e0       	ldi	r20, 0x02	; 2
     a3a:	52 e0       	ldi	r21, 0x02	; 2
     a3c:	61 e2       	ldi	r22, 0x21	; 33
			break;
		case 1:
			data_send8(CAN_REQUEST_DATA, RPM_FRONT_RIGHT, NODEID1);
     a3e:	8d e3       	ldi	r24, 0x3D	; 61
     a40:	4d dc       	rcall	.-1894   	; 0x2dc <data_send8>
     a42:	15 c0       	rjmp	.+42     	; 0xa6e <__vector_17+0xa4>
     a44:	41 e0       	ldi	r20, 0x01	; 1
     a46:	52 e0       	ldi	r21, 0x02	; 2
			data_send8(CAN_REQUEST_DATA, GAS_2, NODEID2);
     a48:	63 e1       	ldi	r22, 0x13	; 19
     a4a:	8d e3       	ldi	r24, 0x3D	; 61
     a4c:	47 dc       	rcall	.-1906   	; 0x2dc <data_send8>
     a4e:	42 e0       	ldi	r20, 0x02	; 2
     a50:	52 e0       	ldi	r21, 0x02	; 2
			break;
     a52:	62 e2       	ldi	r22, 0x22	; 34
		case 2:
			data_send8(CAN_REQUEST_DATA, STEERING_POS, NODEID1);
     a54:	8d e3       	ldi	r24, 0x3D	; 61
     a56:	42 dc       	rcall	.-1916   	; 0x2dc <data_send8>
     a58:	0a c0       	rjmp	.+20     	; 0xa6e <__vector_17+0xa4>
     a5a:	41 e0       	ldi	r20, 0x01	; 1
     a5c:	52 e0       	ldi	r21, 0x02	; 2
			data_send8(CAN_REQUEST_DATA, BRAKE, NODEID2);
     a5e:	61 e1       	ldi	r22, 0x11	; 17
     a60:	8d e3       	ldi	r24, 0x3D	; 61
     a62:	3c dc       	rcall	.-1928   	; 0x2dc <data_send8>
     a64:	42 e0       	ldi	r20, 0x02	; 2
     a66:	52 e0       	ldi	r21, 0x02	; 2
			break;
	}
	
	if(_errorcode != ERROR_NONE) change_screen(SCREEN_ERROR);
     a68:	63 e2       	ldi	r22, 0x23	; 35
     a6a:	8d e3       	ldi	r24, 0x3D	; 61
     a6c:	37 dc       	rcall	.-1938   	; 0x2dc <data_send8>
     a6e:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <_errorcode>
     a72:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <_errorcode+0x1>
     a76:	89 2b       	or	r24, r25
     a78:	11 f0       	breq	.+4      	; 0xa7e <__vector_17+0xb4>
	
	switch(ui_current_screen)
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	e5 d2       	rcall	.+1482   	; 0x1048 <change_screen>
     a7e:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <ui_current_screen>
     a82:	82 30       	cpi	r24, 0x02	; 2
     a84:	d1 f0       	breq	.+52     	; 0xaba <__vector_17+0xf0>
     a86:	18 f4       	brcc	.+6      	; 0xa8e <__vector_17+0xc4>
     a88:	88 23       	and	r24, r24
     a8a:	41 f0       	breq	.+16     	; 0xa9c <__vector_17+0xd2>
     a8c:	c1 c0       	rjmp	.+386    	; 0xc10 <__vector_17+0x246>
     a8e:	83 30       	cpi	r24, 0x03	; 3
     a90:	09 f4       	brne	.+2      	; 0xa94 <__vector_17+0xca>
     a92:	42 c0       	rjmp	.+132    	; 0xb18 <__vector_17+0x14e>
     a94:	84 30       	cpi	r24, 0x04	; 4
     a96:	09 f4       	brne	.+2      	; 0xa9a <__vector_17+0xd0>
	{
		case SCREEN_WELCOME:
			if(btnblue == 1)
     a98:	5f c0       	rjmp	.+190    	; 0xb58 <__vector_17+0x18e>
     a9a:	ba c0       	rjmp	.+372    	; 0xc10 <__vector_17+0x246>
     a9c:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <btnblue>
			{
				if(_errorcode == ERROR_NONE) change_screen(SCREEN_START);
     aa0:	81 30       	cpi	r24, 0x01	; 1
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <__vector_17+0xdc>
     aa4:	b5 c0       	rjmp	.+362    	; 0xc10 <__vector_17+0x246>
     aa6:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <_errorcode>
     aaa:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <_errorcode+0x1>
     aae:	89 2b       	or	r24, r25
     ab0:	09 f0       	breq	.+2      	; 0xab4 <__vector_17+0xea>
     ab2:	ae c0       	rjmp	.+348    	; 0xc10 <__vector_17+0x246>
     ab4:	83 e0       	ldi	r24, 0x03	; 3
			}
			break;
		
		case SCREEN_PREDISCHARGING:
			if(predistimer-- == 0)
     ab6:	c8 d2       	rcall	.+1424   	; 0x1048 <change_screen>
     ab8:	ab c0       	rjmp	.+342    	; 0xc10 <__vector_17+0x246>
     aba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     abe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     ac2:	9c 01       	movw	r18, r24
     ac4:	21 50       	subi	r18, 0x01	; 1
     ac6:	31 09       	sbc	r19, r1
     ac8:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
			{
				data_send_ecu(MOTOR_CONTROLLER, _HIGH);
     acc:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
     ad0:	89 2b       	or	r24, r25
     ad2:	31 f4       	brne	.+12     	; 0xae0 <__vector_17+0x116>
				change_screen(SCREEN_DRIVING);
     ad4:	6f ef       	ldi	r22, 0xFF	; 255
     ad6:	86 e5       	ldi	r24, 0x56	; 86
     ad8:	21 dc       	rcall	.-1982   	; 0x31c <data_send_ecu>
			}
			else if(predistimer == PREDISCHARGE_TIMER - 1900)
     ada:	84 e0       	ldi	r24, 0x04	; 4
     adc:	b5 d2       	rcall	.+1386   	; 0x1048 <change_screen>
     ade:	98 c0       	rjmp	.+304    	; 0xc10 <__vector_17+0x246>
     ae0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ae4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
			{
				data_send8(CAN_REQUEST_DATA, FLOW_LEFT, NODEID3);
     ae8:	84 3a       	cpi	r24, 0xA4	; 164
     aea:	9f 41       	sbci	r25, 0x1F	; 31
     aec:	59 f4       	brne	.+22     	; 0xb04 <__vector_17+0x13a>
     aee:	43 e0       	ldi	r20, 0x03	; 3
				data_send8(CAN_REQUEST_DATA, FLOW_RIGHT, NODEID4);
     af0:	52 e0       	ldi	r21, 0x02	; 2
     af2:	61 e3       	ldi	r22, 0x31	; 49
     af4:	8d e3       	ldi	r24, 0x3D	; 61
     af6:	f2 db       	rcall	.-2076   	; 0x2dc <data_send8>
     af8:	44 e0       	ldi	r20, 0x04	; 4
			}
			else if(predistimer == PREDISCHARGE_TIMER - 2000)
     afa:	52 e0       	ldi	r21, 0x02	; 2
     afc:	61 e4       	ldi	r22, 0x41	; 65
     afe:	8d e3       	ldi	r24, 0x3D	; 61
     b00:	ed db       	rcall	.-2086   	; 0x2dc <data_send8>
     b02:	86 c0       	rjmp	.+268    	; 0xc10 <__vector_17+0x246>
     b04:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
			{
				e_checkflow();
     b08:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
			}
			break;
		
		case SCREEN_START:
			if(btngreen == 1)
     b0c:	80 34       	cpi	r24, 0x40	; 64
     b0e:	9f 41       	sbci	r25, 0x1F	; 31
			{
				e_checksensors();
     b10:	09 f0       	breq	.+2      	; 0xb14 <__vector_17+0x14a>
     b12:	7e c0       	rjmp	.+252    	; 0xc10 <__vector_17+0x246>
				e_checkranges();
     b14:	44 de       	rcall	.-888    	; 0x79e <e_checkflow>
     b16:	7c c0       	rjmp	.+248    	; 0xc10 <__vector_17+0x246>
				
				if(_errorcode == ERROR_NONE)
     b18:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <btngreen>
     b1c:	81 30       	cpi	r24, 0x01	; 1
     b1e:	09 f0       	breq	.+2      	; 0xb22 <__vector_17+0x158>
     b20:	77 c0       	rjmp	.+238    	; 0xc10 <__vector_17+0x246>
				{
					data_send_ecu(PREDISCHARGE, _HIGH);
     b22:	0f de       	rcall	.-994    	; 0x742 <e_checksensors>
     b24:	db dd       	rcall	.-1098   	; 0x6dc <e_checkranges>
     b26:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <_errorcode>
					change_screen(SCREEN_PREDISCHARGING);
     b2a:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <_errorcode+0x1>
     b2e:	89 2b       	or	r24, r25
					
					readybeep = RTDS_TIME;
     b30:	09 f0       	breq	.+2      	; 0xb34 <__vector_17+0x16a>
     b32:	6e c0       	rjmp	.+220    	; 0xc10 <__vector_17+0x246>
     b34:	6f ef       	ldi	r22, 0xFF	; 255
     b36:	88 e5       	ldi	r24, 0x58	; 88
					// TODO: Uncomment when beep should be implemented
					//PORTC |= 1 << RTDS
					
					data_send_ecu(RUN_ENABLE, _HIGH);
     b38:	f1 db       	rcall	.-2078   	; 0x31c <data_send_ecu>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	85 d2       	rcall	.+1290   	; 0x1048 <change_screen>
					data_send_ecu(PUMP_ENABLE, _HIGH);
     b3e:	80 ed       	ldi	r24, 0xD0	; 208
				}
			}
			break;
		
		case SCREEN_DRIVING:
			if(ttt == 1)
     b40:	97 e0       	ldi	r25, 0x07	; 7
     b42:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <readybeep+0x1>
     b46:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <readybeep>
			{
				data_send8(CAN_REQUEST_DATA, FLOW_LEFT, NODEID3);
     b4a:	6f ef       	ldi	r22, 0xFF	; 255
     b4c:	85 e5       	ldi	r24, 0x55	; 85
     b4e:	e6 db       	rcall	.-2100   	; 0x31c <data_send_ecu>
     b50:	6f ef       	ldi	r22, 0xFF	; 255
     b52:	89 e5       	ldi	r24, 0x59	; 89
				data_send8(CAN_REQUEST_DATA, FLOW_RIGHT, NODEID4);
     b54:	e3 db       	rcall	.-2106   	; 0x31c <data_send_ecu>
     b56:	5c c0       	rjmp	.+184    	; 0xc10 <__vector_17+0x246>
     b58:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
     b5c:	81 30       	cpi	r24, 0x01	; 1
     b5e:	51 f4       	brne	.+20     	; 0xb74 <__vector_17+0x1aa>
			}
			if(ttt == 3)
     b60:	43 e0       	ldi	r20, 0x03	; 3
     b62:	52 e0       	ldi	r21, 0x02	; 2
     b64:	61 e3       	ldi	r22, 0x31	; 49
     b66:	8d e3       	ldi	r24, 0x3D	; 61
			{
				e_checkflow();
     b68:	b9 db       	rcall	.-2190   	; 0x2dc <data_send8>
     b6a:	44 e0       	ldi	r20, 0x04	; 4
				e_checksensors();
     b6c:	52 e0       	ldi	r21, 0x02	; 2
     b6e:	61 e4       	ldi	r22, 0x41	; 65
				e_checkranges();
     b70:	8d e3       	ldi	r24, 0x3D	; 61
				e_checkdiscrepancy();	
     b72:	b4 db       	rcall	.-2200   	; 0x2dc <data_send8>
     b74:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
			}
			
			//*
			if(_errorcode == ERROR_NONE)
     b78:	83 30       	cpi	r24, 0x03	; 3
     b7a:	21 f4       	brne	.+8      	; 0xb84 <__vector_17+0x1ba>
     b7c:	10 de       	rcall	.-992    	; 0x79e <e_checkflow>
     b7e:	e1 dd       	rcall	.-1086   	; 0x742 <e_checksensors>
			{
				uint8_t wheel_diff = steerpos - STEER_MIDDLE + 100;
     b80:	ad dd       	rcall	.-1190   	; 0x6dc <e_checkranges>
     b82:	cf dd       	rcall	.-1122   	; 0x722 <e_checkdiscrepancy>
     b84:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <_errorcode>
				data_send16(CAN_SEND_DATA, (uint16_t)((gas1eng * wheel_diff) / 100), MCDR);
     b88:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <_errorcode+0x1>
     b8c:	89 2b       	or	r24, r25
     b8e:	a1 f5       	brne	.+104    	; 0xbf8 <__vector_17+0x22e>
     b90:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <steerpos>
     b94:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <steerpos+0x1>
     b98:	80 59       	subi	r24, 0x90	; 144
     b9a:	c8 2e       	mov	r12, r24
     b9c:	d1 2c       	mov	r13, r1
     b9e:	e1 2c       	mov	r14, r1
     ba0:	f1 2c       	mov	r15, r1
     ba2:	60 91 52 03 	lds	r22, 0x0352	; 0x800352 <gas1eng>
     ba6:	70 91 53 03 	lds	r23, 0x0353	; 0x800353 <gas1eng+0x1>
     baa:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <gas1eng+0x2>
     bae:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <gas1eng+0x3>
     bb2:	a7 01       	movw	r20, r14
     bb4:	96 01       	movw	r18, r12
     bb6:	4c d2       	rcall	.+1176   	; 0x1050 <__mulsi3>
     bb8:	24 e6       	ldi	r18, 0x64	; 100
				data_send16(CAN_SEND_DATA, (uint16_t)((gas1eng * 100) / wheel_diff), MCDL);	
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	40 e0       	ldi	r20, 0x00	; 0
     bbe:	50 e0       	ldi	r21, 0x00	; 0
     bc0:	69 d2       	rcall	.+1234   	; 0x1094 <__udivmodsi4>
     bc2:	ca 01       	movw	r24, r20
     bc4:	b9 01       	movw	r22, r18
     bc6:	41 e1       	ldi	r20, 0x11	; 17
     bc8:	52 e0       	ldi	r21, 0x02	; 2
     bca:	81 e3       	ldi	r24, 0x31	; 49
     bcc:	96 db       	rcall	.-2260   	; 0x2fa <data_send16>
     bce:	20 91 52 03 	lds	r18, 0x0352	; 0x800352 <gas1eng>
     bd2:	30 91 53 03 	lds	r19, 0x0353	; 0x800353 <gas1eng+0x1>
     bd6:	40 91 54 03 	lds	r20, 0x0354	; 0x800354 <gas1eng+0x2>
     bda:	50 91 55 03 	lds	r21, 0x0355	; 0x800355 <gas1eng+0x3>
     bde:	a4 e6       	ldi	r26, 0x64	; 100
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	ae d2       	rcall	.+1372   	; 0x1140 <__muluhisi3>
     be4:	a7 01       	movw	r20, r14
			}
			else
			{
				data_send16(CAN_SEND_DATA, 0, MCDR);	
     be6:	96 01       	movw	r18, r12
     be8:	55 d2       	rcall	.+1194   	; 0x1094 <__udivmodsi4>
     bea:	ca 01       	movw	r24, r20
     bec:	b9 01       	movw	r22, r18
     bee:	40 e1       	ldi	r20, 0x10	; 16
     bf0:	52 e0       	ldi	r21, 0x02	; 2
     bf2:	81 e3       	ldi	r24, 0x31	; 49
				data_send16(CAN_SEND_DATA, 0, MCDL);
     bf4:	82 db       	rcall	.-2300   	; 0x2fa <data_send16>
     bf6:	0c c0       	rjmp	.+24     	; 0xc10 <__vector_17+0x246>
     bf8:	41 e1       	ldi	r20, 0x11	; 17
     bfa:	52 e0       	ldi	r21, 0x02	; 2
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	81 e3       	ldi	r24, 0x31	; 49
		case SCREEN_STATUS:
		default:
			break;
	}
	
	ttt = (ttt + 1) % 3;
     c02:	7b db       	rcall	.-2314   	; 0x2fa <data_send16>
     c04:	40 e1       	ldi	r20, 0x10	; 16
     c06:	52 e0       	ldi	r21, 0x02	; 2
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	81 e3       	ldi	r24, 0x31	; 49
     c0e:	75 db       	rcall	.-2326   	; 0x2fa <data_send16>
     c10:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
     c14:	90 e0       	ldi	r25, 0x00	; 0
		// TODO: Uncomment when beep should be implemented
		//PORTC &= ~(1<<RTDS);
		readybeep = 0;
	}//*/
	
	TCNT0 = _TM0;
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	63 e0       	ldi	r22, 0x03	; 3
}
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	28 d2       	rcall	.+1104   	; 0x106e <__divmodhi4>
     c1e:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <__data_end>
     c22:	80 ec       	ldi	r24, 0xC0	; 192
     c24:	86 bd       	out	0x26, r24	; 38
     c26:	ff 91       	pop	r31
     c28:	ef 91       	pop	r30
     c2a:	bf 91       	pop	r27
     c2c:	af 91       	pop	r26
     c2e:	9f 91       	pop	r25
     c30:	8f 91       	pop	r24
     c32:	7f 91       	pop	r23
     c34:	6f 91       	pop	r22
     c36:	5f 91       	pop	r21
     c38:	4f 91       	pop	r20
     c3a:	3f 91       	pop	r19
     c3c:	2f 91       	pop	r18
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	cf 90       	pop	r12
     c46:	0f 90       	pop	r0
     c48:	0b be       	out	0x3b, r0	; 59
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <main>:
	}
}

int main()
{
	lcd_init(LCD_DISP_ON);
     c54:	8c e0       	ldi	r24, 0x0C	; 12
	change_screen(SCREEN_STATUS);
     c56:	4c de       	rcall	.-872    	; 0x8f0 <lcd_init>
     c58:	85 e0       	ldi	r24, 0x05	; 5
	
	//Initialize timer0
	TCCR0A |= (1 << CS02);// || (1 << CS01);	//Prescaler
     c5a:	f6 d1       	rcall	.+1004   	; 0x1048 <change_screen>
     c5c:	84 b5       	in	r24, 0x24	; 36
     c5e:	84 60       	ori	r24, 0x04	; 4
	TCNT0 = _TM0;							//Set initial counter value
     c60:	84 bd       	out	0x24, r24	; 36
     c62:	90 ec       	ldi	r25, 0xC0	; 192
	TIMSK0 |= (1 << TOIE0);					//Overflow Interrupt Enable
     c64:	96 bd       	out	0x26, r25	; 38
     c66:	ee e6       	ldi	r30, 0x6E	; 110
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	81 60       	ori	r24, 0x01	; 1
	
	//Initialize timer2
	ASSR  = (1<< AS2);						//Enable asynchronous mode
     c6e:	80 83       	st	Z, r24
     c70:	88 e0       	ldi	r24, 0x08	; 8
     c72:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	TCNT2 = _TM2;							//Set initial counter value
     c76:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	TCCR2A |= (1 << CS01)|(1 << CS00);		//Prescaler
     c7a:	e0 eb       	ldi	r30, 0xB0	; 176
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	83 60       	ori	r24, 0x03	; 3
	TIFR2   = (1 << TOV2);					//Clear interrupt flags
     c82:	80 83       	st	Z, r24
	TIMSK2  = (1 << TOIE2);					//Overflow interrupt enable
     c84:	81 e0       	ldi	r24, 0x01	; 1
	
	can_init();
     c86:	87 bb       	out	0x17, r24	; 23
	can_rx(MASTERID);
     c88:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     c8c:	7e da       	rcall	.-2820   	; 0x18a <can_init>
     c8e:	87 e1       	ldi	r24, 0x17	; 23
	
	//Set CPU into sleep mode(simultaneously enabling interrupts)
	set_sleep_mode(SLEEP_MODE_IDLE);
     c90:	93 e0       	ldi	r25, 0x03	; 3
     c92:	a9 da       	rcall	.-2734   	; 0x1e6 <can_rx>
     c94:	83 b7       	in	r24, 0x33	; 51
	sleep_enable();
     c96:	81 7f       	andi	r24, 0xF1	; 241
     c98:	83 bf       	out	0x33, r24	; 51
     c9a:	83 b7       	in	r24, 0x33	; 51
	sei();
     c9c:	81 60       	ori	r24, 0x01	; 1
	sleep_cpu();
     c9e:	83 bf       	out	0x33, r24	; 51
     ca0:	78 94       	sei
     ca2:	88 95       	sleep
     ca4:	ff cf       	rjmp	.-2      	; 0xca4 <main+0x50>

00000ca6 <lcd_quickrefresh>:

	lcd_quickrefresh();
}

void lcd_quickrefresh()
{
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	05 e7       	ldi	r16, 0x75	; 117
     cae:	13 e0       	ldi	r17, 0x03	; 3
	//Write the current line buffer into their respective LCD lines
	for(uint8_t y = 0; y < 4; y++)
     cb0:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd_gotoxy(0, y);
     cb2:	6c 2f       	mov	r22, r28
     cb4:	80 e0       	ldi	r24, 0x00	; 0
		lcd_puts(Linebuffer[y]);
     cb6:	db dd       	rcall	.-1098   	; 0x86e <lcd_gotoxy>
     cb8:	c8 01       	movw	r24, r16
}

void lcd_quickrefresh()
{
	//Write the current line buffer into their respective LCD lines
	for(uint8_t y = 0; y < 4; y++)
     cba:	0b de       	rcall	.-1002   	; 0x8d2 <lcd_puts>
     cbc:	cf 5f       	subi	r28, 0xFF	; 255
     cbe:	0b 5e       	subi	r16, 0xEB	; 235
     cc0:	1f 4f       	sbci	r17, 0xFF	; 255
     cc2:	c4 30       	cpi	r28, 0x04	; 4
	{
		lcd_gotoxy(0, y);
		lcd_puts(Linebuffer[y]);
	}
}
     cc4:	b1 f7       	brne	.-20     	; 0xcb2 <lcd_quickrefresh+0xc>
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	08 95       	ret

00000cce <get_screen>:
	ui_current_screen = s;
	lcd_refresh();	
}

void get_screen(char buffer[4][21], enum uiscreen s)
{
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	ec 01       	movw	r28, r24
	switch(s)
     cd6:	62 30       	cpi	r22, 0x02	; 2
     cd8:	09 f4       	brne	.+2      	; 0xcdc <get_screen+0xe>
     cda:	63 c0       	rjmp	.+198    	; 0xda2 <get_screen+0xd4>
     cdc:	28 f4       	brcc	.+10     	; 0xce8 <get_screen+0x1a>
     cde:	66 23       	and	r22, r22
     ce0:	61 f0       	breq	.+24     	; 0xcfa <get_screen+0x2c>
     ce2:	61 30       	cpi	r22, 0x01	; 1
     ce4:	71 f1       	breq	.+92     	; 0xd42 <get_screen+0x74>
     ce6:	82 c1       	rjmp	.+772    	; 0xfec <get_screen+0x31e>
     ce8:	64 30       	cpi	r22, 0x04	; 4
     cea:	09 f4       	brne	.+2      	; 0xcee <get_screen+0x20>
     cec:	df c0       	rjmp	.+446    	; 0xeac <get_screen+0x1de>
     cee:	08 f4       	brcc	.+2      	; 0xcf2 <get_screen+0x24>
     cf0:	9b c0       	rjmp	.+310    	; 0xe28 <get_screen+0x15a>
     cf2:	65 30       	cpi	r22, 0x05	; 5
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <get_screen+0x2a>
     cf6:	1c c1       	rjmp	.+568    	; 0xf30 <get_screen+0x262>
     cf8:	79 c1       	rjmp	.+754    	; 0xfec <get_screen+0x31e>
	{
		case SCREEN_WELCOME:
			snprintf(buffer[0], sizeof buffer[0], "        HU-2        ");
     cfa:	85 e1       	ldi	r24, 0x15	; 21
     cfc:	ea ed       	ldi	r30, 0xDA	; 218
     cfe:	f1 e0       	ldi	r31, 0x01	; 1
     d00:	de 01       	movw	r26, r28
     d02:	01 90       	ld	r0, Z+
     d04:	0d 92       	st	X+, r0
     d06:	8a 95       	dec	r24
     d08:	e1 f7       	brne	.-8      	; 0xd02 <get_screen+0x34>
			snprintf(buffer[1], sizeof buffer[1], SOFTWARE_VERSION);
     d0a:	de 01       	movw	r26, r28
     d0c:	55 96       	adiw	r26, 0x15	; 21
     d0e:	80 e1       	ldi	r24, 0x10	; 16
     d10:	ef ee       	ldi	r30, 0xEF	; 239
     d12:	f1 e0       	ldi	r31, 0x01	; 1
     d14:	01 90       	ld	r0, Z+
     d16:	0d 92       	st	X+, r0
     d18:	8a 95       	dec	r24
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <get_screen+0x46>
			snprintf(buffer[2], sizeof buffer[2], "                    ");
     d1c:	de 01       	movw	r26, r28
     d1e:	9a 96       	adiw	r26, 0x2a	; 42
     d20:	85 e1       	ldi	r24, 0x15	; 21
     d22:	ef ef       	ldi	r30, 0xFF	; 255
     d24:	f1 e0       	ldi	r31, 0x01	; 1
     d26:	01 90       	ld	r0, Z+
     d28:	0d 92       	st	X+, r0
     d2a:	8a 95       	dec	r24
     d2c:	e1 f7       	brne	.-8      	; 0xd26 <get_screen+0x58>
			snprintf(buffer[3], sizeof buffer[3], " Press blue button  ");
     d2e:	de 01       	movw	r26, r28
     d30:	df 96       	adiw	r26, 0x3f	; 63
     d32:	85 e1       	ldi	r24, 0x15	; 21
     d34:	e4 e1       	ldi	r30, 0x14	; 20
     d36:	f2 e0       	ldi	r31, 0x02	; 2
     d38:	01 90       	ld	r0, Z+
     d3a:	0d 92       	st	X+, r0
     d3c:	8a 95       	dec	r24
     d3e:	e1 f7       	brne	.-8      	; 0xd38 <get_screen+0x6a>
			break;
     d40:	78 c1       	rjmp	.+752    	; 0x1032 <get_screen+0x364>

		case SCREEN_ERROR:
			snprintf(buffer[0], sizeof buffer[0], "     !!!ERROR!!!    ");
     d42:	85 e1       	ldi	r24, 0x15	; 21
     d44:	e9 e2       	ldi	r30, 0x29	; 41
     d46:	f2 e0       	ldi	r31, 0x02	; 2
     d48:	de 01       	movw	r26, r28
     d4a:	01 90       	ld	r0, Z+
     d4c:	0d 92       	st	X+, r0
     d4e:	8a 95       	dec	r24
     d50:	e1 f7       	brne	.-8      	; 0xd4a <get_screen+0x7c>
			snprintf(buffer[1], sizeof buffer[1], get_error(_errorcode));
     d52:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <_errorcode>
     d56:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <_errorcode+0x1>
     d5a:	94 dc       	rcall	.-1752   	; 0x684 <get_error>
     d5c:	9f 93       	push	r25
     d5e:	8f 93       	push	r24
     d60:	1f 92       	push	r1
     d62:	85 e1       	ldi	r24, 0x15	; 21
     d64:	8f 93       	push	r24
     d66:	ce 01       	movw	r24, r28
     d68:	45 96       	adiw	r24, 0x15	; 21
     d6a:	9f 93       	push	r25
     d6c:	8f 93       	push	r24
     d6e:	06 d2       	rcall	.+1036   	; 0x117c <snprintf>
			snprintf(buffer[2], sizeof buffer[2], "                    ");
     d70:	de 01       	movw	r26, r28
     d72:	9a 96       	adiw	r26, 0x2a	; 42
     d74:	85 e1       	ldi	r24, 0x15	; 21
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f1 e0       	ldi	r31, 0x01	; 1
     d7a:	01 90       	ld	r0, Z+
     d7c:	0d 92       	st	X+, r0
     d7e:	8a 95       	dec	r24
     d80:	e1 f7       	brne	.-8      	; 0xd7a <get_screen+0xac>
			snprintf(buffer[3], sizeof buffer[3], "                    ");
     d82:	de 01       	movw	r26, r28
     d84:	df 96       	adiw	r26, 0x3f	; 63
     d86:	85 e1       	ldi	r24, 0x15	; 21
     d88:	ef ef       	ldi	r30, 0xFF	; 255
     d8a:	f1 e0       	ldi	r31, 0x01	; 1
     d8c:	01 90       	ld	r0, Z+
     d8e:	0d 92       	st	X+, r0
     d90:	8a 95       	dec	r24
     d92:	e1 f7       	brne	.-8      	; 0xd8c <get_screen+0xbe>
			break;
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	48 c1       	rjmp	.+656    	; 0x1032 <get_screen+0x364>

		case SCREEN_PREDISCHARGING:
			snprintf(buffer[0], sizeof buffer[0], " Precharging...     ");
     da2:	85 e1       	ldi	r24, 0x15	; 21
     da4:	ee e3       	ldi	r30, 0x3E	; 62
     da6:	f2 e0       	ldi	r31, 0x02	; 2
     da8:	de 01       	movw	r26, r28
     daa:	01 90       	ld	r0, Z+
     dac:	0d 92       	st	X+, r0
     dae:	8a 95       	dec	r24
     db0:	e1 f7       	brne	.-8      	; 0xdaa <get_screen+0xdc>
			snprintf(buffer[1], sizeof buffer[1], " %5d              ", predistimer);
     db2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     db6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     dba:	9f 93       	push	r25
     dbc:	8f 93       	push	r24
     dbe:	83 e5       	ldi	r24, 0x53	; 83
     dc0:	92 e0       	ldi	r25, 0x02	; 2
     dc2:	9f 93       	push	r25
     dc4:	8f 93       	push	r24
     dc6:	1f 92       	push	r1
     dc8:	15 e1       	ldi	r17, 0x15	; 21
     dca:	1f 93       	push	r17
     dcc:	ce 01       	movw	r24, r28
     dce:	45 96       	adiw	r24, 0x15	; 21
     dd0:	9f 93       	push	r25
     dd2:	8f 93       	push	r24
     dd4:	d3 d1       	rcall	.+934    	; 0x117c <snprintf>
			snprintf(buffer[2], sizeof buffer[2], "                    ");
     dd6:	de 01       	movw	r26, r28
     dd8:	9a 96       	adiw	r26, 0x2a	; 42
     dda:	85 e1       	ldi	r24, 0x15	; 21
     ddc:	ef ef       	ldi	r30, 0xFF	; 255
     dde:	f1 e0       	ldi	r31, 0x01	; 1
     de0:	01 90       	ld	r0, Z+
     de2:	0d 92       	st	X+, r0
     de4:	8a 95       	dec	r24
     de6:	e1 f7       	brne	.-8      	; 0xde0 <get_screen+0x112>
			snprintf(buffer[3], sizeof buffer[3], "Flow: L%5d  R%5d", flowleft, flowright);
     de8:	20 91 47 03 	lds	r18, 0x0347	; 0x800347 <flowright>
     dec:	30 91 48 03 	lds	r19, 0x0348	; 0x800348 <flowright+0x1>
     df0:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <flowleft>
     df4:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <flowleft+0x1>
     df8:	3f 93       	push	r19
     dfa:	2f 93       	push	r18
     dfc:	9f 93       	push	r25
     dfe:	8f 93       	push	r24
     e00:	86 e6       	ldi	r24, 0x66	; 102
     e02:	92 e0       	ldi	r25, 0x02	; 2
     e04:	9f 93       	push	r25
     e06:	8f 93       	push	r24
     e08:	1f 92       	push	r1
     e0a:	1f 93       	push	r17
     e0c:	de 01       	movw	r26, r28
     e0e:	df 96       	adiw	r26, 0x3f	; 63
     e10:	bf 93       	push	r27
     e12:	af 93       	push	r26
     e14:	b3 d1       	rcall	.+870    	; 0x117c <snprintf>
			break;
     e16:	8d b7       	in	r24, 0x3d	; 61
     e18:	9e b7       	in	r25, 0x3e	; 62
     e1a:	42 96       	adiw	r24, 0x12	; 18
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	9e bf       	out	0x3e, r25	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	8d bf       	out	0x3d, r24	; 61
     e26:	05 c1       	rjmp	.+522    	; 0x1032 <get_screen+0x364>

		case SCREEN_START:
			snprintf(buffer[0], sizeof buffer[0], "Gas1:%4d Gas2:%4d", gas1, gas2);
     e28:	20 91 5e 03 	lds	r18, 0x035E	; 0x80035e <gas2>
     e2c:	30 91 5f 03 	lds	r19, 0x035F	; 0x80035f <gas2+0x1>
     e30:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <gas1>
     e34:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <gas1+0x1>
     e38:	3f 93       	push	r19
     e3a:	2f 93       	push	r18
     e3c:	9f 93       	push	r25
     e3e:	8f 93       	push	r24
     e40:	87 e7       	ldi	r24, 0x77	; 119
     e42:	92 e0       	ldi	r25, 0x02	; 2
     e44:	9f 93       	push	r25
     e46:	8f 93       	push	r24
     e48:	1f 92       	push	r1
     e4a:	15 e1       	ldi	r17, 0x15	; 21
     e4c:	1f 93       	push	r17
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	94 d1       	rcall	.+808    	; 0x117c <snprintf>
			snprintf(buffer[1], sizeof buffer[1], "Brake:%4d          ", brake);
     e54:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <brake>
     e58:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <brake+0x1>
     e5c:	9f 93       	push	r25
     e5e:	8f 93       	push	r24
     e60:	89 e8       	ldi	r24, 0x89	; 137
     e62:	92 e0       	ldi	r25, 0x02	; 2
     e64:	9f 93       	push	r25
     e66:	8f 93       	push	r24
     e68:	1f 92       	push	r1
     e6a:	1f 93       	push	r17
     e6c:	ce 01       	movw	r24, r28
     e6e:	45 96       	adiw	r24, 0x15	; 21
     e70:	9f 93       	push	r25
     e72:	8f 93       	push	r24
     e74:	83 d1       	rcall	.+774    	; 0x117c <snprintf>
			snprintf(buffer[2], sizeof buffer[2], "                    ");
     e76:	de 01       	movw	r26, r28
     e78:	9a 96       	adiw	r26, 0x2a	; 42
     e7a:	85 e1       	ldi	r24, 0x15	; 21
     e7c:	ef ef       	ldi	r30, 0xFF	; 255
     e7e:	f1 e0       	ldi	r31, 0x01	; 1
     e80:	01 90       	ld	r0, Z+
     e82:	0d 92       	st	X+, r0
     e84:	8a 95       	dec	r24
     e86:	e1 f7       	brne	.-8      	; 0xe80 <get_screen+0x1b2>
			snprintf(buffer[3], sizeof buffer[3], "Press green to begin");
     e88:	de 01       	movw	r26, r28
     e8a:	df 96       	adiw	r26, 0x3f	; 63
     e8c:	85 e1       	ldi	r24, 0x15	; 21
     e8e:	ed e9       	ldi	r30, 0x9D	; 157
     e90:	f2 e0       	ldi	r31, 0x02	; 2
     e92:	01 90       	ld	r0, Z+
     e94:	0d 92       	st	X+, r0
     e96:	8a 95       	dec	r24
     e98:	e1 f7       	brne	.-8      	; 0xe92 <get_screen+0x1c4>
			break;
     e9a:	8d b7       	in	r24, 0x3d	; 61
     e9c:	9e b7       	in	r25, 0x3e	; 62
     e9e:	42 96       	adiw	r24, 0x12	; 18
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	9e bf       	out	0x3e, r25	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	8d bf       	out	0x3d, r24	; 61
     eaa:	c3 c0       	rjmp	.+390    	; 0x1032 <get_screen+0x364>

		case SCREEN_DRIVING:
			snprintf(buffer[0], sizeof buffer[0], "Gas1:%3d%%, Gas2:%3d%%", gas1perc, gas2perc);
     eac:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <gas2perc>
     eb0:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <gas2perc+0x1>
     eb4:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <gas1perc>
     eb8:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <gas1perc+0x1>
     ebc:	3f 93       	push	r19
     ebe:	2f 93       	push	r18
     ec0:	9f 93       	push	r25
     ec2:	8f 93       	push	r24
     ec4:	82 eb       	ldi	r24, 0xB2	; 178
     ec6:	92 e0       	ldi	r25, 0x02	; 2
     ec8:	9f 93       	push	r25
     eca:	8f 93       	push	r24
     ecc:	1f 92       	push	r1
     ece:	15 e1       	ldi	r17, 0x15	; 21
     ed0:	1f 93       	push	r17
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	52 d1       	rcall	.+676    	; 0x117c <snprintf>
			snprintf(buffer[1], sizeof buffer[1], "Brake:%3d%%          ", brakeperc);
     ed8:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <brakeperc>
     edc:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <brakeperc+0x1>
     ee0:	9f 93       	push	r25
     ee2:	8f 93       	push	r24
     ee4:	89 ec       	ldi	r24, 0xC9	; 201
     ee6:	92 e0       	ldi	r25, 0x02	; 2
     ee8:	9f 93       	push	r25
     eea:	8f 93       	push	r24
     eec:	1f 92       	push	r1
     eee:	1f 93       	push	r17
     ef0:	ce 01       	movw	r24, r28
     ef2:	45 96       	adiw	r24, 0x15	; 21
     ef4:	9f 93       	push	r25
     ef6:	8f 93       	push	r24
     ef8:	41 d1       	rcall	.+642    	; 0x117c <snprintf>
			snprintf(buffer[2], sizeof buffer[2], "                    ");
     efa:	de 01       	movw	r26, r28
     efc:	9a 96       	adiw	r26, 0x2a	; 42
     efe:	85 e1       	ldi	r24, 0x15	; 21
     f00:	ef ef       	ldi	r30, 0xFF	; 255
     f02:	f1 e0       	ldi	r31, 0x01	; 1
     f04:	01 90       	ld	r0, Z+
     f06:	0d 92       	st	X+, r0
     f08:	8a 95       	dec	r24
     f0a:	e1 f7       	brne	.-8      	; 0xf04 <get_screen+0x236>
			snprintf(buffer[3], sizeof buffer[3], "                    ");
     f0c:	de 01       	movw	r26, r28
     f0e:	df 96       	adiw	r26, 0x3f	; 63
     f10:	85 e1       	ldi	r24, 0x15	; 21
     f12:	ef ef       	ldi	r30, 0xFF	; 255
     f14:	f1 e0       	ldi	r31, 0x01	; 1
     f16:	01 90       	ld	r0, Z+
     f18:	0d 92       	st	X+, r0
     f1a:	8a 95       	dec	r24
     f1c:	e1 f7       	brne	.-8      	; 0xf16 <get_screen+0x248>
			break;
     f1e:	8d b7       	in	r24, 0x3d	; 61
     f20:	9e b7       	in	r25, 0x3e	; 62
     f22:	42 96       	adiw	r24, 0x12	; 18
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	9e bf       	out	0x3e, r25	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	8d bf       	out	0x3d, r24	; 61
     f2e:	81 c0       	rjmp	.+258    	; 0x1032 <get_screen+0x364>

		case SCREEN_STATUS:
			snprintf(buffer[0], sizeof buffer[0], "Flow: L%5d  R%5d", flowleft, flowright);
     f30:	20 91 47 03 	lds	r18, 0x0347	; 0x800347 <flowright>
     f34:	30 91 48 03 	lds	r19, 0x0348	; 0x800348 <flowright+0x1>
     f38:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <flowleft>
     f3c:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <flowleft+0x1>
     f40:	3f 93       	push	r19
     f42:	2f 93       	push	r18
     f44:	9f 93       	push	r25
     f46:	8f 93       	push	r24
     f48:	86 e6       	ldi	r24, 0x66	; 102
     f4a:	92 e0       	ldi	r25, 0x02	; 2
     f4c:	9f 93       	push	r25
     f4e:	8f 93       	push	r24
     f50:	1f 92       	push	r1
     f52:	15 e1       	ldi	r17, 0x15	; 21
     f54:	1f 93       	push	r17
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	10 d1       	rcall	.+544    	; 0x117c <snprintf>
			snprintf(buffer[1], sizeof buffer[1], "Rpm: FL%5d FR%5d", rpm_fl, rpm_fr);
     f5c:	20 91 4d 03 	lds	r18, 0x034D	; 0x80034d <rpm_fr>
     f60:	30 91 4e 03 	lds	r19, 0x034E	; 0x80034e <rpm_fr+0x1>
     f64:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <rpm_fl>
     f68:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <rpm_fl+0x1>
     f6c:	3f 93       	push	r19
     f6e:	2f 93       	push	r18
     f70:	9f 93       	push	r25
     f72:	8f 93       	push	r24
     f74:	8f ed       	ldi	r24, 0xDF	; 223
     f76:	92 e0       	ldi	r25, 0x02	; 2
     f78:	9f 93       	push	r25
     f7a:	8f 93       	push	r24
     f7c:	1f 92       	push	r1
     f7e:	1f 93       	push	r17
     f80:	ce 01       	movw	r24, r28
     f82:	45 96       	adiw	r24, 0x15	; 21
     f84:	9f 93       	push	r25
     f86:	8f 93       	push	r24
     f88:	f9 d0       	rcall	.+498    	; 0x117c <snprintf>
			snprintf(buffer[2], sizeof buffer[2], "Gas1:%3d%%, Gas2:%3d%%", gas1perc, gas2perc);
     f8a:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <gas2perc>
     f8e:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <gas2perc+0x1>
     f92:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <gas1perc>
     f96:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <gas1perc+0x1>
     f9a:	3f 93       	push	r19
     f9c:	2f 93       	push	r18
     f9e:	9f 93       	push	r25
     fa0:	8f 93       	push	r24
     fa2:	82 eb       	ldi	r24, 0xB2	; 178
     fa4:	92 e0       	ldi	r25, 0x02	; 2
     fa6:	9f 93       	push	r25
     fa8:	8f 93       	push	r24
     faa:	1f 92       	push	r1
     fac:	1f 93       	push	r17
     fae:	ce 01       	movw	r24, r28
     fb0:	8a 96       	adiw	r24, 0x2a	; 42
     fb2:	9f 93       	push	r25
     fb4:	8f 93       	push	r24
     fb6:	e2 d0       	rcall	.+452    	; 0x117c <snprintf>
			snprintf(buffer[3], sizeof buffer[3], "Steerpos: %5d     ", steerpos);
     fb8:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <steerpos>
     fbc:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <steerpos+0x1>
     fc0:	9f 93       	push	r25
     fc2:	8f 93       	push	r24
     fc4:	80 ef       	ldi	r24, 0xF0	; 240
     fc6:	92 e0       	ldi	r25, 0x02	; 2
     fc8:	9f 93       	push	r25
     fca:	8f 93       	push	r24
     fcc:	1f 92       	push	r1
     fce:	1f 93       	push	r17
     fd0:	de 01       	movw	r26, r28
     fd2:	df 96       	adiw	r26, 0x3f	; 63
     fd4:	bf 93       	push	r27
     fd6:	af 93       	push	r26
     fd8:	d1 d0       	rcall	.+418    	; 0x117c <snprintf>
			break;
     fda:	8d b7       	in	r24, 0x3d	; 61
     fdc:	9e b7       	in	r25, 0x3e	; 62
     fde:	86 96       	adiw	r24, 0x26	; 38
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	9e bf       	out	0x3e, r25	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	8d bf       	out	0x3d, r24	; 61
     fea:	23 c0       	rjmp	.+70     	; 0x1032 <get_screen+0x364>

		default:
			snprintf(buffer[0], sizeof buffer[0], " Unknown screen ID  ");
     fec:	85 e1       	ldi	r24, 0x15	; 21
     fee:	e3 e0       	ldi	r30, 0x03	; 3
     ff0:	f3 e0       	ldi	r31, 0x03	; 3
     ff2:	de 01       	movw	r26, r28
     ff4:	01 90       	ld	r0, Z+
     ff6:	0d 92       	st	X+, r0
     ff8:	8a 95       	dec	r24
     ffa:	e1 f7       	brne	.-8      	; 0xff4 <get_screen+0x326>
			snprintf(buffer[1], sizeof buffer[1], "                    ");
     ffc:	de 01       	movw	r26, r28
     ffe:	55 96       	adiw	r26, 0x15	; 21
    1000:	85 e1       	ldi	r24, 0x15	; 21
    1002:	ef ef       	ldi	r30, 0xFF	; 255
    1004:	f1 e0       	ldi	r31, 0x01	; 1
    1006:	01 90       	ld	r0, Z+
    1008:	0d 92       	st	X+, r0
    100a:	8a 95       	dec	r24
    100c:	e1 f7       	brne	.-8      	; 0x1006 <get_screen+0x338>
			snprintf(buffer[2], sizeof buffer[2], " Tell Jeremy to fix ");
    100e:	de 01       	movw	r26, r28
    1010:	9a 96       	adiw	r26, 0x2a	; 42
    1012:	85 e1       	ldi	r24, 0x15	; 21
    1014:	e8 e1       	ldi	r30, 0x18	; 24
    1016:	f3 e0       	ldi	r31, 0x03	; 3
    1018:	01 90       	ld	r0, Z+
    101a:	0d 92       	st	X+, r0
    101c:	8a 95       	dec	r24
    101e:	e1 f7       	brne	.-8      	; 0x1018 <get_screen+0x34a>
			snprintf(buffer[3], sizeof buffer[3], " his stuff          ");
    1020:	de 01       	movw	r26, r28
    1022:	df 96       	adiw	r26, 0x3f	; 63
    1024:	85 e1       	ldi	r24, 0x15	; 21
    1026:	ed e2       	ldi	r30, 0x2D	; 45
    1028:	f3 e0       	ldi	r31, 0x03	; 3
    102a:	01 90       	ld	r0, Z+
    102c:	0d 92       	st	X+, r0
    102e:	8a 95       	dec	r24
    1030:	e1 f7       	brne	.-8      	; 0x102a <get_screen+0x35c>
			snprintf(buffer[2], sizeof buffer[2], "                    ");
			snprintf(buffer[3], sizeof buffer[3], "                    ");
			break;
		*/
	}
}
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	08 95       	ret

0000103a <lcd_refresh>:
#include "UI.h"
#include "Error.h"

void lcd_refresh()
{
	get_screen(Linebuffer, ui_current_screen);
    103a:	60 91 64 03 	lds	r22, 0x0364	; 0x800364 <ui_current_screen>
    103e:	85 e7       	ldi	r24, 0x75	; 117
    1040:	93 e0       	ldi	r25, 0x03	; 3

	lcd_quickrefresh();
    1042:	45 de       	rcall	.-886    	; 0xcce <get_screen>
    1044:	30 ce       	rjmp	.-928    	; 0xca6 <lcd_quickrefresh>
    1046:	08 95       	ret

00001048 <change_screen>:
	}
}

void change_screen(enum uiscreen s)
{
	ui_current_screen = s;
    1048:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <ui_current_screen>
	lcd_refresh();	
    104c:	f6 cf       	rjmp	.-20     	; 0x103a <lcd_refresh>
    104e:	08 95       	ret

00001050 <__mulsi3>:
    1050:	db 01       	movw	r26, r22
    1052:	8f 93       	push	r24
    1054:	9f 93       	push	r25
    1056:	74 d0       	rcall	.+232    	; 0x1140 <__muluhisi3>
    1058:	bf 91       	pop	r27
    105a:	af 91       	pop	r26
    105c:	a2 9f       	mul	r26, r18
    105e:	80 0d       	add	r24, r0
    1060:	91 1d       	adc	r25, r1
    1062:	a3 9f       	mul	r26, r19
    1064:	90 0d       	add	r25, r0
    1066:	b2 9f       	mul	r27, r18
    1068:	90 0d       	add	r25, r0
    106a:	11 24       	eor	r1, r1
    106c:	08 95       	ret

0000106e <__divmodhi4>:
    106e:	97 fb       	bst	r25, 7
    1070:	07 2e       	mov	r0, r23
    1072:	16 f4       	brtc	.+4      	; 0x1078 <__divmodhi4+0xa>
    1074:	00 94       	com	r0
    1076:	06 d0       	rcall	.+12     	; 0x1084 <__divmodhi4_neg1>
    1078:	77 fd       	sbrc	r23, 7
    107a:	08 d0       	rcall	.+16     	; 0x108c <__divmodhi4_neg2>
    107c:	6b d0       	rcall	.+214    	; 0x1154 <__udivmodhi4>
    107e:	07 fc       	sbrc	r0, 7
    1080:	05 d0       	rcall	.+10     	; 0x108c <__divmodhi4_neg2>
    1082:	3e f4       	brtc	.+14     	; 0x1092 <__divmodhi4_exit>

00001084 <__divmodhi4_neg1>:
    1084:	90 95       	com	r25
    1086:	81 95       	neg	r24
    1088:	9f 4f       	sbci	r25, 0xFF	; 255
    108a:	08 95       	ret

0000108c <__divmodhi4_neg2>:
    108c:	70 95       	com	r23
    108e:	61 95       	neg	r22
    1090:	7f 4f       	sbci	r23, 0xFF	; 255

00001092 <__divmodhi4_exit>:
    1092:	08 95       	ret

00001094 <__udivmodsi4>:
    1094:	a1 e2       	ldi	r26, 0x21	; 33
    1096:	1a 2e       	mov	r1, r26
    1098:	aa 1b       	sub	r26, r26
    109a:	bb 1b       	sub	r27, r27
    109c:	fd 01       	movw	r30, r26
    109e:	0d c0       	rjmp	.+26     	; 0x10ba <__udivmodsi4_ep>

000010a0 <__udivmodsi4_loop>:
    10a0:	aa 1f       	adc	r26, r26
    10a2:	bb 1f       	adc	r27, r27
    10a4:	ee 1f       	adc	r30, r30
    10a6:	ff 1f       	adc	r31, r31
    10a8:	a2 17       	cp	r26, r18
    10aa:	b3 07       	cpc	r27, r19
    10ac:	e4 07       	cpc	r30, r20
    10ae:	f5 07       	cpc	r31, r21
    10b0:	20 f0       	brcs	.+8      	; 0x10ba <__udivmodsi4_ep>
    10b2:	a2 1b       	sub	r26, r18
    10b4:	b3 0b       	sbc	r27, r19
    10b6:	e4 0b       	sbc	r30, r20
    10b8:	f5 0b       	sbc	r31, r21

000010ba <__udivmodsi4_ep>:
    10ba:	66 1f       	adc	r22, r22
    10bc:	77 1f       	adc	r23, r23
    10be:	88 1f       	adc	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	1a 94       	dec	r1
    10c4:	69 f7       	brne	.-38     	; 0x10a0 <__udivmodsi4_loop>
    10c6:	60 95       	com	r22
    10c8:	70 95       	com	r23
    10ca:	80 95       	com	r24
    10cc:	90 95       	com	r25
    10ce:	9b 01       	movw	r18, r22
    10d0:	ac 01       	movw	r20, r24
    10d2:	bd 01       	movw	r22, r26
    10d4:	cf 01       	movw	r24, r30
    10d6:	08 95       	ret

000010d8 <__divmodsi4>:
    10d8:	05 2e       	mov	r0, r21
    10da:	97 fb       	bst	r25, 7
    10dc:	16 f4       	brtc	.+4      	; 0x10e2 <__divmodsi4+0xa>
    10de:	00 94       	com	r0
    10e0:	0f d0       	rcall	.+30     	; 0x1100 <__negsi2>
    10e2:	57 fd       	sbrc	r21, 7
    10e4:	05 d0       	rcall	.+10     	; 0x10f0 <__divmodsi4_neg2>
    10e6:	d6 df       	rcall	.-84     	; 0x1094 <__udivmodsi4>
    10e8:	07 fc       	sbrc	r0, 7
    10ea:	02 d0       	rcall	.+4      	; 0x10f0 <__divmodsi4_neg2>
    10ec:	46 f4       	brtc	.+16     	; 0x10fe <__divmodsi4_exit>
    10ee:	08 c0       	rjmp	.+16     	; 0x1100 <__negsi2>

000010f0 <__divmodsi4_neg2>:
    10f0:	50 95       	com	r21
    10f2:	40 95       	com	r20
    10f4:	30 95       	com	r19
    10f6:	21 95       	neg	r18
    10f8:	3f 4f       	sbci	r19, 0xFF	; 255
    10fa:	4f 4f       	sbci	r20, 0xFF	; 255
    10fc:	5f 4f       	sbci	r21, 0xFF	; 255

000010fe <__divmodsi4_exit>:
    10fe:	08 95       	ret

00001100 <__negsi2>:
    1100:	90 95       	com	r25
    1102:	80 95       	com	r24
    1104:	70 95       	com	r23
    1106:	61 95       	neg	r22
    1108:	7f 4f       	sbci	r23, 0xFF	; 255
    110a:	8f 4f       	sbci	r24, 0xFF	; 255
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	08 95       	ret

00001110 <__tablejump2__>:
    1110:	ee 0f       	add	r30, r30
    1112:	ff 1f       	adc	r31, r31
    1114:	00 24       	eor	r0, r0
    1116:	00 1c       	adc	r0, r0
    1118:	0b be       	out	0x3b, r0	; 59
    111a:	07 90       	elpm	r0, Z+
    111c:	f6 91       	elpm	r31, Z
    111e:	e0 2d       	mov	r30, r0
    1120:	09 94       	ijmp

00001122 <__umulhisi3>:
    1122:	a2 9f       	mul	r26, r18
    1124:	b0 01       	movw	r22, r0
    1126:	b3 9f       	mul	r27, r19
    1128:	c0 01       	movw	r24, r0
    112a:	a3 9f       	mul	r26, r19
    112c:	70 0d       	add	r23, r0
    112e:	81 1d       	adc	r24, r1
    1130:	11 24       	eor	r1, r1
    1132:	91 1d       	adc	r25, r1
    1134:	b2 9f       	mul	r27, r18
    1136:	70 0d       	add	r23, r0
    1138:	81 1d       	adc	r24, r1
    113a:	11 24       	eor	r1, r1
    113c:	91 1d       	adc	r25, r1
    113e:	08 95       	ret

00001140 <__muluhisi3>:
    1140:	f0 df       	rcall	.-32     	; 0x1122 <__umulhisi3>
    1142:	a5 9f       	mul	r26, r21
    1144:	90 0d       	add	r25, r0
    1146:	b4 9f       	mul	r27, r20
    1148:	90 0d       	add	r25, r0
    114a:	a4 9f       	mul	r26, r20
    114c:	80 0d       	add	r24, r0
    114e:	91 1d       	adc	r25, r1
    1150:	11 24       	eor	r1, r1
    1152:	08 95       	ret

00001154 <__udivmodhi4>:
    1154:	aa 1b       	sub	r26, r26
    1156:	bb 1b       	sub	r27, r27
    1158:	51 e1       	ldi	r21, 0x11	; 17
    115a:	07 c0       	rjmp	.+14     	; 0x116a <__udivmodhi4_ep>

0000115c <__udivmodhi4_loop>:
    115c:	aa 1f       	adc	r26, r26
    115e:	bb 1f       	adc	r27, r27
    1160:	a6 17       	cp	r26, r22
    1162:	b7 07       	cpc	r27, r23
    1164:	10 f0       	brcs	.+4      	; 0x116a <__udivmodhi4_ep>
    1166:	a6 1b       	sub	r26, r22
    1168:	b7 0b       	sbc	r27, r23

0000116a <__udivmodhi4_ep>:
    116a:	88 1f       	adc	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	5a 95       	dec	r21
    1170:	a9 f7       	brne	.-22     	; 0x115c <__udivmodhi4_loop>
    1172:	80 95       	com	r24
    1174:	90 95       	com	r25
    1176:	bc 01       	movw	r22, r24
    1178:	cd 01       	movw	r24, r26
    117a:	08 95       	ret

0000117c <snprintf>:
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	2e 97       	sbiw	r28, 0x0e	; 14
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	0d 89       	ldd	r16, Y+21	; 0x15
    1196:	1e 89       	ldd	r17, Y+22	; 0x16
    1198:	8f 89       	ldd	r24, Y+23	; 0x17
    119a:	98 8d       	ldd	r25, Y+24	; 0x18
    119c:	26 e0       	ldi	r18, 0x06	; 6
    119e:	2c 83       	std	Y+4, r18	; 0x04
    11a0:	1a 83       	std	Y+2, r17	; 0x02
    11a2:	09 83       	std	Y+1, r16	; 0x01
    11a4:	97 ff       	sbrs	r25, 7
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <snprintf+0x30>
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	90 e8       	ldi	r25, 0x80	; 128
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	9e 83       	std	Y+6, r25	; 0x06
    11b0:	8d 83       	std	Y+5, r24	; 0x05
    11b2:	ae 01       	movw	r20, r28
    11b4:	45 5e       	subi	r20, 0xE5	; 229
    11b6:	5f 4f       	sbci	r21, 0xFF	; 255
    11b8:	69 8d       	ldd	r22, Y+25	; 0x19
    11ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11bc:	ce 01       	movw	r24, r28
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	19 d0       	rcall	.+50     	; 0x11f4 <vfprintf>
    11c2:	4d 81       	ldd	r20, Y+5	; 0x05
    11c4:	5e 81       	ldd	r21, Y+6	; 0x06
    11c6:	57 fd       	sbrc	r21, 7
    11c8:	0a c0       	rjmp	.+20     	; 0x11de <snprintf+0x62>
    11ca:	2f 81       	ldd	r18, Y+7	; 0x07
    11cc:	38 85       	ldd	r19, Y+8	; 0x08
    11ce:	42 17       	cp	r20, r18
    11d0:	53 07       	cpc	r21, r19
    11d2:	0c f4       	brge	.+2      	; 0x11d6 <snprintf+0x5a>
    11d4:	9a 01       	movw	r18, r20
    11d6:	f8 01       	movw	r30, r16
    11d8:	e2 0f       	add	r30, r18
    11da:	f3 1f       	adc	r31, r19
    11dc:	10 82       	st	Z, r1
    11de:	2e 96       	adiw	r28, 0x0e	; 14
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	08 95       	ret

000011f4 <vfprintf>:
    11f4:	2f 92       	push	r2
    11f6:	3f 92       	push	r3
    11f8:	4f 92       	push	r4
    11fa:	5f 92       	push	r5
    11fc:	6f 92       	push	r6
    11fe:	7f 92       	push	r7
    1200:	8f 92       	push	r8
    1202:	9f 92       	push	r9
    1204:	af 92       	push	r10
    1206:	bf 92       	push	r11
    1208:	cf 92       	push	r12
    120a:	df 92       	push	r13
    120c:	ef 92       	push	r14
    120e:	ff 92       	push	r15
    1210:	0f 93       	push	r16
    1212:	1f 93       	push	r17
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	2b 97       	sbiw	r28, 0x0b	; 11
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	6c 01       	movw	r12, r24
    122a:	7b 01       	movw	r14, r22
    122c:	8a 01       	movw	r16, r20
    122e:	fc 01       	movw	r30, r24
    1230:	17 82       	std	Z+7, r1	; 0x07
    1232:	16 82       	std	Z+6, r1	; 0x06
    1234:	83 81       	ldd	r24, Z+3	; 0x03
    1236:	81 ff       	sbrs	r24, 1
    1238:	bf c1       	rjmp	.+894    	; 0x15b8 <vfprintf+0x3c4>
    123a:	ce 01       	movw	r24, r28
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	3c 01       	movw	r6, r24
    1240:	f6 01       	movw	r30, r12
    1242:	93 81       	ldd	r25, Z+3	; 0x03
    1244:	f7 01       	movw	r30, r14
    1246:	93 fd       	sbrc	r25, 3
    1248:	85 91       	lpm	r24, Z+
    124a:	93 ff       	sbrs	r25, 3
    124c:	81 91       	ld	r24, Z+
    124e:	7f 01       	movw	r14, r30
    1250:	88 23       	and	r24, r24
    1252:	09 f4       	brne	.+2      	; 0x1256 <vfprintf+0x62>
    1254:	ad c1       	rjmp	.+858    	; 0x15b0 <vfprintf+0x3bc>
    1256:	85 32       	cpi	r24, 0x25	; 37
    1258:	39 f4       	brne	.+14     	; 0x1268 <vfprintf+0x74>
    125a:	93 fd       	sbrc	r25, 3
    125c:	85 91       	lpm	r24, Z+
    125e:	93 ff       	sbrs	r25, 3
    1260:	81 91       	ld	r24, Z+
    1262:	7f 01       	movw	r14, r30
    1264:	85 32       	cpi	r24, 0x25	; 37
    1266:	21 f4       	brne	.+8      	; 0x1270 <vfprintf+0x7c>
    1268:	b6 01       	movw	r22, r12
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	d6 d1       	rcall	.+940    	; 0x161a <fputc>
    126e:	e8 cf       	rjmp	.-48     	; 0x1240 <vfprintf+0x4c>
    1270:	91 2c       	mov	r9, r1
    1272:	21 2c       	mov	r2, r1
    1274:	31 2c       	mov	r3, r1
    1276:	ff e1       	ldi	r31, 0x1F	; 31
    1278:	f3 15       	cp	r31, r3
    127a:	d8 f0       	brcs	.+54     	; 0x12b2 <vfprintf+0xbe>
    127c:	8b 32       	cpi	r24, 0x2B	; 43
    127e:	79 f0       	breq	.+30     	; 0x129e <vfprintf+0xaa>
    1280:	38 f4       	brcc	.+14     	; 0x1290 <vfprintf+0x9c>
    1282:	80 32       	cpi	r24, 0x20	; 32
    1284:	79 f0       	breq	.+30     	; 0x12a4 <vfprintf+0xb0>
    1286:	83 32       	cpi	r24, 0x23	; 35
    1288:	a1 f4       	brne	.+40     	; 0x12b2 <vfprintf+0xbe>
    128a:	23 2d       	mov	r18, r3
    128c:	20 61       	ori	r18, 0x10	; 16
    128e:	1d c0       	rjmp	.+58     	; 0x12ca <vfprintf+0xd6>
    1290:	8d 32       	cpi	r24, 0x2D	; 45
    1292:	61 f0       	breq	.+24     	; 0x12ac <vfprintf+0xb8>
    1294:	80 33       	cpi	r24, 0x30	; 48
    1296:	69 f4       	brne	.+26     	; 0x12b2 <vfprintf+0xbe>
    1298:	23 2d       	mov	r18, r3
    129a:	21 60       	ori	r18, 0x01	; 1
    129c:	16 c0       	rjmp	.+44     	; 0x12ca <vfprintf+0xd6>
    129e:	83 2d       	mov	r24, r3
    12a0:	82 60       	ori	r24, 0x02	; 2
    12a2:	38 2e       	mov	r3, r24
    12a4:	e3 2d       	mov	r30, r3
    12a6:	e4 60       	ori	r30, 0x04	; 4
    12a8:	3e 2e       	mov	r3, r30
    12aa:	2a c0       	rjmp	.+84     	; 0x1300 <vfprintf+0x10c>
    12ac:	f3 2d       	mov	r31, r3
    12ae:	f8 60       	ori	r31, 0x08	; 8
    12b0:	1d c0       	rjmp	.+58     	; 0x12ec <vfprintf+0xf8>
    12b2:	37 fc       	sbrc	r3, 7
    12b4:	2d c0       	rjmp	.+90     	; 0x1310 <vfprintf+0x11c>
    12b6:	20 ed       	ldi	r18, 0xD0	; 208
    12b8:	28 0f       	add	r18, r24
    12ba:	2a 30       	cpi	r18, 0x0A	; 10
    12bc:	40 f0       	brcs	.+16     	; 0x12ce <vfprintf+0xda>
    12be:	8e 32       	cpi	r24, 0x2E	; 46
    12c0:	b9 f4       	brne	.+46     	; 0x12f0 <vfprintf+0xfc>
    12c2:	36 fc       	sbrc	r3, 6
    12c4:	75 c1       	rjmp	.+746    	; 0x15b0 <vfprintf+0x3bc>
    12c6:	23 2d       	mov	r18, r3
    12c8:	20 64       	ori	r18, 0x40	; 64
    12ca:	32 2e       	mov	r3, r18
    12cc:	19 c0       	rjmp	.+50     	; 0x1300 <vfprintf+0x10c>
    12ce:	36 fe       	sbrs	r3, 6
    12d0:	06 c0       	rjmp	.+12     	; 0x12de <vfprintf+0xea>
    12d2:	8a e0       	ldi	r24, 0x0A	; 10
    12d4:	98 9e       	mul	r9, r24
    12d6:	20 0d       	add	r18, r0
    12d8:	11 24       	eor	r1, r1
    12da:	92 2e       	mov	r9, r18
    12dc:	11 c0       	rjmp	.+34     	; 0x1300 <vfprintf+0x10c>
    12de:	ea e0       	ldi	r30, 0x0A	; 10
    12e0:	2e 9e       	mul	r2, r30
    12e2:	20 0d       	add	r18, r0
    12e4:	11 24       	eor	r1, r1
    12e6:	22 2e       	mov	r2, r18
    12e8:	f3 2d       	mov	r31, r3
    12ea:	f0 62       	ori	r31, 0x20	; 32
    12ec:	3f 2e       	mov	r3, r31
    12ee:	08 c0       	rjmp	.+16     	; 0x1300 <vfprintf+0x10c>
    12f0:	8c 36       	cpi	r24, 0x6C	; 108
    12f2:	21 f4       	brne	.+8      	; 0x12fc <vfprintf+0x108>
    12f4:	83 2d       	mov	r24, r3
    12f6:	80 68       	ori	r24, 0x80	; 128
    12f8:	38 2e       	mov	r3, r24
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <vfprintf+0x10c>
    12fc:	88 36       	cpi	r24, 0x68	; 104
    12fe:	41 f4       	brne	.+16     	; 0x1310 <vfprintf+0x11c>
    1300:	f7 01       	movw	r30, r14
    1302:	93 fd       	sbrc	r25, 3
    1304:	85 91       	lpm	r24, Z+
    1306:	93 ff       	sbrs	r25, 3
    1308:	81 91       	ld	r24, Z+
    130a:	7f 01       	movw	r14, r30
    130c:	81 11       	cpse	r24, r1
    130e:	b3 cf       	rjmp	.-154    	; 0x1276 <vfprintf+0x82>
    1310:	98 2f       	mov	r25, r24
    1312:	9f 7d       	andi	r25, 0xDF	; 223
    1314:	95 54       	subi	r25, 0x45	; 69
    1316:	93 30       	cpi	r25, 0x03	; 3
    1318:	28 f4       	brcc	.+10     	; 0x1324 <vfprintf+0x130>
    131a:	0c 5f       	subi	r16, 0xFC	; 252
    131c:	1f 4f       	sbci	r17, 0xFF	; 255
    131e:	9f e3       	ldi	r25, 0x3F	; 63
    1320:	99 83       	std	Y+1, r25	; 0x01
    1322:	0d c0       	rjmp	.+26     	; 0x133e <vfprintf+0x14a>
    1324:	83 36       	cpi	r24, 0x63	; 99
    1326:	31 f0       	breq	.+12     	; 0x1334 <vfprintf+0x140>
    1328:	83 37       	cpi	r24, 0x73	; 115
    132a:	71 f0       	breq	.+28     	; 0x1348 <vfprintf+0x154>
    132c:	83 35       	cpi	r24, 0x53	; 83
    132e:	09 f0       	breq	.+2      	; 0x1332 <vfprintf+0x13e>
    1330:	55 c0       	rjmp	.+170    	; 0x13dc <vfprintf+0x1e8>
    1332:	20 c0       	rjmp	.+64     	; 0x1374 <vfprintf+0x180>
    1334:	f8 01       	movw	r30, r16
    1336:	80 81       	ld	r24, Z
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	0e 5f       	subi	r16, 0xFE	; 254
    133c:	1f 4f       	sbci	r17, 0xFF	; 255
    133e:	88 24       	eor	r8, r8
    1340:	83 94       	inc	r8
    1342:	91 2c       	mov	r9, r1
    1344:	53 01       	movw	r10, r6
    1346:	12 c0       	rjmp	.+36     	; 0x136c <vfprintf+0x178>
    1348:	28 01       	movw	r4, r16
    134a:	f2 e0       	ldi	r31, 0x02	; 2
    134c:	4f 0e       	add	r4, r31
    134e:	51 1c       	adc	r5, r1
    1350:	f8 01       	movw	r30, r16
    1352:	a0 80       	ld	r10, Z
    1354:	b1 80       	ldd	r11, Z+1	; 0x01
    1356:	36 fe       	sbrs	r3, 6
    1358:	03 c0       	rjmp	.+6      	; 0x1360 <vfprintf+0x16c>
    135a:	69 2d       	mov	r22, r9
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <vfprintf+0x170>
    1360:	6f ef       	ldi	r22, 0xFF	; 255
    1362:	7f ef       	ldi	r23, 0xFF	; 255
    1364:	c5 01       	movw	r24, r10
    1366:	4e d1       	rcall	.+668    	; 0x1604 <strnlen>
    1368:	4c 01       	movw	r8, r24
    136a:	82 01       	movw	r16, r4
    136c:	f3 2d       	mov	r31, r3
    136e:	ff 77       	andi	r31, 0x7F	; 127
    1370:	3f 2e       	mov	r3, r31
    1372:	15 c0       	rjmp	.+42     	; 0x139e <vfprintf+0x1aa>
    1374:	28 01       	movw	r4, r16
    1376:	22 e0       	ldi	r18, 0x02	; 2
    1378:	42 0e       	add	r4, r18
    137a:	51 1c       	adc	r5, r1
    137c:	f8 01       	movw	r30, r16
    137e:	a0 80       	ld	r10, Z
    1380:	b1 80       	ldd	r11, Z+1	; 0x01
    1382:	36 fe       	sbrs	r3, 6
    1384:	03 c0       	rjmp	.+6      	; 0x138c <vfprintf+0x198>
    1386:	69 2d       	mov	r22, r9
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <vfprintf+0x19c>
    138c:	6f ef       	ldi	r22, 0xFF	; 255
    138e:	7f ef       	ldi	r23, 0xFF	; 255
    1390:	c5 01       	movw	r24, r10
    1392:	2d d1       	rcall	.+602    	; 0x15ee <strnlen_P>
    1394:	4c 01       	movw	r8, r24
    1396:	f3 2d       	mov	r31, r3
    1398:	f0 68       	ori	r31, 0x80	; 128
    139a:	3f 2e       	mov	r3, r31
    139c:	82 01       	movw	r16, r4
    139e:	33 fc       	sbrc	r3, 3
    13a0:	19 c0       	rjmp	.+50     	; 0x13d4 <vfprintf+0x1e0>
    13a2:	82 2d       	mov	r24, r2
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	88 16       	cp	r8, r24
    13a8:	99 06       	cpc	r9, r25
    13aa:	a0 f4       	brcc	.+40     	; 0x13d4 <vfprintf+0x1e0>
    13ac:	b6 01       	movw	r22, r12
    13ae:	80 e2       	ldi	r24, 0x20	; 32
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	33 d1       	rcall	.+614    	; 0x161a <fputc>
    13b4:	2a 94       	dec	r2
    13b6:	f5 cf       	rjmp	.-22     	; 0x13a2 <vfprintf+0x1ae>
    13b8:	f5 01       	movw	r30, r10
    13ba:	37 fc       	sbrc	r3, 7
    13bc:	85 91       	lpm	r24, Z+
    13be:	37 fe       	sbrs	r3, 7
    13c0:	81 91       	ld	r24, Z+
    13c2:	5f 01       	movw	r10, r30
    13c4:	b6 01       	movw	r22, r12
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	28 d1       	rcall	.+592    	; 0x161a <fputc>
    13ca:	21 10       	cpse	r2, r1
    13cc:	2a 94       	dec	r2
    13ce:	21 e0       	ldi	r18, 0x01	; 1
    13d0:	82 1a       	sub	r8, r18
    13d2:	91 08       	sbc	r9, r1
    13d4:	81 14       	cp	r8, r1
    13d6:	91 04       	cpc	r9, r1
    13d8:	79 f7       	brne	.-34     	; 0x13b8 <vfprintf+0x1c4>
    13da:	e1 c0       	rjmp	.+450    	; 0x159e <vfprintf+0x3aa>
    13dc:	84 36       	cpi	r24, 0x64	; 100
    13de:	11 f0       	breq	.+4      	; 0x13e4 <vfprintf+0x1f0>
    13e0:	89 36       	cpi	r24, 0x69	; 105
    13e2:	39 f5       	brne	.+78     	; 0x1432 <vfprintf+0x23e>
    13e4:	f8 01       	movw	r30, r16
    13e6:	37 fe       	sbrs	r3, 7
    13e8:	07 c0       	rjmp	.+14     	; 0x13f8 <vfprintf+0x204>
    13ea:	60 81       	ld	r22, Z
    13ec:	71 81       	ldd	r23, Z+1	; 0x01
    13ee:	82 81       	ldd	r24, Z+2	; 0x02
    13f0:	93 81       	ldd	r25, Z+3	; 0x03
    13f2:	0c 5f       	subi	r16, 0xFC	; 252
    13f4:	1f 4f       	sbci	r17, 0xFF	; 255
    13f6:	08 c0       	rjmp	.+16     	; 0x1408 <vfprintf+0x214>
    13f8:	60 81       	ld	r22, Z
    13fa:	71 81       	ldd	r23, Z+1	; 0x01
    13fc:	07 2e       	mov	r0, r23
    13fe:	00 0c       	add	r0, r0
    1400:	88 0b       	sbc	r24, r24
    1402:	99 0b       	sbc	r25, r25
    1404:	0e 5f       	subi	r16, 0xFE	; 254
    1406:	1f 4f       	sbci	r17, 0xFF	; 255
    1408:	f3 2d       	mov	r31, r3
    140a:	ff 76       	andi	r31, 0x6F	; 111
    140c:	3f 2e       	mov	r3, r31
    140e:	97 ff       	sbrs	r25, 7
    1410:	09 c0       	rjmp	.+18     	; 0x1424 <vfprintf+0x230>
    1412:	90 95       	com	r25
    1414:	80 95       	com	r24
    1416:	70 95       	com	r23
    1418:	61 95       	neg	r22
    141a:	7f 4f       	sbci	r23, 0xFF	; 255
    141c:	8f 4f       	sbci	r24, 0xFF	; 255
    141e:	9f 4f       	sbci	r25, 0xFF	; 255
    1420:	f0 68       	ori	r31, 0x80	; 128
    1422:	3f 2e       	mov	r3, r31
    1424:	2a e0       	ldi	r18, 0x0A	; 10
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	a3 01       	movw	r20, r6
    142a:	33 d1       	rcall	.+614    	; 0x1692 <__ultoa_invert>
    142c:	88 2e       	mov	r8, r24
    142e:	86 18       	sub	r8, r6
    1430:	44 c0       	rjmp	.+136    	; 0x14ba <vfprintf+0x2c6>
    1432:	85 37       	cpi	r24, 0x75	; 117
    1434:	31 f4       	brne	.+12     	; 0x1442 <vfprintf+0x24e>
    1436:	23 2d       	mov	r18, r3
    1438:	2f 7e       	andi	r18, 0xEF	; 239
    143a:	b2 2e       	mov	r11, r18
    143c:	2a e0       	ldi	r18, 0x0A	; 10
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	25 c0       	rjmp	.+74     	; 0x148c <vfprintf+0x298>
    1442:	93 2d       	mov	r25, r3
    1444:	99 7f       	andi	r25, 0xF9	; 249
    1446:	b9 2e       	mov	r11, r25
    1448:	8f 36       	cpi	r24, 0x6F	; 111
    144a:	c1 f0       	breq	.+48     	; 0x147c <vfprintf+0x288>
    144c:	18 f4       	brcc	.+6      	; 0x1454 <vfprintf+0x260>
    144e:	88 35       	cpi	r24, 0x58	; 88
    1450:	79 f0       	breq	.+30     	; 0x1470 <vfprintf+0x27c>
    1452:	ae c0       	rjmp	.+348    	; 0x15b0 <vfprintf+0x3bc>
    1454:	80 37       	cpi	r24, 0x70	; 112
    1456:	19 f0       	breq	.+6      	; 0x145e <vfprintf+0x26a>
    1458:	88 37       	cpi	r24, 0x78	; 120
    145a:	21 f0       	breq	.+8      	; 0x1464 <vfprintf+0x270>
    145c:	a9 c0       	rjmp	.+338    	; 0x15b0 <vfprintf+0x3bc>
    145e:	e9 2f       	mov	r30, r25
    1460:	e0 61       	ori	r30, 0x10	; 16
    1462:	be 2e       	mov	r11, r30
    1464:	b4 fe       	sbrs	r11, 4
    1466:	0d c0       	rjmp	.+26     	; 0x1482 <vfprintf+0x28e>
    1468:	fb 2d       	mov	r31, r11
    146a:	f4 60       	ori	r31, 0x04	; 4
    146c:	bf 2e       	mov	r11, r31
    146e:	09 c0       	rjmp	.+18     	; 0x1482 <vfprintf+0x28e>
    1470:	34 fe       	sbrs	r3, 4
    1472:	0a c0       	rjmp	.+20     	; 0x1488 <vfprintf+0x294>
    1474:	29 2f       	mov	r18, r25
    1476:	26 60       	ori	r18, 0x06	; 6
    1478:	b2 2e       	mov	r11, r18
    147a:	06 c0       	rjmp	.+12     	; 0x1488 <vfprintf+0x294>
    147c:	28 e0       	ldi	r18, 0x08	; 8
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	05 c0       	rjmp	.+10     	; 0x148c <vfprintf+0x298>
    1482:	20 e1       	ldi	r18, 0x10	; 16
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	02 c0       	rjmp	.+4      	; 0x148c <vfprintf+0x298>
    1488:	20 e1       	ldi	r18, 0x10	; 16
    148a:	32 e0       	ldi	r19, 0x02	; 2
    148c:	f8 01       	movw	r30, r16
    148e:	b7 fe       	sbrs	r11, 7
    1490:	07 c0       	rjmp	.+14     	; 0x14a0 <vfprintf+0x2ac>
    1492:	60 81       	ld	r22, Z
    1494:	71 81       	ldd	r23, Z+1	; 0x01
    1496:	82 81       	ldd	r24, Z+2	; 0x02
    1498:	93 81       	ldd	r25, Z+3	; 0x03
    149a:	0c 5f       	subi	r16, 0xFC	; 252
    149c:	1f 4f       	sbci	r17, 0xFF	; 255
    149e:	06 c0       	rjmp	.+12     	; 0x14ac <vfprintf+0x2b8>
    14a0:	60 81       	ld	r22, Z
    14a2:	71 81       	ldd	r23, Z+1	; 0x01
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 5f       	subi	r16, 0xFE	; 254
    14aa:	1f 4f       	sbci	r17, 0xFF	; 255
    14ac:	a3 01       	movw	r20, r6
    14ae:	f1 d0       	rcall	.+482    	; 0x1692 <__ultoa_invert>
    14b0:	88 2e       	mov	r8, r24
    14b2:	86 18       	sub	r8, r6
    14b4:	fb 2d       	mov	r31, r11
    14b6:	ff 77       	andi	r31, 0x7F	; 127
    14b8:	3f 2e       	mov	r3, r31
    14ba:	36 fe       	sbrs	r3, 6
    14bc:	0d c0       	rjmp	.+26     	; 0x14d8 <vfprintf+0x2e4>
    14be:	23 2d       	mov	r18, r3
    14c0:	2e 7f       	andi	r18, 0xFE	; 254
    14c2:	a2 2e       	mov	r10, r18
    14c4:	89 14       	cp	r8, r9
    14c6:	58 f4       	brcc	.+22     	; 0x14de <vfprintf+0x2ea>
    14c8:	34 fe       	sbrs	r3, 4
    14ca:	0b c0       	rjmp	.+22     	; 0x14e2 <vfprintf+0x2ee>
    14cc:	32 fc       	sbrc	r3, 2
    14ce:	09 c0       	rjmp	.+18     	; 0x14e2 <vfprintf+0x2ee>
    14d0:	83 2d       	mov	r24, r3
    14d2:	8e 7e       	andi	r24, 0xEE	; 238
    14d4:	a8 2e       	mov	r10, r24
    14d6:	05 c0       	rjmp	.+10     	; 0x14e2 <vfprintf+0x2ee>
    14d8:	b8 2c       	mov	r11, r8
    14da:	a3 2c       	mov	r10, r3
    14dc:	03 c0       	rjmp	.+6      	; 0x14e4 <vfprintf+0x2f0>
    14de:	b8 2c       	mov	r11, r8
    14e0:	01 c0       	rjmp	.+2      	; 0x14e4 <vfprintf+0x2f0>
    14e2:	b9 2c       	mov	r11, r9
    14e4:	a4 fe       	sbrs	r10, 4
    14e6:	0f c0       	rjmp	.+30     	; 0x1506 <vfprintf+0x312>
    14e8:	fe 01       	movw	r30, r28
    14ea:	e8 0d       	add	r30, r8
    14ec:	f1 1d       	adc	r31, r1
    14ee:	80 81       	ld	r24, Z
    14f0:	80 33       	cpi	r24, 0x30	; 48
    14f2:	21 f4       	brne	.+8      	; 0x14fc <vfprintf+0x308>
    14f4:	9a 2d       	mov	r25, r10
    14f6:	99 7e       	andi	r25, 0xE9	; 233
    14f8:	a9 2e       	mov	r10, r25
    14fa:	09 c0       	rjmp	.+18     	; 0x150e <vfprintf+0x31a>
    14fc:	a2 fe       	sbrs	r10, 2
    14fe:	06 c0       	rjmp	.+12     	; 0x150c <vfprintf+0x318>
    1500:	b3 94       	inc	r11
    1502:	b3 94       	inc	r11
    1504:	04 c0       	rjmp	.+8      	; 0x150e <vfprintf+0x31a>
    1506:	8a 2d       	mov	r24, r10
    1508:	86 78       	andi	r24, 0x86	; 134
    150a:	09 f0       	breq	.+2      	; 0x150e <vfprintf+0x31a>
    150c:	b3 94       	inc	r11
    150e:	a3 fc       	sbrc	r10, 3
    1510:	10 c0       	rjmp	.+32     	; 0x1532 <vfprintf+0x33e>
    1512:	a0 fe       	sbrs	r10, 0
    1514:	06 c0       	rjmp	.+12     	; 0x1522 <vfprintf+0x32e>
    1516:	b2 14       	cp	r11, r2
    1518:	80 f4       	brcc	.+32     	; 0x153a <vfprintf+0x346>
    151a:	28 0c       	add	r2, r8
    151c:	92 2c       	mov	r9, r2
    151e:	9b 18       	sub	r9, r11
    1520:	0d c0       	rjmp	.+26     	; 0x153c <vfprintf+0x348>
    1522:	b2 14       	cp	r11, r2
    1524:	58 f4       	brcc	.+22     	; 0x153c <vfprintf+0x348>
    1526:	b6 01       	movw	r22, r12
    1528:	80 e2       	ldi	r24, 0x20	; 32
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	76 d0       	rcall	.+236    	; 0x161a <fputc>
    152e:	b3 94       	inc	r11
    1530:	f8 cf       	rjmp	.-16     	; 0x1522 <vfprintf+0x32e>
    1532:	b2 14       	cp	r11, r2
    1534:	18 f4       	brcc	.+6      	; 0x153c <vfprintf+0x348>
    1536:	2b 18       	sub	r2, r11
    1538:	02 c0       	rjmp	.+4      	; 0x153e <vfprintf+0x34a>
    153a:	98 2c       	mov	r9, r8
    153c:	21 2c       	mov	r2, r1
    153e:	a4 fe       	sbrs	r10, 4
    1540:	0f c0       	rjmp	.+30     	; 0x1560 <vfprintf+0x36c>
    1542:	b6 01       	movw	r22, r12
    1544:	80 e3       	ldi	r24, 0x30	; 48
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	68 d0       	rcall	.+208    	; 0x161a <fputc>
    154a:	a2 fe       	sbrs	r10, 2
    154c:	16 c0       	rjmp	.+44     	; 0x157a <vfprintf+0x386>
    154e:	a1 fc       	sbrc	r10, 1
    1550:	03 c0       	rjmp	.+6      	; 0x1558 <vfprintf+0x364>
    1552:	88 e7       	ldi	r24, 0x78	; 120
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 c0       	rjmp	.+4      	; 0x155c <vfprintf+0x368>
    1558:	88 e5       	ldi	r24, 0x58	; 88
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	b6 01       	movw	r22, r12
    155e:	0c c0       	rjmp	.+24     	; 0x1578 <vfprintf+0x384>
    1560:	8a 2d       	mov	r24, r10
    1562:	86 78       	andi	r24, 0x86	; 134
    1564:	51 f0       	breq	.+20     	; 0x157a <vfprintf+0x386>
    1566:	a1 fe       	sbrs	r10, 1
    1568:	02 c0       	rjmp	.+4      	; 0x156e <vfprintf+0x37a>
    156a:	8b e2       	ldi	r24, 0x2B	; 43
    156c:	01 c0       	rjmp	.+2      	; 0x1570 <vfprintf+0x37c>
    156e:	80 e2       	ldi	r24, 0x20	; 32
    1570:	a7 fc       	sbrc	r10, 7
    1572:	8d e2       	ldi	r24, 0x2D	; 45
    1574:	b6 01       	movw	r22, r12
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	50 d0       	rcall	.+160    	; 0x161a <fputc>
    157a:	89 14       	cp	r8, r9
    157c:	30 f4       	brcc	.+12     	; 0x158a <vfprintf+0x396>
    157e:	b6 01       	movw	r22, r12
    1580:	80 e3       	ldi	r24, 0x30	; 48
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	4a d0       	rcall	.+148    	; 0x161a <fputc>
    1586:	9a 94       	dec	r9
    1588:	f8 cf       	rjmp	.-16     	; 0x157a <vfprintf+0x386>
    158a:	8a 94       	dec	r8
    158c:	f3 01       	movw	r30, r6
    158e:	e8 0d       	add	r30, r8
    1590:	f1 1d       	adc	r31, r1
    1592:	80 81       	ld	r24, Z
    1594:	b6 01       	movw	r22, r12
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	40 d0       	rcall	.+128    	; 0x161a <fputc>
    159a:	81 10       	cpse	r8, r1
    159c:	f6 cf       	rjmp	.-20     	; 0x158a <vfprintf+0x396>
    159e:	22 20       	and	r2, r2
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <vfprintf+0x3b0>
    15a2:	4e ce       	rjmp	.-868    	; 0x1240 <vfprintf+0x4c>
    15a4:	b6 01       	movw	r22, r12
    15a6:	80 e2       	ldi	r24, 0x20	; 32
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	37 d0       	rcall	.+110    	; 0x161a <fputc>
    15ac:	2a 94       	dec	r2
    15ae:	f7 cf       	rjmp	.-18     	; 0x159e <vfprintf+0x3aa>
    15b0:	f6 01       	movw	r30, r12
    15b2:	86 81       	ldd	r24, Z+6	; 0x06
    15b4:	97 81       	ldd	r25, Z+7	; 0x07
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <vfprintf+0x3c8>
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	9f ef       	ldi	r25, 0xFF	; 255
    15bc:	2b 96       	adiw	r28, 0x0b	; 11
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	1f 91       	pop	r17
    15ce:	0f 91       	pop	r16
    15d0:	ff 90       	pop	r15
    15d2:	ef 90       	pop	r14
    15d4:	df 90       	pop	r13
    15d6:	cf 90       	pop	r12
    15d8:	bf 90       	pop	r11
    15da:	af 90       	pop	r10
    15dc:	9f 90       	pop	r9
    15de:	8f 90       	pop	r8
    15e0:	7f 90       	pop	r7
    15e2:	6f 90       	pop	r6
    15e4:	5f 90       	pop	r5
    15e6:	4f 90       	pop	r4
    15e8:	3f 90       	pop	r3
    15ea:	2f 90       	pop	r2
    15ec:	08 95       	ret

000015ee <strnlen_P>:
    15ee:	fc 01       	movw	r30, r24
    15f0:	05 90       	lpm	r0, Z+
    15f2:	61 50       	subi	r22, 0x01	; 1
    15f4:	70 40       	sbci	r23, 0x00	; 0
    15f6:	01 10       	cpse	r0, r1
    15f8:	d8 f7       	brcc	.-10     	; 0x15f0 <strnlen_P+0x2>
    15fa:	80 95       	com	r24
    15fc:	90 95       	com	r25
    15fe:	8e 0f       	add	r24, r30
    1600:	9f 1f       	adc	r25, r31
    1602:	08 95       	ret

00001604 <strnlen>:
    1604:	fc 01       	movw	r30, r24
    1606:	61 50       	subi	r22, 0x01	; 1
    1608:	70 40       	sbci	r23, 0x00	; 0
    160a:	01 90       	ld	r0, Z+
    160c:	01 10       	cpse	r0, r1
    160e:	d8 f7       	brcc	.-10     	; 0x1606 <strnlen+0x2>
    1610:	80 95       	com	r24
    1612:	90 95       	com	r25
    1614:	8e 0f       	add	r24, r30
    1616:	9f 1f       	adc	r25, r31
    1618:	08 95       	ret

0000161a <fputc>:
    161a:	0f 93       	push	r16
    161c:	1f 93       	push	r17
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	fb 01       	movw	r30, r22
    1624:	23 81       	ldd	r18, Z+3	; 0x03
    1626:	21 fd       	sbrc	r18, 1
    1628:	03 c0       	rjmp	.+6      	; 0x1630 <fputc+0x16>
    162a:	8f ef       	ldi	r24, 0xFF	; 255
    162c:	9f ef       	ldi	r25, 0xFF	; 255
    162e:	2c c0       	rjmp	.+88     	; 0x1688 <fputc+0x6e>
    1630:	22 ff       	sbrs	r18, 2
    1632:	16 c0       	rjmp	.+44     	; 0x1660 <fputc+0x46>
    1634:	46 81       	ldd	r20, Z+6	; 0x06
    1636:	57 81       	ldd	r21, Z+7	; 0x07
    1638:	24 81       	ldd	r18, Z+4	; 0x04
    163a:	35 81       	ldd	r19, Z+5	; 0x05
    163c:	42 17       	cp	r20, r18
    163e:	53 07       	cpc	r21, r19
    1640:	44 f4       	brge	.+16     	; 0x1652 <fputc+0x38>
    1642:	a0 81       	ld	r26, Z
    1644:	b1 81       	ldd	r27, Z+1	; 0x01
    1646:	9d 01       	movw	r18, r26
    1648:	2f 5f       	subi	r18, 0xFF	; 255
    164a:	3f 4f       	sbci	r19, 0xFF	; 255
    164c:	31 83       	std	Z+1, r19	; 0x01
    164e:	20 83       	st	Z, r18
    1650:	8c 93       	st	X, r24
    1652:	26 81       	ldd	r18, Z+6	; 0x06
    1654:	37 81       	ldd	r19, Z+7	; 0x07
    1656:	2f 5f       	subi	r18, 0xFF	; 255
    1658:	3f 4f       	sbci	r19, 0xFF	; 255
    165a:	37 83       	std	Z+7, r19	; 0x07
    165c:	26 83       	std	Z+6, r18	; 0x06
    165e:	14 c0       	rjmp	.+40     	; 0x1688 <fputc+0x6e>
    1660:	8b 01       	movw	r16, r22
    1662:	ec 01       	movw	r28, r24
    1664:	fb 01       	movw	r30, r22
    1666:	00 84       	ldd	r0, Z+8	; 0x08
    1668:	f1 85       	ldd	r31, Z+9	; 0x09
    166a:	e0 2d       	mov	r30, r0
    166c:	09 95       	icall
    166e:	89 2b       	or	r24, r25
    1670:	e1 f6       	brne	.-72     	; 0x162a <fputc+0x10>
    1672:	d8 01       	movw	r26, r16
    1674:	16 96       	adiw	r26, 0x06	; 6
    1676:	8d 91       	ld	r24, X+
    1678:	9c 91       	ld	r25, X
    167a:	17 97       	sbiw	r26, 0x07	; 7
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	17 96       	adiw	r26, 0x07	; 7
    1680:	9c 93       	st	X, r25
    1682:	8e 93       	st	-X, r24
    1684:	16 97       	sbiw	r26, 0x06	; 6
    1686:	ce 01       	movw	r24, r28
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	1f 91       	pop	r17
    168e:	0f 91       	pop	r16
    1690:	08 95       	ret

00001692 <__ultoa_invert>:
    1692:	fa 01       	movw	r30, r20
    1694:	aa 27       	eor	r26, r26
    1696:	28 30       	cpi	r18, 0x08	; 8
    1698:	51 f1       	breq	.+84     	; 0x16ee <__ultoa_invert+0x5c>
    169a:	20 31       	cpi	r18, 0x10	; 16
    169c:	81 f1       	breq	.+96     	; 0x16fe <__ultoa_invert+0x6c>
    169e:	e8 94       	clt
    16a0:	6f 93       	push	r22
    16a2:	6e 7f       	andi	r22, 0xFE	; 254
    16a4:	6e 5f       	subi	r22, 0xFE	; 254
    16a6:	7f 4f       	sbci	r23, 0xFF	; 255
    16a8:	8f 4f       	sbci	r24, 0xFF	; 255
    16aa:	9f 4f       	sbci	r25, 0xFF	; 255
    16ac:	af 4f       	sbci	r26, 0xFF	; 255
    16ae:	b1 e0       	ldi	r27, 0x01	; 1
    16b0:	3e d0       	rcall	.+124    	; 0x172e <__ultoa_invert+0x9c>
    16b2:	b4 e0       	ldi	r27, 0x04	; 4
    16b4:	3c d0       	rcall	.+120    	; 0x172e <__ultoa_invert+0x9c>
    16b6:	67 0f       	add	r22, r23
    16b8:	78 1f       	adc	r23, r24
    16ba:	89 1f       	adc	r24, r25
    16bc:	9a 1f       	adc	r25, r26
    16be:	a1 1d       	adc	r26, r1
    16c0:	68 0f       	add	r22, r24
    16c2:	79 1f       	adc	r23, r25
    16c4:	8a 1f       	adc	r24, r26
    16c6:	91 1d       	adc	r25, r1
    16c8:	a1 1d       	adc	r26, r1
    16ca:	6a 0f       	add	r22, r26
    16cc:	71 1d       	adc	r23, r1
    16ce:	81 1d       	adc	r24, r1
    16d0:	91 1d       	adc	r25, r1
    16d2:	a1 1d       	adc	r26, r1
    16d4:	20 d0       	rcall	.+64     	; 0x1716 <__ultoa_invert+0x84>
    16d6:	09 f4       	brne	.+2      	; 0x16da <__ultoa_invert+0x48>
    16d8:	68 94       	set
    16da:	3f 91       	pop	r19
    16dc:	2a e0       	ldi	r18, 0x0A	; 10
    16de:	26 9f       	mul	r18, r22
    16e0:	11 24       	eor	r1, r1
    16e2:	30 19       	sub	r19, r0
    16e4:	30 5d       	subi	r19, 0xD0	; 208
    16e6:	31 93       	st	Z+, r19
    16e8:	de f6       	brtc	.-74     	; 0x16a0 <__ultoa_invert+0xe>
    16ea:	cf 01       	movw	r24, r30
    16ec:	08 95       	ret
    16ee:	46 2f       	mov	r20, r22
    16f0:	47 70       	andi	r20, 0x07	; 7
    16f2:	40 5d       	subi	r20, 0xD0	; 208
    16f4:	41 93       	st	Z+, r20
    16f6:	b3 e0       	ldi	r27, 0x03	; 3
    16f8:	0f d0       	rcall	.+30     	; 0x1718 <__ultoa_invert+0x86>
    16fa:	c9 f7       	brne	.-14     	; 0x16ee <__ultoa_invert+0x5c>
    16fc:	f6 cf       	rjmp	.-20     	; 0x16ea <__ultoa_invert+0x58>
    16fe:	46 2f       	mov	r20, r22
    1700:	4f 70       	andi	r20, 0x0F	; 15
    1702:	40 5d       	subi	r20, 0xD0	; 208
    1704:	4a 33       	cpi	r20, 0x3A	; 58
    1706:	18 f0       	brcs	.+6      	; 0x170e <__ultoa_invert+0x7c>
    1708:	49 5d       	subi	r20, 0xD9	; 217
    170a:	31 fd       	sbrc	r19, 1
    170c:	40 52       	subi	r20, 0x20	; 32
    170e:	41 93       	st	Z+, r20
    1710:	02 d0       	rcall	.+4      	; 0x1716 <__ultoa_invert+0x84>
    1712:	a9 f7       	brne	.-22     	; 0x16fe <__ultoa_invert+0x6c>
    1714:	ea cf       	rjmp	.-44     	; 0x16ea <__ultoa_invert+0x58>
    1716:	b4 e0       	ldi	r27, 0x04	; 4
    1718:	a6 95       	lsr	r26
    171a:	97 95       	ror	r25
    171c:	87 95       	ror	r24
    171e:	77 95       	ror	r23
    1720:	67 95       	ror	r22
    1722:	ba 95       	dec	r27
    1724:	c9 f7       	brne	.-14     	; 0x1718 <__ultoa_invert+0x86>
    1726:	00 97       	sbiw	r24, 0x00	; 0
    1728:	61 05       	cpc	r22, r1
    172a:	71 05       	cpc	r23, r1
    172c:	08 95       	ret
    172e:	9b 01       	movw	r18, r22
    1730:	ac 01       	movw	r20, r24
    1732:	0a 2e       	mov	r0, r26
    1734:	06 94       	lsr	r0
    1736:	57 95       	ror	r21
    1738:	47 95       	ror	r20
    173a:	37 95       	ror	r19
    173c:	27 95       	ror	r18
    173e:	ba 95       	dec	r27
    1740:	c9 f7       	brne	.-14     	; 0x1734 <__ultoa_invert+0xa2>
    1742:	62 0f       	add	r22, r18
    1744:	73 1f       	adc	r23, r19
    1746:	84 1f       	adc	r24, r20
    1748:	95 1f       	adc	r25, r21
    174a:	a0 1d       	adc	r26, r0
    174c:	08 95       	ret

0000174e <_exit>:
    174e:	f8 94       	cli

00001750 <__stop_program>:
    1750:	ff cf       	rjmp	.-2      	; 0x1750 <__stop_program>
