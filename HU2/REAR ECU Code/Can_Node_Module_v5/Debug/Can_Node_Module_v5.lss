
Can_Node_Module_v5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000fac  00001040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  0080010e  0080010e  0000104e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000104e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001080  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016e5  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e29  00000000  00000000  000028a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f68  00000000  00000000  000036ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000420  00000000  00000000  00004638  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007cf  00000000  00000000  00004a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001177  00000000  00000000  00005227  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000639e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	52 c5       	rjmp	.+2724   	; 0xaaa <__vector_1>
   6:	00 00       	nop
   8:	5a c5       	rjmp	.+2740   	; 0xabe <__vector_2>
   a:	00 00       	nop
   c:	9a c5       	rjmp	.+2868   	; 0xb42 <__vector_3>
   e:	00 00       	nop
  10:	da c5       	rjmp	.+2996   	; 0xbc6 <__vector_4>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c6       	rjmp	.+3198   	; 0xc9c <__vector_7>
  1e:	00 00       	nop
  20:	a9 c6       	rjmp	.+3410   	; 0xd74 <__vector_8>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	05 c7       	rjmp	.+3594   	; 0xe48 <__vector_15>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	4a c7       	rjmp	.+3732   	; 0xeda <__vector_17>
  46:	00 00       	nop
  48:	24 c1       	rjmp	.+584    	; 0x292 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	5d c0       	rjmp	.+186    	; 0x120 <__vector_25>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	02 c7       	rjmp	.+3588   	; 0xe82 <__vector_31>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ec ea       	ldi	r30, 0xAC	; 172
  a8:	ff e0       	ldi	r31, 0x0F	; 15
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	ae 30       	cpi	r26, 0x0E	; 14
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	ae e0       	ldi	r26, 0x0E	; 14
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a2 33       	cpi	r26, 0x32	; 50
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	fe d6       	rcall	.+3580   	; 0xec8 <main>
  cc:	6d c7       	rjmp	.+3802   	; 0xfa8 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <getADC>:
  d0:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  d4:	29 2f       	mov	r18, r25
  d6:	2c 7f       	andi	r18, 0xFC	; 252
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	98 0f       	add	r25, r24
  dc:	93 70       	andi	r25, 0x03	; 3
  de:	92 2b       	or	r25, r18
  e0:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	90 81       	ld	r25, Z
  ea:	90 6c       	ori	r25, 0xC0	; 192
  ec:	90 83       	st	Z, r25
  ee:	90 81       	ld	r25, Z
  f0:	94 ff       	sbrs	r25, 4
  f2:	fd cf       	rjmp	.-6      	; 0xee <getADC+0x1e>
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	90 81       	ld	r25, Z
  fa:	9f 72       	andi	r25, 0x2F	; 47
  fc:	90 83       	st	Z, r25
  fe:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 102:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 106:	83 70       	andi	r24, 0x03	; 3
 108:	e8 2f       	mov	r30, r24
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	e0 50       	subi	r30, 0x00	; 0
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	89 2f       	mov	r24, r25
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	92 2b       	or	r25, r18
 11a:	91 83       	std	Z+1, r25	; 0x01
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <__vector_25>:
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <can_init>:
}



//***** CAN ialization *****************************************************
void can_init(uint16_t Baud){
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
		DDRD = 0x80;
		PORTD &= ~(1<<PORTD7); // Enable Can-chip
		//PORTD |= (1<<PORTD7); // Disable Can-chip
	}
	
	CANGCON = ( 1 << SWRES );   // Software reset
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	
	CANTCON = 0x00;       // CAN timing prescaler set to 0;
 13e:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	
	if (Baud == 1000){
 142:	88 3e       	cpi	r24, 0xE8	; 232
 144:	23 e0       	ldi	r18, 0x03	; 3
 146:	92 07       	cpc	r25, r18
 148:	49 f4       	brne	.+18     	; 0x15c <can_init+0x28>
		CANBT1 = 0x00;    // Set baud rate to 500kb (assuming 16Mhz IOclk)
 14a:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		CANBT2 = 0x0C;    // "
 14e:	2c e0       	ldi	r18, 0x0C	; 12
 150:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		CANBT3 = 0x36; 	  // ""
 154:	26 e3       	ldi	r18, 0x36	; 54
 156:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 15a:	1b c0       	rjmp	.+54     	; 0x192 <can_init+0x5e>
	}
	if (Baud == 500){
 15c:	84 3f       	cpi	r24, 0xF4	; 244
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	92 07       	cpc	r25, r18
 162:	51 f4       	brne	.+20     	; 0x178 <can_init+0x44>
		CANBT1 = 0x02;    // Set baud rate to 500kb (assuming 16Mhz IOclk)
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		CANBT2 = 0x0C;    // "
 16a:	8c e0       	ldi	r24, 0x0C	; 12
 16c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		CANBT3 = 0x37; 	  // ""
 170:	87 e3       	ldi	r24, 0x37	; 55
 172:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 176:	19 c0       	rjmp	.+50     	; 0x1aa <can_init+0x76>
	}
	if (Baud == 250){
 178:	8a 3f       	cpi	r24, 0xFA	; 250
 17a:	91 05       	cpc	r25, r1
 17c:	51 f4       	brne	.+20     	; 0x192 <can_init+0x5e>
		CANBT1 = 0x0E;   // Set baud rate to 250kb (assuming 16Mhz IOclk)
 17e:	8e e0       	ldi	r24, 0x0E	; 14
 180:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		CANBT2 = 0x04;   // "
 184:	84 e0       	ldi	r24, 0x04	; 4
 186:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		CANBT3 = 0x13; 	 // ""
 18a:	83 e1       	ldi	r24, 0x13	; 19
 18c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 190:	0c c0       	rjmp	.+24     	; 0x1aa <can_init+0x76>
	}
	if ( Baud == 125){
 192:	8d 37       	cpi	r24, 0x7D	; 125
 194:	91 05       	cpc	r25, r1
 196:	49 f4       	brne	.+18     	; 0x1aa <can_init+0x76>
		CANBT1 = 0x06;  // Set baud rate to 125kb (assuming 16Mhz IOclk)
 198:	86 e0       	ldi	r24, 0x06	; 6
 19a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		CANBT2 = 0x0C;  // "
 19e:	8c e0       	ldi	r24, 0x0C	; 12
 1a0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		CANBT3 = 0x37;	// ""
 1a4:	87 e3       	ldi	r24, 0x37	; 55
 1a6:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
}



//***** CAN ialization *****************************************************
void can_init(uint16_t Baud){
 1aa:	80 e0       	ldi	r24, 0x00	; 0
	}
	

	for ( int8_t mob=0; mob<14; mob++ ) {

		CANPAGE = ( mob << 4 );  // Selects Message Object 0-14
 1ac:	cd ee       	ldi	r28, 0xED	; 237
 1ae:	d0 e0       	ldi	r29, 0x00	; 0
		CANCDMOB = 0x00;    // Disable mob
 1b0:	af ee       	ldi	r26, 0xEF	; 239
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
		CANSTMOB = 0x00;    // Clear mob status register;
 1b4:	ee ee       	ldi	r30, 0xEE	; 238
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
	}
	

	for ( int8_t mob=0; mob<14; mob++ ) {

		CANPAGE = ( mob << 4 );  // Selects Message Object 0-14
 1b8:	98 2f       	mov	r25, r24
 1ba:	92 95       	swap	r25
 1bc:	90 7f       	andi	r25, 0xF0	; 240
 1be:	98 83       	st	Y, r25
		CANCDMOB = 0x00;    // Disable mob
 1c0:	1c 92       	st	X, r1
		CANSTMOB = 0x00;    // Clear mob status register;
 1c2:	10 82       	st	Z, r1
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
		CANBT2 = 0x0C;  // "
		CANBT3 = 0x37;	// ""
	}
	

	for ( int8_t mob=0; mob<14; mob++ ) {
 1c6:	8e 30       	cpi	r24, 0x0E	; 14
 1c8:	b9 f7       	brne	.-18     	; 0x1b8 <can_init+0x84>
		CANPAGE = ( mob << 4 );  // Selects Message Object 0-14
		CANCDMOB = 0x00;    // Disable mob
		CANSTMOB = 0x00;    // Clear mob status register;
	}
	
	CANIE2 = (( 1 << IEMOB1 ) | ( 0 << IEMOB0 ));  // IEMOB1 = MOB1 Enable interrupts on mob1 for reception and transmission
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	CANGIE = ( 1 << ENIT ) | ( 1 << ENRX ) | ( 0 << ENTX );   // Enable interrupts on receive
 1d0:	80 ea       	ldi	r24, 0xA0	; 160
 1d2:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	CANGCON |= ( 1 << 1 );	// Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
 1d6:	e8 ed       	ldi	r30, 0xD8	; 216
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	82 60       	ori	r24, 0x02	; 2
 1de:	80 83       	st	Z, r24
	
}
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <can_rx>:

//***** CAN Creating RX *****************************************************
void can_rx(uint16_t NODE_ID){
	
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select 0001 = CANMOB1
 1e6:	20 e1       	ldi	r18, 0x10	; 16
 1e8:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
	CANIDT1 = NODE_ID >> 3; // Receive Address
 1ec:	9c 01       	movw	r18, r24
 1ee:	36 95       	lsr	r19
 1f0:	27 95       	ror	r18
 1f2:	36 95       	lsr	r19
 1f4:	27 95       	ror	r18
 1f6:	36 95       	lsr	r19
 1f8:	27 95       	ror	r18
 1fa:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	CANIDT2 = NODE_ID << 5; //
 1fe:	82 95       	swap	r24
 200:	88 0f       	add	r24, r24
 202:	80 7e       	andi	r24, 0xE0	; 224
 204:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT3 = 0x00; 		// ""
 208:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT4 = 0x00; 		// ""
 20c:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	
	CANIDM1 = 0b11111111;   // Receive Address
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDM2 = 0b11100000;	//
 216:	80 ee       	ldi	r24, 0xE0	; 224
 218:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>

	CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 3 << DLC0));  // Enable Reception | 11 bit | IDE DLC8
 21c:	83 e8       	ldi	r24, 0x83	; 131
 21e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 222:	08 95       	ret

00000224 <can_tx>:
}

//***** CAN Creating TX *****************************************************
void can_tx(uint16_t Address, uint8_t DLC) {
 224:	9c 01       	movw	r18, r24
	
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 0 << MOBNB0 ); // select 0000 = CANMOB0
 226:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	while ( CANEN2 & ( 1 << ENMOB0 ) ); // Wait for MOb 0 to be free
 22a:	ec ed       	ldi	r30, 0xDC	; 220
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	90 81       	ld	r25, Z
 230:	90 fd       	sbrc	r25, 0
 232:	fd cf       	rjmp	.-6      	; 0x22e <can_tx+0xa>
	
	CANSTMOB = 0x00;   // Clear mob status register
 234:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	
	CANIDT4 = 0x00;     		//
 238:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = 0x00;				//
 23c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = Address << 5;		//
 240:	82 2f       	mov	r24, r18
 242:	82 95       	swap	r24
 244:	88 0f       	add	r24, r24
 246:	80 7e       	andi	r24, 0xE0	; 224
 248:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = Address >> 3;		//
 24c:	36 95       	lsr	r19
 24e:	27 95       	ror	r18
 250:	36 95       	lsr	r19
 252:	27 95       	ror	r18
 254:	36 95       	lsr	r19
 256:	27 95       	ror	r18
 258:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 25c:	e2 e2       	ldi	r30, 0x22	; 34
 25e:	f1 e0       	ldi	r31, 0x01	; 1
 260:	2a e2       	ldi	r18, 0x2A	; 42
 262:	31 e0       	ldi	r19, 0x01	; 1
	
	for ( int8_t i = 0; i < 8; i++ ){
		CANMSG = TransmitData[i]; //CAN Data Message Register: setting the data in the message register
 264:	aa ef       	ldi	r26, 0xFA	; 250
 266:	b0 e0       	ldi	r27, 0x00	; 0
 268:	81 91       	ld	r24, Z+
 26a:	8c 93       	st	X, r24
	CANIDT4 = 0x00;     		//
	CANIDT3 = 0x00;				//
	CANIDT2 = Address << 5;		//
	CANIDT1 = Address >> 3;		//
	
	for ( int8_t i = 0; i < 8; i++ ){
 26c:	e2 17       	cp	r30, r18
 26e:	f3 07       	cpc	r31, r19
 270:	d9 f7       	brne	.-10     	; 0x268 <can_tx+0x44>
		CANMSG = TransmitData[i]; //CAN Data Message Register: setting the data in the message register
	}
	
	CANCDMOB = (( 1 << CONMOB0 ) | ( 0 << IDE ) | ( DLC << DLC0)); //CAN MOb Control and DLC Register: (1<<CONMOB1) = enable reception. (0<<IDE) = can standard rev 2.0A ( id length = 11 bits), (DLC << DLC0) Set *DLC* Bytes in the data field of the message.
 272:	60 64       	ori	r22, 0x40	; 64
 274:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	while ( ! ( CANSTMOB & ( 1 << TXOK ) ) );	// wait for TXOK flag set
 278:	ee ee       	ldi	r30, 0xEE	; 238
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	86 ff       	sbrs	r24, 6
 280:	fd cf       	rjmp	.-6      	; 0x27c <can_tx+0x58>
	
	CANCDMOB = 0x00; //Clear CAN Mob Control and DLC Register
 282:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	CANSTMOB = 0x00; // Clear TXOK flag
 286:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select 0001 = MOB1
 28a:	80 e1       	ldi	r24, 0x10	; 16
 28c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 290:	08 95       	ret

00000292 <__vector_18>:

uint8_t ReceiveData[8];
uint8_t TransmitData[8];

//***** Reception ISR **********************************
ISR(CANIT_vect){  	// use interrupts
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	0b b6       	in	r0, 0x3b	; 59
 29e:	0f 92       	push	r0
 2a0:	2f 92       	push	r2
 2a2:	3f 92       	push	r3
 2a4:	4f 92       	push	r4
 2a6:	5f 92       	push	r5
 2a8:	6f 92       	push	r6
 2aa:	7f 92       	push	r7
 2ac:	8f 92       	push	r8
 2ae:	9f 92       	push	r9
 2b0:	af 92       	push	r10
 2b2:	bf 92       	push	r11
 2b4:	cf 92       	push	r12
 2b6:	df 92       	push	r13
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	2f 93       	push	r18
 2c2:	3f 93       	push	r19
 2c4:	4f 93       	push	r20
 2c6:	5f 93       	push	r21
 2c8:	6f 93       	push	r22
 2ca:	7f 93       	push	r23
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
 2d0:	af 93       	push	r26
 2d2:	bf 93       	push	r27
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	ef 93       	push	r30
 2da:	ff 93       	push	r31
	int8_t length;
	
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select CANMOB 0001 = MOB1
 2dc:	80 e1       	ldi	r24, 0x10	; 16
 2de:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	length = ( CANCDMOB & 0x0F );	// DLC, number of bytes to be received
 2e2:	00 91 ef 00 	lds	r16, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 2e6:	0f 70       	andi	r16, 0x0F	; 15
	for ( int8_t i = 0; i < length; i++ ){
 2e8:	10 16       	cp	r1, r16
 2ea:	74 f4       	brge	.+28     	; 0x308 <__vector_18+0x76>
 2ec:	ea e2       	ldi	r30, 0x2A	; 42
 2ee:	f1 e0       	ldi	r31, 0x01	; 1
 2f0:	2f ef       	ldi	r18, 0xFF	; 255
 2f2:	20 0f       	add	r18, r16
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	25 5d       	subi	r18, 0xD5	; 213
 2f8:	3e 4f       	sbci	r19, 0xFE	; 254
		ReceiveData[i] = CANMSG; // Get data, INDX auto increments CANMSG
 2fa:	aa ef       	ldi	r26, 0xFA	; 250
 2fc:	b0 e0       	ldi	r27, 0x00	; 0
 2fe:	8c 91       	ld	r24, X
 300:	81 93       	st	Z+, r24
	int8_t length;
	
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select CANMOB 0001 = MOB1

	length = ( CANCDMOB & 0x0F );	// DLC, number of bytes to be received
	for ( int8_t i = 0; i < length; i++ ){
 302:	e2 17       	cp	r30, r18
 304:	f3 07       	cpc	r31, r19
 306:	d9 f7       	brne	.-10     	; 0x2fe <__vector_18+0x6c>
		ReceiveData[i] = CANMSG; // Get data, INDX auto increments CANMSG
	}
	
	uint16_t ReceiveAddress = (CANIDT1 << 3) | ((CANIDT2 & 0b11100000) >> 5);
 308:	c0 91 f3 00 	lds	r28, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 30c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 310:	82 95       	swap	r24
 312:	86 95       	lsr	r24
 314:	87 70       	andi	r24, 0x07	; 7
 316:	d0 e0       	ldi	r29, 0x00	; 0
 318:	cc 0f       	add	r28, r28
 31a:	dd 1f       	adc	r29, r29
 31c:	cc 0f       	add	r28, r28
 31e:	dd 1f       	adc	r29, r29
 320:	cc 0f       	add	r28, r28
 322:	dd 1f       	adc	r29, r29
 324:	c8 2b       	or	r28, r24
	
	cantimer = 0;
 326:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <cantimer>
 32a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <cantimer+0x1>
 32e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <cantimer+0x2>
 332:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <cantimer+0x3>
	
	if(ReceiveAddress == NODEID1){ //Only receive if address is NODEID1
 336:	c1 30       	cpi	r28, 0x01	; 1
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	d8 07       	cpc	r29, r24
 33c:	09 f0       	breq	.+2      	; 0x340 <__vector_18+0xae>
 33e:	90 c0       	rjmp	.+288    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
 340:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <ReceiveData>
 344:	8d 33       	cpi	r24, 0x3D	; 61
 346:	09 f0       	breq	.+2      	; 0x34a <__vector_18+0xb8>
 348:	8a c1       	rjmp	.+788    	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
 34a:	c0 2e       	mov	r12, r16
 34c:	00 2e       	mov	r0, r16
 34e:	00 0c       	add	r0, r0
 350:	dd 08       	sbc	r13, r13
 352:	92 e0       	ldi	r25, 0x02	; 2
 354:	c9 16       	cp	r12, r25
 356:	d1 04       	cpc	r13, r1
 358:	0c f4       	brge	.+2      	; 0x35c <__vector_18+0xca>
 35a:	7c c0       	rjmp	.+248    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 35c:	ee 24       	eor	r14, r14
 35e:	e3 94       	inc	r14
 360:	f1 2c       	mov	r15, r1
 362:	77 24       	eor	r7, r7
 364:	73 94       	inc	r7
 366:	10 e0       	ldi	r17, 0x00	; 0
				if (ReceiveData[i] == STUURPOSITIE){ //if Receive data 0x01, Transmit the following data:
					getADC(3);
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (ADCValue[3] >> 8);
 368:	0f 2e       	mov	r0, r31
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	af 2e       	mov	r10, r31
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	bf 2e       	mov	r11, r31
 372:	f0 2d       	mov	r31, r0
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (PulsePerSec[2] >> 8);
					TransmitData[j++] = PulsePerSec[2];
				}
				if (ReceiveData[i] == RPM_VOOR_RECHTS){
					TransmitData[j++] = ReceiveData[i];
 374:	0f 2e       	mov	r0, r31
 376:	f3 e1       	ldi	r31, 0x13	; 19
 378:	5f 2e       	mov	r5, r31
 37a:	f0 2d       	mov	r31, r0
					TransmitData[j++] = (PulsePerSec[3] >> 8);
 37c:	0f 2e       	mov	r0, r31
 37e:	fe e0       	ldi	r31, 0x0E	; 14
 380:	8f 2e       	mov	r8, r31
 382:	f1 e0       	ldi	r31, 0x01	; 1
 384:	9f 2e       	mov	r9, r31
 386:	f0 2d       	mov	r31, r0
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (ADCValue[3] >> 8);
					TransmitData[j++] = ADCValue[3];
				}
				if (ReceiveData[i] == RPM_VOOR_LINKS){
					TransmitData[j++] = ReceiveData[i];
 388:	0f 2e       	mov	r0, r31
 38a:	f2 e1       	ldi	r31, 0x12	; 18
 38c:	6f 2e       	mov	r6, r31
 38e:	f0 2d       	mov	r31, r0
	
	if(ReceiveAddress == NODEID1){ //Only receive if address is NODEID1
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
				if (ReceiveData[i] == STUURPOSITIE){ //if Receive data 0x01, Transmit the following data:
 390:	f7 01       	movw	r30, r14
 392:	e6 5d       	subi	r30, 0xD6	; 214
 394:	fe 4f       	sbci	r31, 0xFE	; 254
 396:	80 81       	ld	r24, Z
 398:	81 31       	cpi	r24, 0x11	; 17
 39a:	f1 f4       	brne	.+60     	; 0x3d8 <__vector_18+0x146>
					getADC(3);
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	98 de       	rcall	.-720    	; 0xd0 <getADC>
					TransmitData[j++] = ReceiveData[i];
 3a0:	e1 2f       	mov	r30, r17
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	ee 5d       	subi	r30, 0xDE	; 222
 3a6:	fe 4f       	sbci	r31, 0xFE	; 254
 3a8:	d7 01       	movw	r26, r14
 3aa:	a6 5d       	subi	r26, 0xD6	; 214
 3ac:	be 4f       	sbci	r27, 0xFE	; 254
 3ae:	8c 91       	ld	r24, X
 3b0:	80 83       	st	Z, r24
					TransmitData[j++] = (ADCValue[3] >> 8);
 3b2:	d5 01       	movw	r26, r10
 3b4:	16 96       	adiw	r26, 0x06	; 6
 3b6:	8c 91       	ld	r24, X
 3b8:	16 97       	sbiw	r26, 0x06	; 6
 3ba:	17 96       	adiw	r26, 0x07	; 7
 3bc:	9c 91       	ld	r25, X
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
				if (ReceiveData[i] == STUURPOSITIE){ //if Receive data 0x01, Transmit the following data:
					getADC(3);
					TransmitData[j++] = ReceiveData[i];
 3be:	e1 e0       	ldi	r30, 0x01	; 1
 3c0:	e1 0f       	add	r30, r17
					TransmitData[j++] = (ADCValue[3] >> 8);
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	ee 5d       	subi	r30, 0xDE	; 222
 3c6:	fe 4f       	sbci	r31, 0xFE	; 254
 3c8:	90 83       	st	Z, r25
					TransmitData[j++] = ADCValue[3];
 3ca:	e2 e0       	ldi	r30, 0x02	; 2
 3cc:	e1 0f       	add	r30, r17
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	1d 5f       	subi	r17, 0xFD	; 253
 3d2:	ee 5d       	subi	r30, 0xDE	; 222
 3d4:	fe 4f       	sbci	r31, 0xFE	; 254
 3d6:	80 83       	st	Z, r24
				}
				if (ReceiveData[i] == RPM_VOOR_LINKS){
 3d8:	f7 01       	movw	r30, r14
 3da:	e6 5d       	subi	r30, 0xD6	; 214
 3dc:	fe 4f       	sbci	r31, 0xFE	; 254
 3de:	80 81       	ld	r24, Z
 3e0:	82 31       	cpi	r24, 0x12	; 18
 3e2:	b1 f4       	brne	.+44     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
					TransmitData[j++] = ReceiveData[i];
 3e4:	e1 2f       	mov	r30, r17
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	ee 5d       	subi	r30, 0xDE	; 222
 3ea:	fe 4f       	sbci	r31, 0xFE	; 254
 3ec:	60 82       	st	Z, r6
					TransmitData[j++] = (PulsePerSec[2] >> 8);
 3ee:	f4 01       	movw	r30, r8
 3f0:	84 81       	ldd	r24, Z+4	; 0x04
 3f2:	95 81       	ldd	r25, Z+5	; 0x05
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (ADCValue[3] >> 8);
					TransmitData[j++] = ADCValue[3];
				}
				if (ReceiveData[i] == RPM_VOOR_LINKS){
					TransmitData[j++] = ReceiveData[i];
 3f4:	e1 e0       	ldi	r30, 0x01	; 1
 3f6:	e1 0f       	add	r30, r17
					TransmitData[j++] = (PulsePerSec[2] >> 8);
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	ee 5d       	subi	r30, 0xDE	; 222
 3fc:	fe 4f       	sbci	r31, 0xFE	; 254
 3fe:	90 83       	st	Z, r25
					TransmitData[j++] = PulsePerSec[2];
 400:	e2 e0       	ldi	r30, 0x02	; 2
 402:	e1 0f       	add	r30, r17
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	1d 5f       	subi	r17, 0xFD	; 253
 408:	ee 5d       	subi	r30, 0xDE	; 222
 40a:	fe 4f       	sbci	r31, 0xFE	; 254
 40c:	80 83       	st	Z, r24
 40e:	1a c0       	rjmp	.+52     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
				}
				if (ReceiveData[i] == RPM_VOOR_RECHTS){
 410:	83 31       	cpi	r24, 0x13	; 19
 412:	c1 f4       	brne	.+48     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
					TransmitData[j++] = ReceiveData[i];
 414:	e1 2f       	mov	r30, r17
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	ee 5d       	subi	r30, 0xDE	; 222
 41a:	fe 4f       	sbci	r31, 0xFE	; 254
 41c:	50 82       	st	Z, r5
					TransmitData[j++] = (PulsePerSec[3] >> 8);
 41e:	d4 01       	movw	r26, r8
 420:	16 96       	adiw	r26, 0x06	; 6
 422:	8c 91       	ld	r24, X
 424:	16 97       	sbiw	r26, 0x06	; 6
 426:	17 96       	adiw	r26, 0x07	; 7
 428:	9c 91       	ld	r25, X
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (PulsePerSec[2] >> 8);
					TransmitData[j++] = PulsePerSec[2];
				}
				if (ReceiveData[i] == RPM_VOOR_RECHTS){
					TransmitData[j++] = ReceiveData[i];
 42a:	e1 e0       	ldi	r30, 0x01	; 1
 42c:	e1 0f       	add	r30, r17
					TransmitData[j++] = (PulsePerSec[3] >> 8);
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	ee 5d       	subi	r30, 0xDE	; 222
 432:	fe 4f       	sbci	r31, 0xFE	; 254
 434:	90 83       	st	Z, r25
					TransmitData[j++] = PulsePerSec[3];
 436:	e2 e0       	ldi	r30, 0x02	; 2
 438:	e1 0f       	add	r30, r17
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	1d 5f       	subi	r17, 0xFD	; 253
 43e:	ee 5d       	subi	r30, 0xDE	; 222
 440:	fe 4f       	sbci	r31, 0xFE	; 254
 442:	80 83       	st	Z, r24
	cantimer = 0;
	
	if(ReceiveAddress == NODEID1){ //Only receive if address is NODEID1
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
 444:	73 94       	inc	r7
 446:	e7 2c       	mov	r14, r7
 448:	f1 2c       	mov	r15, r1
 44a:	ec 14       	cp	r14, r12
 44c:	fd 04       	cpc	r15, r13
 44e:	0c f4       	brge	.+2      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 450:	9f cf       	rjmp	.-194    	; 0x390 <__vector_18+0xfe>
 452:	01 c0       	rjmp	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 454:	10 e0       	ldi	r17, 0x00	; 0
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (PulsePerSec[3] >> 8);
					TransmitData[j++] = PulsePerSec[3];
				}
			}
			can_tx(MASTERID, j); //Transmit data depending on the number of message received
 456:	61 2f       	mov	r22, r17
 458:	87 e1       	ldi	r24, 0x17	; 23
 45a:	93 e0       	ldi	r25, 0x03	; 3
 45c:	e3 de       	rcall	.-570    	; 0x224 <can_tx>
 45e:	ff c0       	rjmp	.+510    	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
		}
	}
	

	if(ReceiveAddress == NODEID2){ //Only receive if Address is NODEID2
 460:	c2 30       	cpi	r28, 0x02	; 2
 462:	b2 e0       	ldi	r27, 0x02	; 2
 464:	db 07       	cpc	r29, r27
 466:	09 f0       	breq	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 468:	8c c0       	rjmp	.+280    	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
 46a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <ReceiveData>
 46e:	8d 33       	cpi	r24, 0x3D	; 61
 470:	09 f0       	breq	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 472:	63 c1       	rjmp	.+710    	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
 474:	80 2e       	mov	r8, r16
 476:	00 2e       	mov	r0, r16
 478:	00 0c       	add	r0, r0
 47a:	99 08       	sbc	r9, r9
 47c:	e2 e0       	ldi	r30, 0x02	; 2
 47e:	8e 16       	cp	r8, r30
 480:	91 04       	cpc	r9, r1
 482:	0c f4       	brge	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 484:	78 c0       	rjmp	.+240    	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 486:	ee 24       	eor	r14, r14
 488:	e3 94       	inc	r14
 48a:	f1 2c       	mov	r15, r1
 48c:	11 e0       	ldi	r17, 0x01	; 1
 48e:	d1 2c       	mov	r13, r1
				if (ReceiveData[i] == GAS_1){
					getADC(0);
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (ADCValue[0] << 8);
					TransmitData[j++] = ADCValue[0];
 490:	0f 2e       	mov	r0, r31
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	af 2e       	mov	r10, r31
 496:	f1 e0       	ldi	r31, 0x01	; 1
 498:	bf 2e       	mov	r11, r31
 49a:	f0 2d       	mov	r31, r0

	if(ReceiveAddress == NODEID2){ //Only receive if Address is NODEID2
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
				if (ReceiveData[i] == GAS_1){
 49c:	f7 01       	movw	r30, r14
 49e:	e6 5d       	subi	r30, 0xD6	; 214
 4a0:	fe 4f       	sbci	r31, 0xFE	; 254
 4a2:	80 81       	ld	r24, Z
 4a4:	81 32       	cpi	r24, 0x21	; 33
 4a6:	d9 f4       	brne	.+54     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
					getADC(0);
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	12 de       	rcall	.-988    	; 0xd0 <getADC>
					TransmitData[j++] = ReceiveData[i];
 4ac:	ed 2d       	mov	r30, r13
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	ee 5d       	subi	r30, 0xDE	; 222
 4b2:	fe 4f       	sbci	r31, 0xFE	; 254
 4b4:	d7 01       	movw	r26, r14
 4b6:	a6 5d       	subi	r26, 0xD6	; 214
 4b8:	be 4f       	sbci	r27, 0xFE	; 254
 4ba:	8c 91       	ld	r24, X
 4bc:	80 83       	st	Z, r24
 4be:	e1 e0       	ldi	r30, 0x01	; 1
 4c0:	ed 0d       	add	r30, r13
					TransmitData[j++] = (ADCValue[0] << 8);
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	ee 5d       	subi	r30, 0xDE	; 222
 4c6:	fe 4f       	sbci	r31, 0xFE	; 254
 4c8:	10 82       	st	Z, r1
					TransmitData[j++] = ADCValue[0];
 4ca:	e2 e0       	ldi	r30, 0x02	; 2
 4cc:	ed 0d       	add	r30, r13
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	83 e0       	ldi	r24, 0x03	; 3
 4d2:	d8 0e       	add	r13, r24
 4d4:	ee 5d       	subi	r30, 0xDE	; 222
 4d6:	fe 4f       	sbci	r31, 0xFE	; 254
 4d8:	d5 01       	movw	r26, r10
 4da:	8c 91       	ld	r24, X
 4dc:	80 83       	st	Z, r24
				}
				if (ReceiveData[i] == GAS_2){
 4de:	f7 01       	movw	r30, r14
 4e0:	e6 5d       	subi	r30, 0xD6	; 214
 4e2:	fe 4f       	sbci	r31, 0xFE	; 254
 4e4:	80 81       	ld	r24, Z
 4e6:	82 32       	cpi	r24, 0x22	; 34
 4e8:	e1 f4       	brne	.+56     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
					getADC(1);
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	f1 dd       	rcall	.-1054   	; 0xd0 <getADC>
					TransmitData[j++] = ReceiveData[i];
 4ee:	ed 2d       	mov	r30, r13
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	ee 5d       	subi	r30, 0xDE	; 222
 4f4:	fe 4f       	sbci	r31, 0xFE	; 254
 4f6:	d7 01       	movw	r26, r14
 4f8:	a6 5d       	subi	r26, 0xD6	; 214
 4fa:	be 4f       	sbci	r27, 0xFE	; 254
 4fc:	8c 91       	ld	r24, X
 4fe:	80 83       	st	Z, r24
 500:	e1 e0       	ldi	r30, 0x01	; 1
 502:	ed 0d       	add	r30, r13
					TransmitData[j++] = (ADCValue[1] << 8);
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	ee 5d       	subi	r30, 0xDE	; 222
 508:	fe 4f       	sbci	r31, 0xFE	; 254
 50a:	10 82       	st	Z, r1
					TransmitData[j++] = ADCValue[1];
 50c:	e2 e0       	ldi	r30, 0x02	; 2
 50e:	ed 0d       	add	r30, r13
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	b3 e0       	ldi	r27, 0x03	; 3
 514:	db 0e       	add	r13, r27
 516:	ee 5d       	subi	r30, 0xDE	; 222
 518:	fe 4f       	sbci	r31, 0xFE	; 254
 51a:	d5 01       	movw	r26, r10
 51c:	12 96       	adiw	r26, 0x02	; 2
 51e:	8c 91       	ld	r24, X
 520:	80 83       	st	Z, r24
				}
				if (ReceiveData[i] == REM){
 522:	f7 01       	movw	r30, r14
 524:	e6 5d       	subi	r30, 0xD6	; 214
 526:	fe 4f       	sbci	r31, 0xFE	; 254
 528:	80 81       	ld	r24, Z
 52a:	83 32       	cpi	r24, 0x23	; 35
 52c:	e1 f4       	brne	.+56     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
					getADC(2);
 52e:	82 e0       	ldi	r24, 0x02	; 2
 530:	cf dd       	rcall	.-1122   	; 0xd0 <getADC>
					TransmitData[j++] = ReceiveData[i];
 532:	ed 2d       	mov	r30, r13
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	ee 5d       	subi	r30, 0xDE	; 222
 538:	fe 4f       	sbci	r31, 0xFE	; 254
 53a:	d7 01       	movw	r26, r14
 53c:	a6 5d       	subi	r26, 0xD6	; 214
 53e:	be 4f       	sbci	r27, 0xFE	; 254
 540:	8c 91       	ld	r24, X
 542:	80 83       	st	Z, r24
 544:	e1 e0       	ldi	r30, 0x01	; 1
 546:	ed 0d       	add	r30, r13
					TransmitData[j++] = (ADCValue[2] << 8);
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	ee 5d       	subi	r30, 0xDE	; 222
 54c:	fe 4f       	sbci	r31, 0xFE	; 254
 54e:	10 82       	st	Z, r1
					TransmitData[j++] = ADCValue[2];
 550:	e2 e0       	ldi	r30, 0x02	; 2
 552:	ed 0d       	add	r30, r13
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	b3 e0       	ldi	r27, 0x03	; 3
 558:	db 0e       	add	r13, r27
 55a:	ee 5d       	subi	r30, 0xDE	; 222
 55c:	fe 4f       	sbci	r31, 0xFE	; 254
 55e:	d5 01       	movw	r26, r10
 560:	14 96       	adiw	r26, 0x04	; 4
 562:	8c 91       	ld	r24, X
 564:	80 83       	st	Z, r24
	

	if(ReceiveAddress == NODEID2){ //Only receive if Address is NODEID2
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
 566:	1f 5f       	subi	r17, 0xFF	; 255
 568:	e1 2e       	mov	r14, r17
 56a:	f1 2c       	mov	r15, r1
 56c:	e8 14       	cp	r14, r8
 56e:	f9 04       	cpc	r15, r9
 570:	0c f4       	brge	.+2      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 572:	94 cf       	rjmp	.-216    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 574:	01 c0       	rjmp	.+2      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 576:	d1 2c       	mov	r13, r1
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (ADCValue[2] << 8);
					TransmitData[j++] = ADCValue[2];
				}
			}
			can_tx(MASTERID, j); //Transmit data depending on the number of message received
 578:	6d 2d       	mov	r22, r13
 57a:	87 e1       	ldi	r24, 0x17	; 23
 57c:	93 e0       	ldi	r25, 0x03	; 3
 57e:	52 de       	rcall	.-860    	; 0x224 <can_tx>
 580:	dc c0       	rjmp	.+440    	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
		}
	}
	
	if(ReceiveAddress == NODEID3){ //Only receive if Address is NODEID3
 582:	c3 30       	cpi	r28, 0x03	; 3
 584:	b2 e0       	ldi	r27, 0x02	; 2
 586:	db 07       	cpc	r29, r27
 588:	09 f0       	breq	.+2      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 58a:	69 c0       	rjmp	.+210    	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
 58c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <ReceiveData>
 590:	8d 33       	cpi	r24, 0x3D	; 61
 592:	09 f0       	breq	.+2      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 594:	53 c2       	rjmp	.+1190   	; 0xa3c <__LOCK_REGION_LENGTH__+0x63c>
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
 596:	e0 2e       	mov	r14, r16
 598:	00 0f       	add	r16, r16
 59a:	ff 08       	sbc	r15, r15
 59c:	e2 e0       	ldi	r30, 0x02	; 2
 59e:	ee 16       	cp	r14, r30
 5a0:	f1 04       	cpc	r15, r1
 5a2:	0c f4       	brge	.+2      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 5a4:	56 c0       	rjmp	.+172    	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 5a6:	c1 e0       	ldi	r28, 0x01	; 1
 5a8:	d0 e0       	ldi	r29, 0x00	; 0
 5aa:	11 e0       	ldi	r17, 0x01	; 1
 5ac:	00 e0       	ldi	r16, 0x00	; 0
				}
				if (ReceiveData[i] == TEMP_LINKS){
					getADC(0);
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (ADCValue[0] << 8);
					TransmitData[j++] = ADCValue[0];
 5ae:	0f 2e       	mov	r0, r31
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	cf 2e       	mov	r12, r31
 5b4:	f1 e0       	ldi	r31, 0x01	; 1
 5b6:	df 2e       	mov	r13, r31
 5b8:	f0 2d       	mov	r31, r0
	if(ReceiveAddress == NODEID3){ //Only receive if Address is NODEID3
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
				if (ReceiveData[i] == FLOW_RICHTING_LINKS){ //if Receive data 0x01, Transmit the following data:
					TransmitData[j++] = ReceiveData[i];
 5ba:	0f 2e       	mov	r0, r31
 5bc:	f1 e3       	ldi	r31, 0x31	; 49
 5be:	9f 2e       	mov	r9, r31
 5c0:	f0 2d       	mov	r31, r0
					TransmitData[j++] = (PulsePerSec[2] >> 8);
 5c2:	0f 2e       	mov	r0, r31
 5c4:	fe e0       	ldi	r31, 0x0E	; 14
 5c6:	af 2e       	mov	r10, r31
 5c8:	f1 e0       	ldi	r31, 0x01	; 1
 5ca:	bf 2e       	mov	r11, r31
 5cc:	f0 2d       	mov	r31, r0
	
	if(ReceiveAddress == NODEID3){ //Only receive if Address is NODEID3
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
				if (ReceiveData[i] == FLOW_RICHTING_LINKS){ //if Receive data 0x01, Transmit the following data:
 5ce:	fe 01       	movw	r30, r28
 5d0:	e6 5d       	subi	r30, 0xD6	; 214
 5d2:	fe 4f       	sbci	r31, 0xFE	; 254
 5d4:	80 81       	ld	r24, Z
 5d6:	81 33       	cpi	r24, 0x31	; 49
 5d8:	c9 f4       	brne	.+50     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
					TransmitData[j++] = ReceiveData[i];
 5da:	e0 2f       	mov	r30, r16
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	ee 5d       	subi	r30, 0xDE	; 222
 5e0:	fe 4f       	sbci	r31, 0xFE	; 254
 5e2:	90 82       	st	Z, r9
					TransmitData[j++] = (PulsePerSec[2] >> 8);
 5e4:	d5 01       	movw	r26, r10
 5e6:	14 96       	adiw	r26, 0x04	; 4
 5e8:	8c 91       	ld	r24, X
 5ea:	14 97       	sbiw	r26, 0x04	; 4
 5ec:	15 96       	adiw	r26, 0x05	; 5
 5ee:	9c 91       	ld	r25, X
	if(ReceiveAddress == NODEID3){ //Only receive if Address is NODEID3
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
				if (ReceiveData[i] == FLOW_RICHTING_LINKS){ //if Receive data 0x01, Transmit the following data:
					TransmitData[j++] = ReceiveData[i];
 5f0:	e1 e0       	ldi	r30, 0x01	; 1
 5f2:	e0 0f       	add	r30, r16
					TransmitData[j++] = (PulsePerSec[2] >> 8);
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	ee 5d       	subi	r30, 0xDE	; 222
 5f8:	fe 4f       	sbci	r31, 0xFE	; 254
 5fa:	90 83       	st	Z, r25
					TransmitData[j++] = PulsePerSec[2];
 5fc:	e2 e0       	ldi	r30, 0x02	; 2
 5fe:	e0 0f       	add	r30, r16
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	0d 5f       	subi	r16, 0xFD	; 253
 604:	ee 5d       	subi	r30, 0xDE	; 222
 606:	fe 4f       	sbci	r31, 0xFE	; 254
 608:	80 83       	st	Z, r24
 60a:	1b c0       	rjmp	.+54     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
				}
				if (ReceiveData[i] == TEMP_LINKS){
 60c:	82 33       	cpi	r24, 0x32	; 50
 60e:	c9 f4       	brne	.+50     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
					getADC(0);
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	5e dd       	rcall	.-1348   	; 0xd0 <getADC>
					TransmitData[j++] = ReceiveData[i];
 614:	e0 2f       	mov	r30, r16
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	ee 5d       	subi	r30, 0xDE	; 222
 61a:	fe 4f       	sbci	r31, 0xFE	; 254
 61c:	c6 5d       	subi	r28, 0xD6	; 214
 61e:	de 4f       	sbci	r29, 0xFE	; 254
 620:	88 81       	ld	r24, Y
 622:	80 83       	st	Z, r24
 624:	e1 e0       	ldi	r30, 0x01	; 1
 626:	e0 0f       	add	r30, r16
					TransmitData[j++] = (ADCValue[0] << 8);
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	ee 5d       	subi	r30, 0xDE	; 222
 62c:	fe 4f       	sbci	r31, 0xFE	; 254
 62e:	10 82       	st	Z, r1
					TransmitData[j++] = ADCValue[0];
 630:	e2 e0       	ldi	r30, 0x02	; 2
 632:	e0 0f       	add	r30, r16
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	0d 5f       	subi	r16, 0xFD	; 253
 638:	ee 5d       	subi	r30, 0xDE	; 222
 63a:	fe 4f       	sbci	r31, 0xFE	; 254
 63c:	d6 01       	movw	r26, r12
 63e:	8c 91       	ld	r24, X
 640:	80 83       	st	Z, r24
	}
	
	if(ReceiveAddress == NODEID3){ //Only receive if Address is NODEID3
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
 642:	1f 5f       	subi	r17, 0xFF	; 255
 644:	c1 2f       	mov	r28, r17
 646:	d0 e0       	ldi	r29, 0x00	; 0
 648:	ce 15       	cp	r28, r14
 64a:	df 05       	cpc	r29, r15
 64c:	0c f4       	brge	.+2      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 64e:	bf cf       	rjmp	.-130    	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 650:	01 c0       	rjmp	.+2      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 652:	00 e0       	ldi	r16, 0x00	; 0
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (ADCValue[0] << 8);
					TransmitData[j++] = ADCValue[0];
				}
			}
			can_tx(MASTERID, j); //Transmit data depending on the number of message received
 654:	60 2f       	mov	r22, r16
 656:	87 e1       	ldi	r24, 0x17	; 23
 658:	93 e0       	ldi	r25, 0x03	; 3
 65a:	e4 dd       	rcall	.-1080   	; 0x224 <can_tx>
 65c:	ef c1       	rjmp	.+990    	; 0xa3c <__LOCK_REGION_LENGTH__+0x63c>
		}
	}

	if(ReceiveAddress == NODEID4){ //Only receive if Address is NODEID4
 65e:	c4 30       	cpi	r28, 0x04	; 4
 660:	b2 e0       	ldi	r27, 0x02	; 2
 662:	db 07       	cpc	r29, r27
 664:	09 f0       	breq	.+2      	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 666:	69 c0       	rjmp	.+210    	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
 668:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <ReceiveData>
 66c:	8d 33       	cpi	r24, 0x3D	; 61
 66e:	09 f0       	breq	.+2      	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
 670:	e5 c1       	rjmp	.+970    	; 0xa3c <__LOCK_REGION_LENGTH__+0x63c>
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
 672:	e0 2e       	mov	r14, r16
 674:	00 0f       	add	r16, r16
 676:	ff 08       	sbc	r15, r15
 678:	e2 e0       	ldi	r30, 0x02	; 2
 67a:	ee 16       	cp	r14, r30
 67c:	f1 04       	cpc	r15, r1
 67e:	0c f4       	brge	.+2      	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
 680:	56 c0       	rjmp	.+172    	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
 682:	c1 e0       	ldi	r28, 0x01	; 1
 684:	d0 e0       	ldi	r29, 0x00	; 0
 686:	11 e0       	ldi	r17, 0x01	; 1
 688:	00 e0       	ldi	r16, 0x00	; 0
				}
				if (ReceiveData[i] == TEMP_RECHTS){
					getADC(0);
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (ADCValue[0] << 8);
					TransmitData[j++] = ADCValue[0];
 68a:	0f 2e       	mov	r0, r31
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	cf 2e       	mov	r12, r31
 690:	f1 e0       	ldi	r31, 0x01	; 1
 692:	df 2e       	mov	r13, r31
 694:	f0 2d       	mov	r31, r0
	if(ReceiveAddress == NODEID4){ //Only receive if Address is NODEID4
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
				if (ReceiveData[i] == FLOW_RICHTING_RECHTS){ //if Receive data 0x01, Transmit the following data:
					TransmitData[j++] = ReceiveData[i];
 696:	0f 2e       	mov	r0, r31
 698:	f1 e4       	ldi	r31, 0x41	; 65
 69a:	9f 2e       	mov	r9, r31
 69c:	f0 2d       	mov	r31, r0
					TransmitData[j++] = (PulsePerSec[2] >> 8);
 69e:	0f 2e       	mov	r0, r31
 6a0:	fe e0       	ldi	r31, 0x0E	; 14
 6a2:	af 2e       	mov	r10, r31
 6a4:	f1 e0       	ldi	r31, 0x01	; 1
 6a6:	bf 2e       	mov	r11, r31
 6a8:	f0 2d       	mov	r31, r0

	if(ReceiveAddress == NODEID4){ //Only receive if Address is NODEID4
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
				if (ReceiveData[i] == FLOW_RICHTING_RECHTS){ //if Receive data 0x01, Transmit the following data:
 6aa:	fe 01       	movw	r30, r28
 6ac:	e6 5d       	subi	r30, 0xD6	; 214
 6ae:	fe 4f       	sbci	r31, 0xFE	; 254
 6b0:	80 81       	ld	r24, Z
 6b2:	81 34       	cpi	r24, 0x41	; 65
 6b4:	c9 f4       	brne	.+50     	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
					TransmitData[j++] = ReceiveData[i];
 6b6:	e0 2f       	mov	r30, r16
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	ee 5d       	subi	r30, 0xDE	; 222
 6bc:	fe 4f       	sbci	r31, 0xFE	; 254
 6be:	90 82       	st	Z, r9
					TransmitData[j++] = (PulsePerSec[2] >> 8);
 6c0:	d5 01       	movw	r26, r10
 6c2:	14 96       	adiw	r26, 0x04	; 4
 6c4:	8c 91       	ld	r24, X
 6c6:	14 97       	sbiw	r26, 0x04	; 4
 6c8:	15 96       	adiw	r26, 0x05	; 5
 6ca:	9c 91       	ld	r25, X
	if(ReceiveAddress == NODEID4){ //Only receive if Address is NODEID4
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
				if (ReceiveData[i] == FLOW_RICHTING_RECHTS){ //if Receive data 0x01, Transmit the following data:
					TransmitData[j++] = ReceiveData[i];
 6cc:	e1 e0       	ldi	r30, 0x01	; 1
 6ce:	e0 0f       	add	r30, r16
					TransmitData[j++] = (PulsePerSec[2] >> 8);
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	ee 5d       	subi	r30, 0xDE	; 222
 6d4:	fe 4f       	sbci	r31, 0xFE	; 254
 6d6:	90 83       	st	Z, r25
					TransmitData[j++] = PulsePerSec[2];
 6d8:	e2 e0       	ldi	r30, 0x02	; 2
 6da:	e0 0f       	add	r30, r16
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	0d 5f       	subi	r16, 0xFD	; 253
 6e0:	ee 5d       	subi	r30, 0xDE	; 222
 6e2:	fe 4f       	sbci	r31, 0xFE	; 254
 6e4:	80 83       	st	Z, r24
 6e6:	1b c0       	rjmp	.+54     	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
				}
				if (ReceiveData[i] == TEMP_RECHTS){
 6e8:	82 34       	cpi	r24, 0x42	; 66
 6ea:	c9 f4       	brne	.+50     	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
					getADC(0);
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	f0 dc       	rcall	.-1568   	; 0xd0 <getADC>
					TransmitData[j++] = ReceiveData[i];
 6f0:	e0 2f       	mov	r30, r16
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	ee 5d       	subi	r30, 0xDE	; 222
 6f6:	fe 4f       	sbci	r31, 0xFE	; 254
 6f8:	c6 5d       	subi	r28, 0xD6	; 214
 6fa:	de 4f       	sbci	r29, 0xFE	; 254
 6fc:	88 81       	ld	r24, Y
 6fe:	80 83       	st	Z, r24
 700:	e1 e0       	ldi	r30, 0x01	; 1
 702:	e0 0f       	add	r30, r16
					TransmitData[j++] = (ADCValue[0] << 8);
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	ee 5d       	subi	r30, 0xDE	; 222
 708:	fe 4f       	sbci	r31, 0xFE	; 254
 70a:	10 82       	st	Z, r1
					TransmitData[j++] = ADCValue[0];
 70c:	e2 e0       	ldi	r30, 0x02	; 2
 70e:	e0 0f       	add	r30, r16
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	0d 5f       	subi	r16, 0xFD	; 253
 714:	ee 5d       	subi	r30, 0xDE	; 222
 716:	fe 4f       	sbci	r31, 0xFE	; 254
 718:	d6 01       	movw	r26, r12
 71a:	8c 91       	ld	r24, X
 71c:	80 83       	st	Z, r24
	}

	if(ReceiveAddress == NODEID4){ //Only receive if Address is NODEID4
		if (ReceiveData[0] == 0x3D) { //if first data received is 3D = General data request
			uint8_t j = 0;
			for(uint8_t i = 1; i < length; i++){
 71e:	1f 5f       	subi	r17, 0xFF	; 255
 720:	c1 2f       	mov	r28, r17
 722:	d0 e0       	ldi	r29, 0x00	; 0
 724:	ce 15       	cp	r28, r14
 726:	df 05       	cpc	r29, r15
 728:	0c f4       	brge	.+2      	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
 72a:	bf cf       	rjmp	.-130    	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 72c:	01 c0       	rjmp	.+2      	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
 72e:	00 e0       	ldi	r16, 0x00	; 0
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (ADCValue[0] << 8);
					TransmitData[j++] = ADCValue[0];
				}
			}
			can_tx(MASTERID, j); //Transmit data depending on the number of message received
 730:	60 2f       	mov	r22, r16
 732:	87 e1       	ldi	r24, 0x17	; 23
 734:	93 e0       	ldi	r25, 0x03	; 3
 736:	76 dd       	rcall	.-1300   	; 0x224 <can_tx>
 738:	81 c1       	rjmp	.+770    	; 0xa3c <__LOCK_REGION_LENGTH__+0x63c>
		}
	}

	if(ReceiveAddress == ECU2ID){ //Only receive if Address is NODEID5
 73a:	c5 30       	cpi	r28, 0x05	; 5
 73c:	d2 40       	sbci	r29, 0x02	; 2
 73e:	09 f0       	breq	.+2      	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
 740:	7d c1       	rjmp	.+762    	; 0xa3c <__LOCK_REGION_LENGTH__+0x63c>
		
		for(uint8_t i = 0; i < length; i++){
 742:	00 2e       	mov	r0, r16
 744:	00 0c       	add	r0, r0
 746:	11 0b       	sbc	r17, r17
 748:	10 16       	cp	r1, r16
 74a:	11 06       	cpc	r1, r17
 74c:	0c f0       	brlt	.+2      	; 0x750 <__LOCK_REGION_LENGTH__+0x350>
 74e:	76 c1       	rjmp	.+748    	; 0xa3c <__LOCK_REGION_LENGTH__+0x63c>
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	c0 e0       	ldi	r28, 0x00	; 0
				if (ReceiveData[i] == DRAAIRICHTING_LINKS_ACHTER){
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = Direction[2];
				}
				if (ReceiveData[i] == DRAAIRICHTING_RECHTS_ACHTER){
					TransmitData[j++] = ReceiveData[i];
 756:	0f 2e       	mov	r0, r31
 758:	f4 e5       	ldi	r31, 0x54	; 84
 75a:	3f 2e       	mov	r3, r31
 75c:	f0 2d       	mov	r31, r0
					TransmitData[j++] = Direction[1];
 75e:	0f 2e       	mov	r0, r31
 760:	f8 e0       	ldi	r31, 0x08	; 8
 762:	af 2e       	mov	r10, r31
 764:	f1 e0       	ldi	r31, 0x01	; 1
 766:	bf 2e       	mov	r11, r31
 768:	f0 2d       	mov	r31, r0
	if(ReceiveAddress == ECU2ID){ //Only receive if Address is NODEID5
		
		for(uint8_t i = 0; i < length; i++){
			if (ReceiveData[i] == 0x3D) { //if first data received is 3D = General data request
				i++;
				uint8_t j = 0;
 76a:	21 2c       	mov	r2, r1
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (PulsePerSec[1] >> 8);
					TransmitData[j++] = PulsePerSec[1];
				}
				if (ReceiveData[i] == DRAAIRICHTING_LINKS_ACHTER){
					TransmitData[j++] = ReceiveData[i];
 76c:	0f 2e       	mov	r0, r31
 76e:	f2 e2       	ldi	r31, 0x22	; 34
 770:	ef 2e       	mov	r14, r31
 772:	f1 e0       	ldi	r31, 0x01	; 1
 774:	ff 2e       	mov	r15, r31
 776:	f0 2d       	mov	r31, r0
 778:	0f 2e       	mov	r0, r31
 77a:	f3 e5       	ldi	r31, 0x53	; 83
 77c:	4f 2e       	mov	r4, r31
 77e:	f0 2d       	mov	r31, r0
					TransmitData[j++] = Direction[2];
 780:	68 94       	set
 782:	55 24       	eor	r5, r5
 784:	51 f8       	bld	r5, 1
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = (PulsePerSec[2] >> 8);
					TransmitData[j++] = PulsePerSec[2];
				}
				if (ReceiveData[i] == RPM_RECHTS_ACHTER){ //if Receive data 0x01, Transmit the following data:
					TransmitData[j++] = ReceiveData[i];
 786:	0f 2e       	mov	r0, r31
 788:	f2 e5       	ldi	r31, 0x52	; 82
 78a:	6f 2e       	mov	r6, r31
 78c:	f0 2d       	mov	r31, r0
					TransmitData[j++] = (PulsePerSec[1] >> 8);
 78e:	0f 2e       	mov	r0, r31
 790:	fe e0       	ldi	r31, 0x0E	; 14
 792:	cf 2e       	mov	r12, r31
 794:	f1 e0       	ldi	r31, 0x01	; 1
 796:	df 2e       	mov	r13, r31
 798:	f0 2d       	mov	r31, r0
					TransmitData[j++] = PulsePerSec[1];
 79a:	0f 2e       	mov	r0, r31
 79c:	f3 e0       	ldi	r31, 0x03	; 3
 79e:	8f 2e       	mov	r8, r31
 7a0:	f0 2d       	mov	r31, r0
		for(uint8_t i = 0; i < length; i++){
			if (ReceiveData[i] == 0x3D) { //if first data received is 3D = General data request
				i++;
				uint8_t j = 0;
				if (ReceiveData[i] == RPM_LINKS_ACHTER){ //if Receive data 0x01, Transmit the following data:
					TransmitData[j++] = ReceiveData[i];
 7a2:	0f 2e       	mov	r0, r31
 7a4:	f1 e5       	ldi	r31, 0x51	; 81
 7a6:	7f 2e       	mov	r7, r31
 7a8:	f0 2d       	mov	r31, r0
				if(ReceiveData[i] == 0x01){
					PORTC	&= ~(1 << PC0);
				}
				_delay_ms(1);
				
				TransmitData[0] = RUN_ENABLE;
 7aa:	0f 2e       	mov	r0, r31
 7ac:	f5 e5       	ldi	r31, 0x55	; 85
 7ae:	9f 2e       	mov	r9, r31
 7b0:	f0 2d       	mov	r31, r0
				}
				else{
					PORTC	&= ~(1 << PC1);
				}
				_delay_ms(1);
				TransmitData[0] = MOTOR_CONTROLLER;
 7b2:	d6 e5       	ldi	r29, 0x56	; 86
	}

	if(ReceiveAddress == ECU2ID){ //Only receive if Address is NODEID5
		
		for(uint8_t i = 0; i < length; i++){
			if (ReceiveData[i] == 0x3D) { //if first data received is 3D = General data request
 7b4:	fc 01       	movw	r30, r24
 7b6:	e6 5d       	subi	r30, 0xD6	; 214
 7b8:	fe 4f       	sbci	r31, 0xFE	; 254
 7ba:	80 81       	ld	r24, Z
 7bc:	8d 33       	cpi	r24, 0x3D	; 61
 7be:	09 f0       	breq	.+2      	; 0x7c2 <__LOCK_REGION_LENGTH__+0x3c2>
 7c0:	6a c0       	rjmp	.+212    	; 0x896 <__LOCK_REGION_LENGTH__+0x496>
				i++;
 7c2:	cf 5f       	subi	r28, 0xFF	; 255
				uint8_t j = 0;
				if (ReceiveData[i] == RPM_LINKS_ACHTER){ //if Receive data 0x01, Transmit the following data:
 7c4:	2c 2f       	mov	r18, r28
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	f9 01       	movw	r30, r18
 7ca:	e6 5d       	subi	r30, 0xD6	; 214
 7cc:	fe 4f       	sbci	r31, 0xFE	; 254
 7ce:	80 81       	ld	r24, Z
 7d0:	81 35       	cpi	r24, 0x51	; 81
 7d2:	61 f4       	brne	.+24     	; 0x7ec <__LOCK_REGION_LENGTH__+0x3ec>
					TransmitData[j++] = ReceiveData[i];
 7d4:	f7 01       	movw	r30, r14
 7d6:	70 82       	st	Z, r7
					TransmitData[j++] = (PulsePerSec[2] >> 8);
 7d8:	d6 01       	movw	r26, r12
 7da:	14 96       	adiw	r26, 0x04	; 4
 7dc:	9c 91       	ld	r25, X
 7de:	14 97       	sbiw	r26, 0x04	; 4
 7e0:	15 96       	adiw	r26, 0x05	; 5
 7e2:	4c 91       	ld	r20, X
 7e4:	41 83       	std	Z+1, r20	; 0x01
					TransmitData[j++] = PulsePerSec[2];
 7e6:	92 83       	std	Z+2, r25	; 0x02
 7e8:	68 2d       	mov	r22, r8
 7ea:	19 c0       	rjmp	.+50     	; 0x81e <__LOCK_REGION_LENGTH__+0x41e>
				}
				if (ReceiveData[i] == RPM_RECHTS_ACHTER){ //if Receive data 0x01, Transmit the following data:
 7ec:	82 35       	cpi	r24, 0x52	; 82
 7ee:	61 f4       	brne	.+24     	; 0x808 <__LOCK_REGION_LENGTH__+0x408>
					TransmitData[j++] = ReceiveData[i];
 7f0:	f7 01       	movw	r30, r14
 7f2:	60 82       	st	Z, r6
					TransmitData[j++] = (PulsePerSec[1] >> 8);
 7f4:	d6 01       	movw	r26, r12
 7f6:	12 96       	adiw	r26, 0x02	; 2
 7f8:	9c 91       	ld	r25, X
 7fa:	12 97       	sbiw	r26, 0x02	; 2
 7fc:	13 96       	adiw	r26, 0x03	; 3
 7fe:	4c 91       	ld	r20, X
 800:	41 83       	std	Z+1, r20	; 0x01
					TransmitData[j++] = PulsePerSec[1];
 802:	92 83       	std	Z+2, r25	; 0x02
 804:	68 2d       	mov	r22, r8
 806:	1d c0       	rjmp	.+58     	; 0x842 <__LOCK_REGION_LENGTH__+0x442>
				}
				if (ReceiveData[i] == DRAAIRICHTING_LINKS_ACHTER){
 808:	83 35       	cpi	r24, 0x53	; 83
 80a:	41 f4       	brne	.+16     	; 0x81c <__LOCK_REGION_LENGTH__+0x41c>
					TransmitData[j++] = ReceiveData[i];
 80c:	f7 01       	movw	r30, r14
 80e:	40 82       	st	Z, r4
					TransmitData[j++] = Direction[2];
 810:	d5 01       	movw	r26, r10
 812:	12 96       	adiw	r26, 0x02	; 2
 814:	8c 91       	ld	r24, X
 816:	81 83       	std	Z+1, r24	; 0x01
 818:	65 2d       	mov	r22, r5
 81a:	3a c0       	rjmp	.+116    	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
	if(ReceiveAddress == ECU2ID){ //Only receive if Address is NODEID5
		
		for(uint8_t i = 0; i < length; i++){
			if (ReceiveData[i] == 0x3D) { //if first data received is 3D = General data request
				i++;
				uint8_t j = 0;
 81c:	62 2d       	mov	r22, r2
				}
				if (ReceiveData[i] == DRAAIRICHTING_LINKS_ACHTER){
					TransmitData[j++] = ReceiveData[i];
					TransmitData[j++] = Direction[2];
				}
				if (ReceiveData[i] == DRAAIRICHTING_RECHTS_ACHTER){
 81e:	84 35       	cpi	r24, 0x54	; 84
 820:	81 f4       	brne	.+32     	; 0x842 <__LOCK_REGION_LENGTH__+0x442>
					TransmitData[j++] = ReceiveData[i];
 822:	e6 2f       	mov	r30, r22
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	ee 5d       	subi	r30, 0xDE	; 222
 828:	fe 4f       	sbci	r31, 0xFE	; 254
 82a:	30 82       	st	Z, r3
					TransmitData[j++] = Direction[1];
 82c:	e1 e0       	ldi	r30, 0x01	; 1
 82e:	e6 0f       	add	r30, r22
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	6e 5f       	subi	r22, 0xFE	; 254
 834:	ee 5d       	subi	r30, 0xDE	; 222
 836:	fe 4f       	sbci	r31, 0xFE	; 254
 838:	d5 01       	movw	r26, r10
 83a:	11 96       	adiw	r26, 0x01	; 1
 83c:	8c 91       	ld	r24, X
 83e:	80 83       	st	Z, r24
 840:	27 c0       	rjmp	.+78     	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
				}
				if (ReceiveData[i] == SHUTDOWN){
 842:	81 36       	cpi	r24, 0x61	; 97
 844:	29 f5       	brne	.+74     	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
					DDRD &= ~(1<<PD7);
 846:	57 98       	cbi	0x0a, 7	; 10
					if((PIND & (1 << PD7))){
 848:	4f 9b       	sbis	0x09, 7	; 9
 84a:	12 c0       	rjmp	.+36     	; 0x870 <__LOCK_REGION_LENGTH__+0x470>
						TransmitData[j++] = ReceiveData[i];
 84c:	e6 2f       	mov	r30, r22
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	ee 5d       	subi	r30, 0xDE	; 222
 852:	fe 4f       	sbci	r31, 0xFE	; 254
 854:	d9 01       	movw	r26, r18
 856:	a6 5d       	subi	r26, 0xD6	; 214
 858:	be 4f       	sbci	r27, 0xFE	; 254
 85a:	8c 91       	ld	r24, X
 85c:	80 83       	st	Z, r24
						TransmitData[j++] = 0xFF;
 85e:	e1 e0       	ldi	r30, 0x01	; 1
 860:	e6 0f       	add	r30, r22
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	6e 5f       	subi	r22, 0xFE	; 254
 866:	ee 5d       	subi	r30, 0xDE	; 222
 868:	fe 4f       	sbci	r31, 0xFE	; 254
 86a:	bf ef       	ldi	r27, 0xFF	; 255
 86c:	b0 83       	st	Z, r27
 86e:	10 c0       	rjmp	.+32     	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
					}
					else{
						TransmitData[j++] = ReceiveData[i];
 870:	e6 2f       	mov	r30, r22
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	ee 5d       	subi	r30, 0xDE	; 222
 876:	fe 4f       	sbci	r31, 0xFE	; 254
 878:	d9 01       	movw	r26, r18
 87a:	a6 5d       	subi	r26, 0xD6	; 214
 87c:	be 4f       	sbci	r27, 0xFE	; 254
 87e:	8c 91       	ld	r24, X
 880:	80 83       	st	Z, r24
						TransmitData[j++] = 0x00;
 882:	e1 e0       	ldi	r30, 0x01	; 1
 884:	e6 0f       	add	r30, r22
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	6e 5f       	subi	r22, 0xFE	; 254
 88a:	ee 5d       	subi	r30, 0xDE	; 222
 88c:	fe 4f       	sbci	r31, 0xFE	; 254
 88e:	10 82       	st	Z, r1
					}
				}
				can_tx(MASTERID, j); //Transmit data depending on the number of message received
 890:	87 e1       	ldi	r24, 0x17	; 23
 892:	93 e0       	ldi	r25, 0x03	; 3
 894:	c7 dc       	rcall	.-1650   	; 0x224 <can_tx>
			}
			if (ReceiveData[i] == RUN_ENABLE){
 896:	ec 2f       	mov	r30, r28
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	e6 5d       	subi	r30, 0xD6	; 214
 89c:	fe 4f       	sbci	r31, 0xFE	; 254
 89e:	80 81       	ld	r24, Z
 8a0:	85 35       	cpi	r24, 0x55	; 85
 8a2:	f1 f4       	brne	.+60     	; 0x8e0 <__LOCK_REGION_LENGTH__+0x4e0>
				i++;
 8a4:	cf 5f       	subi	r28, 0xFF	; 255
				DDRC	|= (1 << PC0);
 8a6:	38 9a       	sbi	0x07, 0	; 7
				if(ReceiveData[i] == 0xff){
 8a8:	8c 2f       	mov	r24, r28
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	fc 01       	movw	r30, r24
 8ae:	e6 5d       	subi	r30, 0xD6	; 214
 8b0:	fe 4f       	sbci	r31, 0xFE	; 254
 8b2:	20 81       	ld	r18, Z
 8b4:	2f 3f       	cpi	r18, 0xFF	; 255
 8b6:	09 f4       	brne	.+2      	; 0x8ba <__LOCK_REGION_LENGTH__+0x4ba>
					PORTC	|= (1 << PC0);
 8b8:	40 9a       	sbi	0x08, 0	; 8
				}
				if(ReceiveData[i] == 0x01){
 8ba:	fc 01       	movw	r30, r24
 8bc:	e6 5d       	subi	r30, 0xD6	; 214
 8be:	fe 4f       	sbci	r31, 0xFE	; 254
 8c0:	80 81       	ld	r24, Z
 8c2:	81 30       	cpi	r24, 0x01	; 1
 8c4:	09 f4       	brne	.+2      	; 0x8c8 <__LOCK_REGION_LENGTH__+0x4c8>
					PORTC	&= ~(1 << PC0);
 8c6:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8c8:	ef e9       	ldi	r30, 0x9F	; 159
 8ca:	ff e0       	ldi	r31, 0x0F	; 15
 8cc:	31 97       	sbiw	r30, 0x01	; 1
 8ce:	f1 f7       	brne	.-4      	; 0x8cc <__LOCK_REGION_LENGTH__+0x4cc>
 8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <__LOCK_REGION_LENGTH__+0x4d2>
 8d2:	00 00       	nop
				}
				_delay_ms(1);
				
				TransmitData[0] = RUN_ENABLE;
 8d4:	d7 01       	movw	r26, r14
 8d6:	9c 92       	st	X, r9
				can_tx(MASTERID, 1); //Transmit data depending on the number of message received
 8d8:	61 e0       	ldi	r22, 0x01	; 1
 8da:	87 e1       	ldi	r24, 0x17	; 23
 8dc:	93 e0       	ldi	r25, 0x03	; 3
 8de:	a2 dc       	rcall	.-1724   	; 0x224 <can_tx>
			}
			if (ReceiveData[i] == MOTOR_CONTROLLER){
 8e0:	ec 2f       	mov	r30, r28
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	e6 5d       	subi	r30, 0xD6	; 214
 8e6:	fe 4f       	sbci	r31, 0xFE	; 254
 8e8:	80 81       	ld	r24, Z
 8ea:	86 35       	cpi	r24, 0x56	; 86
 8ec:	c1 f4       	brne	.+48     	; 0x91e <__LOCK_REGION_LENGTH__+0x51e>
				i++;
 8ee:	cf 5f       	subi	r28, 0xFF	; 255
				DDRC	|= (1 << PC1);
 8f0:	39 9a       	sbi	0x07, 1	; 7
				if(ReceiveData[i]){
 8f2:	ec 2f       	mov	r30, r28
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	e6 5d       	subi	r30, 0xD6	; 214
 8f8:	fe 4f       	sbci	r31, 0xFE	; 254
 8fa:	80 81       	ld	r24, Z
 8fc:	88 23       	and	r24, r24
 8fe:	11 f0       	breq	.+4      	; 0x904 <__LOCK_REGION_LENGTH__+0x504>
					PORTC	|= (1 << PC1);
 900:	41 9a       	sbi	0x08, 1	; 8
 902:	01 c0       	rjmp	.+2      	; 0x906 <__LOCK_REGION_LENGTH__+0x506>
				}
				else{
					PORTC	&= ~(1 << PC1);
 904:	41 98       	cbi	0x08, 1	; 8
 906:	ef e9       	ldi	r30, 0x9F	; 159
 908:	ff e0       	ldi	r31, 0x0F	; 15
 90a:	31 97       	sbiw	r30, 0x01	; 1
 90c:	f1 f7       	brne	.-4      	; 0x90a <__LOCK_REGION_LENGTH__+0x50a>
 90e:	00 c0       	rjmp	.+0      	; 0x910 <__LOCK_REGION_LENGTH__+0x510>
 910:	00 00       	nop
				}
				_delay_ms(1);
				TransmitData[0] = MOTOR_CONTROLLER;
 912:	d7 01       	movw	r26, r14
 914:	dc 93       	st	X, r29
				can_tx(MASTERID, 1); //Transmit data depending on the number of message received
 916:	61 e0       	ldi	r22, 0x01	; 1
 918:	87 e1       	ldi	r24, 0x17	; 23
 91a:	93 e0       	ldi	r25, 0x03	; 3
 91c:	83 dc       	rcall	.-1786   	; 0x224 <can_tx>
			}
			if (ReceiveData[i] == BRAKELIGHT){
 91e:	ec 2f       	mov	r30, r28
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	e6 5d       	subi	r30, 0xD6	; 214
 924:	fe 4f       	sbci	r31, 0xFE	; 254
 926:	80 81       	ld	r24, Z
 928:	87 35       	cpi	r24, 0x57	; 87
 92a:	c9 f4       	brne	.+50     	; 0x95e <__LOCK_REGION_LENGTH__+0x55e>
				i++;
 92c:	cf 5f       	subi	r28, 0xFF	; 255
				DDRC	|= (1 << PC4);
 92e:	3c 9a       	sbi	0x07, 4	; 7
				if(ReceiveData[i]){
 930:	ec 2f       	mov	r30, r28
 932:	f0 e0       	ldi	r31, 0x00	; 0
 934:	e6 5d       	subi	r30, 0xD6	; 214
 936:	fe 4f       	sbci	r31, 0xFE	; 254
 938:	80 81       	ld	r24, Z
 93a:	88 23       	and	r24, r24
 93c:	11 f0       	breq	.+4      	; 0x942 <__LOCK_REGION_LENGTH__+0x542>
					PORTC	|= (1 << PC4);
 93e:	44 9a       	sbi	0x08, 4	; 8
 940:	01 c0       	rjmp	.+2      	; 0x944 <__LOCK_REGION_LENGTH__+0x544>
				}
				else{
					PORTC	&= ~(1 << PC4);
 942:	44 98       	cbi	0x08, 4	; 8
 944:	ef e9       	ldi	r30, 0x9F	; 159
 946:	ff e0       	ldi	r31, 0x0F	; 15
 948:	31 97       	sbiw	r30, 0x01	; 1
 94a:	f1 f7       	brne	.-4      	; 0x948 <__LOCK_REGION_LENGTH__+0x548>
 94c:	00 c0       	rjmp	.+0      	; 0x94e <__LOCK_REGION_LENGTH__+0x54e>
 94e:	00 00       	nop
				}
				_delay_ms(1);
				TransmitData[0] = BRAKELIGHT;
 950:	87 e5       	ldi	r24, 0x57	; 87
 952:	d7 01       	movw	r26, r14
 954:	8c 93       	st	X, r24
				can_tx(MASTERID, 1); //Transmit data depending on the number of message received
 956:	61 e0       	ldi	r22, 0x01	; 1
 958:	87 e1       	ldi	r24, 0x17	; 23
 95a:	93 e0       	ldi	r25, 0x03	; 3
 95c:	63 dc       	rcall	.-1850   	; 0x224 <can_tx>
			}
			if (ReceiveData[i] == PRE_DISCHARGE){
 95e:	ec 2f       	mov	r30, r28
 960:	f0 e0       	ldi	r31, 0x00	; 0
 962:	e6 5d       	subi	r30, 0xD6	; 214
 964:	fe 4f       	sbci	r31, 0xFE	; 254
 966:	80 81       	ld	r24, Z
 968:	88 35       	cpi	r24, 0x58	; 88
 96a:	e1 f4       	brne	.+56     	; 0x9a4 <__LOCK_REGION_LENGTH__+0x5a4>
				i++;
 96c:	cf 5f       	subi	r28, 0xFF	; 255
				DDRC |= (1 << PC3);
 96e:	3b 9a       	sbi	0x07, 3	; 7
				//DDRC |= (1 << PC2);
				// DDRD &= ~(1<<PD7);
				
				if(ReceiveData[i]){
 970:	ec 2f       	mov	r30, r28
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	e6 5d       	subi	r30, 0xD6	; 214
 976:	fe 4f       	sbci	r31, 0xFE	; 254
 978:	80 81       	ld	r24, Z
 97a:	88 23       	and	r24, r24
 97c:	29 f0       	breq	.+10     	; 0x988 <__LOCK_REGION_LENGTH__+0x588>
					predison = 1;
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <predison>
					PORTC	|= (1 << PC3);
 984:	43 9a       	sbi	0x08, 3	; 8
 986:	01 c0       	rjmp	.+2      	; 0x98a <__LOCK_REGION_LENGTH__+0x58a>
				}
				else{
					PORTC	&= ~(1 << PC3);
 988:	43 98       	cbi	0x08, 3	; 8
 98a:	ef e9       	ldi	r30, 0x9F	; 159
 98c:	ff e0       	ldi	r31, 0x0F	; 15
 98e:	31 97       	sbiw	r30, 0x01	; 1
 990:	f1 f7       	brne	.-4      	; 0x98e <__LOCK_REGION_LENGTH__+0x58e>
 992:	00 c0       	rjmp	.+0      	; 0x994 <__LOCK_REGION_LENGTH__+0x594>
 994:	00 00       	nop
				}
				_delay_ms(1);
				TransmitData[0] = PRE_DISCHARGE;
 996:	88 e5       	ldi	r24, 0x58	; 88
 998:	d7 01       	movw	r26, r14
 99a:	8c 93       	st	X, r24
				can_tx(MASTERID, 1); //Transmit data depending on the number of message received
 99c:	61 e0       	ldi	r22, 0x01	; 1
 99e:	87 e1       	ldi	r24, 0x17	; 23
 9a0:	93 e0       	ldi	r25, 0x03	; 3
 9a2:	40 dc       	rcall	.-1920   	; 0x224 <can_tx>
			}
			if (ReceiveData[i] == MAINRELAIS){
 9a4:	ec 2f       	mov	r30, r28
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	e6 5d       	subi	r30, 0xD6	; 214
 9aa:	fe 4f       	sbci	r31, 0xFE	; 254
 9ac:	80 81       	ld	r24, Z
 9ae:	80 36       	cpi	r24, 0x60	; 96
 9b0:	f1 f4       	brne	.+60     	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
				i++;
				DDRC	|= (1 << PC2);
 9b2:	3a 9a       	sbi	0x07, 2	; 7
				if(ReceiveData[i++] && predison == 1){
 9b4:	e1 e0       	ldi	r30, 0x01	; 1
 9b6:	ec 0f       	add	r30, r28
 9b8:	f0 e0       	ldi	r31, 0x00	; 0
 9ba:	ce 5f       	subi	r28, 0xFE	; 254
 9bc:	e6 5d       	subi	r30, 0xD6	; 214
 9be:	fe 4f       	sbci	r31, 0xFE	; 254
 9c0:	80 81       	ld	r24, Z
 9c2:	88 23       	and	r24, r24
 9c4:	31 f0       	breq	.+12     	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
 9c6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <predison>
 9ca:	88 23       	and	r24, r24
 9cc:	11 f0       	breq	.+4      	; 0x9d2 <__LOCK_REGION_LENGTH__+0x5d2>
					PORTC	|= (1 << PC2);
 9ce:	42 9a       	sbi	0x08, 2	; 8
 9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <__LOCK_REGION_LENGTH__+0x5d4>
				}
				else{
					PORTC	&= ~(1 << PC2);
 9d2:	42 98       	cbi	0x08, 2	; 8
 9d4:	ef e9       	ldi	r30, 0x9F	; 159
 9d6:	ff e0       	ldi	r31, 0x0F	; 15
 9d8:	31 97       	sbiw	r30, 0x01	; 1
 9da:	f1 f7       	brne	.-4      	; 0x9d8 <__LOCK_REGION_LENGTH__+0x5d8>
 9dc:	00 c0       	rjmp	.+0      	; 0x9de <__LOCK_REGION_LENGTH__+0x5de>
 9de:	00 00       	nop
				}
				_delay_ms(1);
				TransmitData[0] = MAINRELAIS;
 9e0:	80 e6       	ldi	r24, 0x60	; 96
 9e2:	d7 01       	movw	r26, r14
 9e4:	8c 93       	st	X, r24
				can_tx(MASTERID, 1); //Transmit data depending on the number of message received
 9e6:	61 e0       	ldi	r22, 0x01	; 1
 9e8:	87 e1       	ldi	r24, 0x17	; 23
 9ea:	93 e0       	ldi	r25, 0x03	; 3
 9ec:	1b dc       	rcall	.-1994   	; 0x224 <can_tx>
			}
			if (ReceiveData[i] == PUMP){
 9ee:	ec 2f       	mov	r30, r28
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	e6 5d       	subi	r30, 0xD6	; 214
 9f4:	fe 4f       	sbci	r31, 0xFE	; 254
 9f6:	80 81       	ld	r24, Z
 9f8:	89 35       	cpi	r24, 0x59	; 89
 9fa:	c9 f4       	brne	.+50     	; 0xa2e <__LOCK_REGION_LENGTH__+0x62e>
				i++;
 9fc:	cf 5f       	subi	r28, 0xFF	; 255
				DDRC	|= (1 << PC5);
 9fe:	3d 9a       	sbi	0x07, 5	; 7
				if(ReceiveData[i]){
 a00:	ec 2f       	mov	r30, r28
 a02:	f0 e0       	ldi	r31, 0x00	; 0
 a04:	e6 5d       	subi	r30, 0xD6	; 214
 a06:	fe 4f       	sbci	r31, 0xFE	; 254
 a08:	80 81       	ld	r24, Z
 a0a:	88 23       	and	r24, r24
 a0c:	11 f0       	breq	.+4      	; 0xa12 <__LOCK_REGION_LENGTH__+0x612>
					PORTC	|= (1 << PC5);
 a0e:	45 9a       	sbi	0x08, 5	; 8
 a10:	01 c0       	rjmp	.+2      	; 0xa14 <__LOCK_REGION_LENGTH__+0x614>
				}
				else{
					PORTC	&= ~(1 << PC5);
 a12:	45 98       	cbi	0x08, 5	; 8
 a14:	ef e9       	ldi	r30, 0x9F	; 159
 a16:	ff e0       	ldi	r31, 0x0F	; 15
 a18:	31 97       	sbiw	r30, 0x01	; 1
 a1a:	f1 f7       	brne	.-4      	; 0xa18 <__LOCK_REGION_LENGTH__+0x618>
 a1c:	00 c0       	rjmp	.+0      	; 0xa1e <__LOCK_REGION_LENGTH__+0x61e>
 a1e:	00 00       	nop
				}
				_delay_ms(1);
				TransmitData[0] = PUMP;
 a20:	89 e5       	ldi	r24, 0x59	; 89
 a22:	d7 01       	movw	r26, r14
 a24:	8c 93       	st	X, r24
				can_tx(MASTERID, 1); //Transmit data depending on the number of message received
 a26:	61 e0       	ldi	r22, 0x01	; 1
 a28:	87 e1       	ldi	r24, 0x17	; 23
 a2a:	93 e0       	ldi	r25, 0x03	; 3
 a2c:	fb db       	rcall	.-2058   	; 0x224 <can_tx>
		}
	}

	if(ReceiveAddress == ECU2ID){ //Only receive if Address is NODEID5
		
		for(uint8_t i = 0; i < length; i++){
 a2e:	cf 5f       	subi	r28, 0xFF	; 255
 a30:	8c 2f       	mov	r24, r28
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	80 17       	cp	r24, r16
 a36:	91 07       	cpc	r25, r17
 a38:	0c f4       	brge	.+2      	; 0xa3c <__LOCK_REGION_LENGTH__+0x63c>
 a3a:	bc ce       	rjmp	.-648    	; 0x7b4 <__LOCK_REGION_LENGTH__+0x3b4>
 a3c:	ea e2       	ldi	r30, 0x2A	; 42
 a3e:	f1 e0       	ldi	r31, 0x01	; 1
 a40:	a2 e2       	ldi	r26, 0x22	; 34
 a42:	b1 e0       	ldi	r27, 0x01	; 1
 a44:	82 e3       	ldi	r24, 0x32	; 50
 a46:	91 e0       	ldi	r25, 0x01	; 1
			}
		}
	}

	for (int8_t i = 0; i < 8; i++){
		ReceiveData[i] = 0; //Resetting Receive Data
 a48:	11 92       	st	Z+, r1
		TransmitData[i] = 0; //Resetting Transmit Data
 a4a:	1d 92       	st	X+, r1
				can_tx(MASTERID, 1); //Transmit data depending on the number of message received
			}
		}
	}

	for (int8_t i = 0; i < 8; i++){
 a4c:	e8 17       	cp	r30, r24
 a4e:	f9 07       	cpc	r31, r25
 a50:	d9 f7       	brne	.-10     	; 0xa48 <__LOCK_REGION_LENGTH__+0x648>
		ReceiveData[i] = 0; //Resetting Receive Data
		TransmitData[i] = 0; //Resetting Transmit Data
	}


	CANSTMOB = 0x00; // Clear RXOK flag
 a52:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 3 << DLC0)); //CAN MOb Control and DLC Register: (1<<CONMOB1) = enable reception. (0<<IDE) = can standard rev 2.0A ( id length = 11 bits), (3 << DLC0) 3 Bytes in the data field of the message.
 a56:	83 e8       	ldi	r24, 0x83	; 131
 a58:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 0 << MOBNB0 ); // select 0000 = CANMOB0
 a5c:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
}
 a60:	ff 91       	pop	r31
 a62:	ef 91       	pop	r30
 a64:	df 91       	pop	r29
 a66:	cf 91       	pop	r28
 a68:	bf 91       	pop	r27
 a6a:	af 91       	pop	r26
 a6c:	9f 91       	pop	r25
 a6e:	8f 91       	pop	r24
 a70:	7f 91       	pop	r23
 a72:	6f 91       	pop	r22
 a74:	5f 91       	pop	r21
 a76:	4f 91       	pop	r20
 a78:	3f 91       	pop	r19
 a7a:	2f 91       	pop	r18
 a7c:	1f 91       	pop	r17
 a7e:	0f 91       	pop	r16
 a80:	ff 90       	pop	r15
 a82:	ef 90       	pop	r14
 a84:	df 90       	pop	r13
 a86:	cf 90       	pop	r12
 a88:	bf 90       	pop	r11
 a8a:	af 90       	pop	r10
 a8c:	9f 90       	pop	r9
 a8e:	8f 90       	pop	r8
 a90:	7f 90       	pop	r7
 a92:	6f 90       	pop	r6
 a94:	5f 90       	pop	r5
 a96:	4f 90       	pop	r4
 a98:	3f 90       	pop	r3
 a9a:	2f 90       	pop	r2
 a9c:	0f 90       	pop	r0
 a9e:	0b be       	out	0x3b, r0	; 59
 aa0:	0f 90       	pop	r0
 aa2:	0f be       	out	0x3f, r0	; 63
 aa4:	0f 90       	pop	r0
 aa6:	1f 90       	pop	r1
 aa8:	18 95       	reti

00000aaa <__vector_1>:
 aaa:	1f 92       	push	r1
 aac:	0f 92       	push	r0
 aae:	0f b6       	in	r0, 0x3f	; 63
 ab0:	0f 92       	push	r0
 ab2:	11 24       	eor	r1, r1
 ab4:	0f 90       	pop	r0
 ab6:	0f be       	out	0x3f, r0	; 63
 ab8:	0f 90       	pop	r0
 aba:	1f 90       	pop	r1
 abc:	18 95       	reti

00000abe <__vector_2>:
 abe:	1f 92       	push	r1
 ac0:	0f 92       	push	r0
 ac2:	0f b6       	in	r0, 0x3f	; 63
 ac4:	0f 92       	push	r0
 ac6:	11 24       	eor	r1, r1
 ac8:	0b b6       	in	r0, 0x3b	; 59
 aca:	0f 92       	push	r0
 acc:	2f 93       	push	r18
 ace:	3f 93       	push	r19
 ad0:	4f 93       	push	r20
 ad2:	5f 93       	push	r21
 ad4:	6f 93       	push	r22
 ad6:	7f 93       	push	r23
 ad8:	8f 93       	push	r24
 ada:	9f 93       	push	r25
 adc:	af 93       	push	r26
 ade:	bf 93       	push	r27
 ae0:	ef 93       	push	r30
 ae2:	ff 93       	push	r31
 ae4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 ae8:	60 91 85 00 	lds	r22, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 aec:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 af0:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 af4:	70 e0       	ldi	r23, 0x00	; 0
 af6:	76 2f       	mov	r23, r22
 af8:	66 27       	eor	r22, r22
 afa:	68 0f       	add	r22, r24
 afc:	71 1d       	adc	r23, r1
 afe:	89 e0       	ldi	r24, 0x09	; 9
 b00:	9d e3       	ldi	r25, 0x3D	; 61
 b02:	3e d2       	rcall	.+1148   	; 0xf80 <__udivmodhi4>
 b04:	ee e0       	ldi	r30, 0x0E	; 14
 b06:	f1 e0       	ldi	r31, 0x01	; 1
 b08:	66 83       	std	Z+6, r22	; 0x06
 b0a:	77 83       	std	Z+7, r23	; 0x07
 b0c:	e2 e2       	ldi	r30, 0x22	; 34
 b0e:	f1 e0       	ldi	r31, 0x01	; 1
 b10:	10 82       	st	Z, r1
 b12:	61 83       	std	Z+1, r22	; 0x01
 b14:	62 e0       	ldi	r22, 0x02	; 2
 b16:	87 e1       	ldi	r24, 0x17	; 23
 b18:	93 e0       	ldi	r25, 0x03	; 3
 b1a:	84 db       	rcall	.-2296   	; 0x224 <can_tx>
 b1c:	ff 91       	pop	r31
 b1e:	ef 91       	pop	r30
 b20:	bf 91       	pop	r27
 b22:	af 91       	pop	r26
 b24:	9f 91       	pop	r25
 b26:	8f 91       	pop	r24
 b28:	7f 91       	pop	r23
 b2a:	6f 91       	pop	r22
 b2c:	5f 91       	pop	r21
 b2e:	4f 91       	pop	r20
 b30:	3f 91       	pop	r19
 b32:	2f 91       	pop	r18
 b34:	0f 90       	pop	r0
 b36:	0b be       	out	0x3b, r0	; 59
 b38:	0f 90       	pop	r0
 b3a:	0f be       	out	0x3f, r0	; 63
 b3c:	0f 90       	pop	r0
 b3e:	1f 90       	pop	r1
 b40:	18 95       	reti

00000b42 <__vector_3>:
 b42:	1f 92       	push	r1
 b44:	0f 92       	push	r0
 b46:	0f b6       	in	r0, 0x3f	; 63
 b48:	0f 92       	push	r0
 b4a:	11 24       	eor	r1, r1
 b4c:	0b b6       	in	r0, 0x3b	; 59
 b4e:	0f 92       	push	r0
 b50:	2f 93       	push	r18
 b52:	3f 93       	push	r19
 b54:	4f 93       	push	r20
 b56:	5f 93       	push	r21
 b58:	6f 93       	push	r22
 b5a:	7f 93       	push	r23
 b5c:	8f 93       	push	r24
 b5e:	9f 93       	push	r25
 b60:	af 93       	push	r26
 b62:	bf 93       	push	r27
 b64:	ef 93       	push	r30
 b66:	ff 93       	push	r31
 b68:	e4 e9       	ldi	r30, 0x94	; 148
 b6a:	f0 e0       	ldi	r31, 0x00	; 0
 b6c:	80 81       	ld	r24, Z
 b6e:	a5 e9       	ldi	r26, 0x95	; 149
 b70:	b0 e0       	ldi	r27, 0x00	; 0
 b72:	6c 91       	ld	r22, X
 b74:	1c 92       	st	X, r1
 b76:	10 82       	st	Z, r1
 b78:	70 e0       	ldi	r23, 0x00	; 0
 b7a:	76 2f       	mov	r23, r22
 b7c:	66 27       	eor	r22, r22
 b7e:	68 0f       	add	r22, r24
 b80:	71 1d       	adc	r23, r1
 b82:	89 e0       	ldi	r24, 0x09	; 9
 b84:	9d e3       	ldi	r25, 0x3D	; 61
 b86:	fc d1       	rcall	.+1016   	; 0xf80 <__udivmodhi4>
 b88:	ee e0       	ldi	r30, 0x0E	; 14
 b8a:	f1 e0       	ldi	r31, 0x01	; 1
 b8c:	64 83       	std	Z+4, r22	; 0x04
 b8e:	75 83       	std	Z+5, r23	; 0x05
 b90:	e2 e2       	ldi	r30, 0x22	; 34
 b92:	f1 e0       	ldi	r31, 0x01	; 1
 b94:	10 82       	st	Z, r1
 b96:	61 83       	std	Z+1, r22	; 0x01
 b98:	62 e0       	ldi	r22, 0x02	; 2
 b9a:	87 e1       	ldi	r24, 0x17	; 23
 b9c:	93 e0       	ldi	r25, 0x03	; 3
 b9e:	42 db       	rcall	.-2428   	; 0x224 <can_tx>
 ba0:	ff 91       	pop	r31
 ba2:	ef 91       	pop	r30
 ba4:	bf 91       	pop	r27
 ba6:	af 91       	pop	r26
 ba8:	9f 91       	pop	r25
 baa:	8f 91       	pop	r24
 bac:	7f 91       	pop	r23
 bae:	6f 91       	pop	r22
 bb0:	5f 91       	pop	r21
 bb2:	4f 91       	pop	r20
 bb4:	3f 91       	pop	r19
 bb6:	2f 91       	pop	r18
 bb8:	0f 90       	pop	r0
 bba:	0b be       	out	0x3b, r0	; 59
 bbc:	0f 90       	pop	r0
 bbe:	0f be       	out	0x3f, r0	; 63
 bc0:	0f 90       	pop	r0
 bc2:	1f 90       	pop	r1
 bc4:	18 95       	reti

00000bc6 <__vector_4>:
 bc6:	1f 92       	push	r1
 bc8:	0f 92       	push	r0
 bca:	0f b6       	in	r0, 0x3f	; 63
 bcc:	0f 92       	push	r0
 bce:	11 24       	eor	r1, r1
 bd0:	0b b6       	in	r0, 0x3b	; 59
 bd2:	0f 92       	push	r0
 bd4:	2f 93       	push	r18
 bd6:	3f 93       	push	r19
 bd8:	5f 93       	push	r21
 bda:	6f 93       	push	r22
 bdc:	7f 93       	push	r23
 bde:	8f 93       	push	r24
 be0:	9f 93       	push	r25
 be2:	af 93       	push	r26
 be4:	bf 93       	push	r27
 be6:	cf 93       	push	r28
 be8:	df 93       	push	r29
 bea:	ef 93       	push	r30
 bec:	ff 93       	push	r31
 bee:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <InterruptPairDirection+0x1>
 bf2:	88 23       	and	r24, r24
 bf4:	11 f1       	breq	.+68     	; 0xc3a <__vector_4+0x74>
 bf6:	e4 e9       	ldi	r30, 0x94	; 148
 bf8:	f0 e0       	ldi	r31, 0x00	; 0
 bfa:	60 81       	ld	r22, Z
 bfc:	86 2f       	mov	r24, r22
 bfe:	90 e0       	ldi	r25, 0x00	; 0
 c00:	c6 e1       	ldi	r28, 0x16	; 22
 c02:	d1 e0       	ldi	r29, 0x01	; 1
 c04:	9b 83       	std	Y+3, r25	; 0x03
 c06:	8a 83       	std	Y+2, r24	; 0x02
 c08:	a5 e9       	ldi	r26, 0x95	; 149
 c0a:	b0 e0       	ldi	r27, 0x00	; 0
 c0c:	6c 91       	ld	r22, X
 c0e:	70 e0       	ldi	r23, 0x00	; 0
 c10:	76 2f       	mov	r23, r22
 c12:	66 27       	eor	r22, r22
 c14:	68 0f       	add	r22, r24
 c16:	79 1f       	adc	r23, r25
 c18:	7b 83       	std	Y+3, r23	; 0x03
 c1a:	6a 83       	std	Y+2, r22	; 0x02
 c1c:	1c 92       	st	X, r1
 c1e:	10 82       	st	Z, r1
 c20:	89 e0       	ldi	r24, 0x09	; 9
 c22:	9d e3       	ldi	r25, 0x3D	; 61
 c24:	ad d1       	rcall	.+858    	; 0xf80 <__udivmodhi4>
 c26:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <__data_end+0x3>
 c2a:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <__data_end+0x2>
 c2e:	81 e0       	ldi	r24, 0x01	; 1
 c30:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Direction+0x1>
 c34:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <InterruptPairDirection+0x1>
 c38:	1d c0       	rjmp	.+58     	; 0xc74 <__vector_4+0xae>
 c3a:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 c3e:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	98 2f       	mov	r25, r24
 c46:	88 27       	eor	r24, r24
 c48:	82 0f       	add	r24, r18
 c4a:	91 1d       	adc	r25, r1
 c4c:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <InterruptPairTimer+0x2>
 c50:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <InterruptPairTimer+0x3>
 c54:	36 95       	lsr	r19
 c56:	27 95       	ror	r18
 c58:	82 17       	cp	r24, r18
 c5a:	93 07       	cpc	r25, r19
 c5c:	30 f4       	brcc	.+12     	; 0xc6a <__vector_4+0xa4>
 c5e:	81 e0       	ldi	r24, 0x01	; 1
 c60:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <InterruptPairDirection+0x1>
 c64:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <Direction+0x1>
 c68:	05 c0       	rjmp	.+10     	; 0xc74 <__vector_4+0xae>
 c6a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <InterruptPairDirection+0x1>
 c6e:	81 e0       	ldi	r24, 0x01	; 1
 c70:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Direction+0x1>
 c74:	ff 91       	pop	r31
 c76:	ef 91       	pop	r30
 c78:	df 91       	pop	r29
 c7a:	cf 91       	pop	r28
 c7c:	bf 91       	pop	r27
 c7e:	af 91       	pop	r26
 c80:	9f 91       	pop	r25
 c82:	8f 91       	pop	r24
 c84:	7f 91       	pop	r23
 c86:	6f 91       	pop	r22
 c88:	5f 91       	pop	r21
 c8a:	3f 91       	pop	r19
 c8c:	2f 91       	pop	r18
 c8e:	0f 90       	pop	r0
 c90:	0b be       	out	0x3b, r0	; 59
 c92:	0f 90       	pop	r0
 c94:	0f be       	out	0x3f, r0	; 63
 c96:	0f 90       	pop	r0
 c98:	1f 90       	pop	r1
 c9a:	18 95       	reti

00000c9c <__vector_7>:
 c9c:	1f 92       	push	r1
 c9e:	0f 92       	push	r0
 ca0:	0f b6       	in	r0, 0x3f	; 63
 ca2:	0f 92       	push	r0
 ca4:	11 24       	eor	r1, r1
 ca6:	0b b6       	in	r0, 0x3b	; 59
 ca8:	0f 92       	push	r0
 caa:	2f 93       	push	r18
 cac:	3f 93       	push	r19
 cae:	5f 93       	push	r21
 cb0:	6f 93       	push	r22
 cb2:	7f 93       	push	r23
 cb4:	8f 93       	push	r24
 cb6:	9f 93       	push	r25
 cb8:	af 93       	push	r26
 cba:	bf 93       	push	r27
 cbc:	cf 93       	push	r28
 cbe:	df 93       	push	r29
 cc0:	ef 93       	push	r30
 cc2:	ff 93       	push	r31
 cc4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <InterruptPairDirection>
 cc8:	88 23       	and	r24, r24
 cca:	19 f1       	breq	.+70     	; 0xd12 <__vector_7+0x76>
 ccc:	a4 e8       	ldi	r26, 0x84	; 132
 cce:	b0 e0       	ldi	r27, 0x00	; 0
 cd0:	8c 91       	ld	r24, X
 cd2:	90 e0       	ldi	r25, 0x00	; 0
 cd4:	e6 e1       	ldi	r30, 0x16	; 22
 cd6:	f1 e0       	ldi	r31, 0x01	; 1
 cd8:	91 83       	std	Z+1, r25	; 0x01
 cda:	80 83       	st	Z, r24
 cdc:	c5 e8       	ldi	r28, 0x85	; 133
 cde:	d0 e0       	ldi	r29, 0x00	; 0
 ce0:	28 81       	ld	r18, Y
 ce2:	30 e0       	ldi	r19, 0x00	; 0
 ce4:	32 2f       	mov	r19, r18
 ce6:	22 27       	eor	r18, r18
 ce8:	82 0f       	add	r24, r18
 cea:	93 1f       	adc	r25, r19
 cec:	91 83       	std	Z+1, r25	; 0x01
 cee:	80 83       	st	Z, r24
 cf0:	18 82       	st	Y, r1
 cf2:	1c 92       	st	X, r1
 cf4:	60 81       	ld	r22, Z
 cf6:	71 81       	ldd	r23, Z+1	; 0x01
 cf8:	89 e0       	ldi	r24, 0x09	; 9
 cfa:	9d e3       	ldi	r25, 0x3D	; 61
 cfc:	41 d1       	rcall	.+642    	; 0xf80 <__udivmodhi4>
 cfe:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <__data_end+0x1>
 d02:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <__data_end>
 d06:	81 e0       	ldi	r24, 0x01	; 1
 d08:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Direction>
 d0c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <InterruptPairDirection>
 d10:	1d c0       	rjmp	.+58     	; 0xd4c <__vector_7+0xb0>
 d12:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 d16:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 d1a:	90 e0       	ldi	r25, 0x00	; 0
 d1c:	98 2f       	mov	r25, r24
 d1e:	88 27       	eor	r24, r24
 d20:	82 0f       	add	r24, r18
 d22:	91 1d       	adc	r25, r1
 d24:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <InterruptPairTimer>
 d28:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <InterruptPairTimer+0x1>
 d2c:	36 95       	lsr	r19
 d2e:	27 95       	ror	r18
 d30:	82 17       	cp	r24, r18
 d32:	93 07       	cpc	r25, r19
 d34:	30 f4       	brcc	.+12     	; 0xd42 <__vector_7+0xa6>
 d36:	81 e0       	ldi	r24, 0x01	; 1
 d38:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <InterruptPairDirection>
 d3c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Direction>
 d40:	05 c0       	rjmp	.+10     	; 0xd4c <__vector_7+0xb0>
 d42:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <InterruptPairDirection>
 d46:	81 e0       	ldi	r24, 0x01	; 1
 d48:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Direction>
 d4c:	ff 91       	pop	r31
 d4e:	ef 91       	pop	r30
 d50:	df 91       	pop	r29
 d52:	cf 91       	pop	r28
 d54:	bf 91       	pop	r27
 d56:	af 91       	pop	r26
 d58:	9f 91       	pop	r25
 d5a:	8f 91       	pop	r24
 d5c:	7f 91       	pop	r23
 d5e:	6f 91       	pop	r22
 d60:	5f 91       	pop	r21
 d62:	3f 91       	pop	r19
 d64:	2f 91       	pop	r18
 d66:	0f 90       	pop	r0
 d68:	0b be       	out	0x3b, r0	; 59
 d6a:	0f 90       	pop	r0
 d6c:	0f be       	out	0x3f, r0	; 63
 d6e:	0f 90       	pop	r0
 d70:	1f 90       	pop	r1
 d72:	18 95       	reti

00000d74 <__vector_8>:
 d74:	1f 92       	push	r1
 d76:	0f 92       	push	r0
 d78:	0f b6       	in	r0, 0x3f	; 63
 d7a:	0f 92       	push	r0
 d7c:	11 24       	eor	r1, r1
 d7e:	0b b6       	in	r0, 0x3b	; 59
 d80:	0f 92       	push	r0
 d82:	2f 93       	push	r18
 d84:	3f 93       	push	r19
 d86:	5f 93       	push	r21
 d88:	6f 93       	push	r22
 d8a:	7f 93       	push	r23
 d8c:	8f 93       	push	r24
 d8e:	9f 93       	push	r25
 d90:	af 93       	push	r26
 d92:	bf 93       	push	r27
 d94:	cf 93       	push	r28
 d96:	df 93       	push	r29
 d98:	ef 93       	push	r30
 d9a:	ff 93       	push	r31
 d9c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <InterruptPairDirection>
 da0:	88 23       	and	r24, r24
 da2:	11 f1       	breq	.+68     	; 0xde8 <__vector_8+0x74>
 da4:	a4 e8       	ldi	r26, 0x84	; 132
 da6:	b0 e0       	ldi	r27, 0x00	; 0
 da8:	8c 91       	ld	r24, X
 daa:	90 e0       	ldi	r25, 0x00	; 0
 dac:	e6 e1       	ldi	r30, 0x16	; 22
 dae:	f1 e0       	ldi	r31, 0x01	; 1
 db0:	91 83       	std	Z+1, r25	; 0x01
 db2:	80 83       	st	Z, r24
 db4:	c5 e8       	ldi	r28, 0x85	; 133
 db6:	d0 e0       	ldi	r29, 0x00	; 0
 db8:	28 81       	ld	r18, Y
 dba:	30 e0       	ldi	r19, 0x00	; 0
 dbc:	32 2f       	mov	r19, r18
 dbe:	22 27       	eor	r18, r18
 dc0:	82 0f       	add	r24, r18
 dc2:	93 1f       	adc	r25, r19
 dc4:	91 83       	std	Z+1, r25	; 0x01
 dc6:	80 83       	st	Z, r24
 dc8:	18 82       	st	Y, r1
 dca:	1c 92       	st	X, r1
 dcc:	60 81       	ld	r22, Z
 dce:	71 81       	ldd	r23, Z+1	; 0x01
 dd0:	89 e0       	ldi	r24, 0x09	; 9
 dd2:	9d e3       	ldi	r25, 0x3D	; 61
 dd4:	d5 d0       	rcall	.+426    	; 0xf80 <__udivmodhi4>
 dd6:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <__data_end+0x1>
 dda:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <__data_end>
 dde:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Direction>
 de2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <InterruptPairDirection>
 de6:	1c c0       	rjmp	.+56     	; 0xe20 <__vector_8+0xac>
 de8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 dec:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 df0:	90 e0       	ldi	r25, 0x00	; 0
 df2:	98 2f       	mov	r25, r24
 df4:	88 27       	eor	r24, r24
 df6:	82 0f       	add	r24, r18
 df8:	91 1d       	adc	r25, r1
 dfa:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <InterruptPairTimer>
 dfe:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <InterruptPairTimer+0x1>
 e02:	36 95       	lsr	r19
 e04:	27 95       	ror	r18
 e06:	82 17       	cp	r24, r18
 e08:	93 07       	cpc	r25, r19
 e0a:	30 f4       	brcc	.+12     	; 0xe18 <__vector_8+0xa4>
 e0c:	81 e0       	ldi	r24, 0x01	; 1
 e0e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <InterruptPairDirection>
 e12:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Direction>
 e16:	04 c0       	rjmp	.+8      	; 0xe20 <__vector_8+0xac>
 e18:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <InterruptPairDirection>
 e1c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Direction>
 e20:	ff 91       	pop	r31
 e22:	ef 91       	pop	r30
 e24:	df 91       	pop	r29
 e26:	cf 91       	pop	r28
 e28:	bf 91       	pop	r27
 e2a:	af 91       	pop	r26
 e2c:	9f 91       	pop	r25
 e2e:	8f 91       	pop	r24
 e30:	7f 91       	pop	r23
 e32:	6f 91       	pop	r22
 e34:	5f 91       	pop	r21
 e36:	3f 91       	pop	r19
 e38:	2f 91       	pop	r18
 e3a:	0f 90       	pop	r0
 e3c:	0b be       	out	0x3b, r0	; 59
 e3e:	0f 90       	pop	r0
 e40:	0f be       	out	0x3f, r0	; 63
 e42:	0f 90       	pop	r0
 e44:	1f 90       	pop	r1
 e46:	18 95       	reti

00000e48 <__vector_15>:
 e48:	1f 92       	push	r1
 e4a:	0f 92       	push	r0
 e4c:	0f b6       	in	r0, 0x3f	; 63
 e4e:	0f 92       	push	r0
 e50:	11 24       	eor	r1, r1
 e52:	0b b6       	in	r0, 0x3b	; 59
 e54:	0f 92       	push	r0
 e56:	8f 93       	push	r24
 e58:	ef 93       	push	r30
 e5a:	ff 93       	push	r31
 e5c:	ee e0       	ldi	r30, 0x0E	; 14
 e5e:	f1 e0       	ldi	r31, 0x01	; 1
 e60:	11 82       	std	Z+1, r1	; 0x01
 e62:	10 82       	st	Z, r1
 e64:	17 82       	std	Z+7, r1	; 0x07
 e66:	16 82       	std	Z+6, r1	; 0x06
 e68:	81 e0       	ldi	r24, 0x01	; 1
 e6a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Direction>
 e6e:	ff 91       	pop	r31
 e70:	ef 91       	pop	r30
 e72:	8f 91       	pop	r24
 e74:	0f 90       	pop	r0
 e76:	0b be       	out	0x3b, r0	; 59
 e78:	0f 90       	pop	r0
 e7a:	0f be       	out	0x3f, r0	; 63
 e7c:	0f 90       	pop	r0
 e7e:	1f 90       	pop	r1
 e80:	18 95       	reti

00000e82 <__vector_31>:
 e82:	1f 92       	push	r1
 e84:	0f 92       	push	r0
 e86:	0f b6       	in	r0, 0x3f	; 63
 e88:	0f 92       	push	r0
 e8a:	11 24       	eor	r1, r1
 e8c:	0b b6       	in	r0, 0x3b	; 59
 e8e:	0f 92       	push	r0
 e90:	8f 93       	push	r24
 e92:	ef 93       	push	r30
 e94:	ff 93       	push	r31
 e96:	ee e0       	ldi	r30, 0x0E	; 14
 e98:	f1 e0       	ldi	r31, 0x01	; 1
 e9a:	13 82       	std	Z+3, r1	; 0x03
 e9c:	12 82       	std	Z+2, r1	; 0x02
 e9e:	15 82       	std	Z+5, r1	; 0x05
 ea0:	14 82       	std	Z+4, r1	; 0x04
 ea2:	81 e0       	ldi	r24, 0x01	; 1
 ea4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Direction+0x1>
 ea8:	ff 91       	pop	r31
 eaa:	ef 91       	pop	r30
 eac:	8f 91       	pop	r24
 eae:	0f 90       	pop	r0
 eb0:	0b be       	out	0x3b, r0	; 59
 eb2:	0f 90       	pop	r0
 eb4:	0f be       	out	0x3f, r0	; 63
 eb6:	0f 90       	pop	r0
 eb8:	1f 90       	pop	r1
 eba:	18 95       	reti

00000ebc <chip_init>:
 ebc:	e1 e6       	ldi	r30, 0x61	; 97
 ebe:	f0 e0       	ldi	r31, 0x00	; 0
 ec0:	80 e8       	ldi	r24, 0x80	; 128
 ec2:	80 83       	st	Z, r24
 ec4:	10 82       	st	Z, r1
 ec6:	08 95       	ret

00000ec8 <main>:
 ec8:	f9 df       	rcall	.-14     	; 0xebc <chip_init>
 eca:	84 ef       	ldi	r24, 0xF4	; 244
 ecc:	91 e0       	ldi	r25, 0x01	; 1
 ece:	32 d9       	rcall	.-3484   	; 0x134 <can_init>
 ed0:	85 e0       	ldi	r24, 0x05	; 5
 ed2:	92 e0       	ldi	r25, 0x02	; 2
 ed4:	88 d9       	rcall	.-3312   	; 0x1e6 <can_rx>
 ed6:	78 94       	sei
 ed8:	ff cf       	rjmp	.-2      	; 0xed8 <main+0x10>

00000eda <__vector_17>:
 eda:	1f 92       	push	r1
 edc:	0f 92       	push	r0
 ede:	0f b6       	in	r0, 0x3f	; 63
 ee0:	0f 92       	push	r0
 ee2:	11 24       	eor	r1, r1
 ee4:	8f 93       	push	r24
 ee6:	9f 93       	push	r25
 ee8:	af 93       	push	r26
 eea:	bf 93       	push	r27
 eec:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <predison>
 ef0:	88 23       	and	r24, r24
 ef2:	59 f1       	breq	.+86     	; 0xf4a <__vector_17+0x70>
 ef4:	4f 9b       	sbis	0x09, 7	; 9
 ef6:	29 c0       	rjmp	.+82     	; 0xf4a <__vector_17+0x70>
 ef8:	43 9a       	sbi	0x08, 3	; 8
 efa:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <mainrelaison>
 efe:	81 11       	cpse	r24, r1
 f00:	13 c0       	rjmp	.+38     	; 0xf28 <__vector_17+0x4e>
 f02:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <MainRelaisTimer>
 f06:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <MainRelaisTimer+0x1>
 f0a:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <MainRelaisTimer+0x2>
 f0e:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <MainRelaisTimer+0x3>
 f12:	01 97       	sbiw	r24, 0x01	; 1
 f14:	a1 09       	sbc	r26, r1
 f16:	b1 09       	sbc	r27, r1
 f18:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <MainRelaisTimer>
 f1c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <MainRelaisTimer+0x1>
 f20:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <MainRelaisTimer+0x2>
 f24:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <MainRelaisTimer+0x3>
 f28:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <MainRelaisTimer>
 f2c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <MainRelaisTimer+0x1>
 f30:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <MainRelaisTimer+0x2>
 f34:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <MainRelaisTimer+0x3>
 f38:	4e 97       	sbiw	r24, 0x1e	; 30
 f3a:	a1 05       	cpc	r26, r1
 f3c:	b1 05       	cpc	r27, r1
 f3e:	a8 f4       	brcc	.+42     	; 0xf6a <__vector_17+0x90>
 f40:	42 9a       	sbi	0x08, 2	; 8
 f42:	81 e0       	ldi	r24, 0x01	; 1
 f44:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <mainrelaison>
 f48:	10 c0       	rjmp	.+32     	; 0xf6a <__vector_17+0x90>
 f4a:	88 ee       	ldi	r24, 0xE8	; 232
 f4c:	93 e0       	ldi	r25, 0x03	; 3
 f4e:	a0 e0       	ldi	r26, 0x00	; 0
 f50:	b0 e0       	ldi	r27, 0x00	; 0
 f52:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <MainRelaisTimer>
 f56:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <MainRelaisTimer+0x1>
 f5a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <MainRelaisTimer+0x2>
 f5e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <MainRelaisTimer+0x3>
 f62:	43 98       	cbi	0x08, 3	; 8
 f64:	42 98       	cbi	0x08, 2	; 8
 f66:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <mainrelaison>
 f6a:	81 ec       	ldi	r24, 0xC1	; 193
 f6c:	86 bd       	out	0x26, r24	; 38
 f6e:	bf 91       	pop	r27
 f70:	af 91       	pop	r26
 f72:	9f 91       	pop	r25
 f74:	8f 91       	pop	r24
 f76:	0f 90       	pop	r0
 f78:	0f be       	out	0x3f, r0	; 63
 f7a:	0f 90       	pop	r0
 f7c:	1f 90       	pop	r1
 f7e:	18 95       	reti

00000f80 <__udivmodhi4>:
 f80:	aa 1b       	sub	r26, r26
 f82:	bb 1b       	sub	r27, r27
 f84:	51 e1       	ldi	r21, 0x11	; 17
 f86:	07 c0       	rjmp	.+14     	; 0xf96 <__udivmodhi4_ep>

00000f88 <__udivmodhi4_loop>:
 f88:	aa 1f       	adc	r26, r26
 f8a:	bb 1f       	adc	r27, r27
 f8c:	a6 17       	cp	r26, r22
 f8e:	b7 07       	cpc	r27, r23
 f90:	10 f0       	brcs	.+4      	; 0xf96 <__udivmodhi4_ep>
 f92:	a6 1b       	sub	r26, r22
 f94:	b7 0b       	sbc	r27, r23

00000f96 <__udivmodhi4_ep>:
 f96:	88 1f       	adc	r24, r24
 f98:	99 1f       	adc	r25, r25
 f9a:	5a 95       	dec	r21
 f9c:	a9 f7       	brne	.-22     	; 0xf88 <__udivmodhi4_loop>
 f9e:	80 95       	com	r24
 fa0:	90 95       	com	r25
 fa2:	bc 01       	movw	r22, r24
 fa4:	cd 01       	movw	r24, r26
 fa6:	08 95       	ret

00000fa8 <_exit>:
 fa8:	f8 94       	cli

00000faa <__stop_program>:
 faa:	ff cf       	rjmp	.-2      	; 0xfaa <__stop_program>
