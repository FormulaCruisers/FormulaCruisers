
CanCommunication_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  000002ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c08  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9d  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045d  00000000  00000000  00001a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00001ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057e  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e7  00000000  00000000  000024ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000026b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	39 c0       	rjmp	.+114    	; 0xb4 <__bad_interrupt>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__vector_18>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a0 31       	cpi	r26, 0x10	; 16
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	b5 d0       	rcall	.+362    	; 0x21c <main>
  b2:	e1 c0       	rjmp	.+450    	; 0x276 <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <__vector_18>:
//void can_init (void);
volatile int8_t OntvangData[8];
volatile int8_t ZendData[8];

//***** Reception ISR **********************************
ISR(CANIT_vect){  				// use interrupts
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	0b b6       	in	r0, 0x3b	; 59
  c2:	0f 92       	push	r0
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31

  	int8_t length, savecanpage;
	
	savecanpage = CANPAGE;			// Save current MOB
  d6:	ed ee       	ldi	r30, 0xED	; 237
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	40 81       	ld	r20, Z

	CANPAGE = CANHPMOB & 0xF0;		// Selects MOB with highest priority interrupt
  dc:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	80 83       	st	Z, r24

	if ( CANSTMOB & ( 1 << RXOK) ){  	// Interrupt caused by receive finished							
  e4:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
  e8:	85 ff       	sbrs	r24, 5
  ea:	14 c0       	rjmp	.+40     	; 0x114 <__vector_18+0x5e>

  		length = ( CANCDMOB & 0x0F );	// DLC, number of bytes to be received
  ec:	30 91 ef 00 	lds	r19, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
  f0:	3f 70       	andi	r19, 0x0F	; 15

  		for ( int8_t i = 0; i < length; i++ ){
  f2:	13 16       	cp	r1, r19
  f4:	64 f4       	brge	.+24     	; 0x10e <__vector_18+0x58>
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
			
	    	OntvangData[i] = CANMSG; 		// Get data, INDX auto increments CANMSG
  fa:	aa ef       	ldi	r26, 0xFA	; 250
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	2c 91       	ld	r18, X
 100:	fc 01       	movw	r30, r24
 102:	e0 50       	subi	r30, 0x00	; 0
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	20 83       	st	Z, r18
 108:	01 96       	adiw	r24, 0x01	; 1

	if ( CANSTMOB & ( 1 << RXOK) ){  	// Interrupt caused by receive finished							

  		length = ( CANCDMOB & 0x0F );	// DLC, number of bytes to be received

  		for ( int8_t i = 0; i < length; i++ ){
 10a:	83 17       	cp	r24, r19
 10c:	c4 f3       	brlt	.-16     	; 0xfe <__vector_18+0x48>
			
	    	OntvangData[i] = CANMSG; 		// Get data, INDX auto increments CANMSG

	  	} // for

		CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 8 << DLC0));  // Enable Reception 11 bit IDE DLC8
 10e:	88 e8       	ldi	r24, 0x88	; 136
 110:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		
		// Note - the DLC field of the CANCDMO register is updated by the received MOb. If the value differs from expected DLC, an error is set

	} // if (CANSTMOB...	
	
	CANSTMOB = 0x00; 		// Reset reason on selected channel
 114:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>

	CANPAGE = savecanpage;		// Restore original MOB
 118:	40 93 ed 00 	sts	0x00ED, r20	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	4f 91       	pop	r20
 12a:	3f 91       	pop	r19
 12c:	2f 91       	pop	r18
 12e:	0f 90       	pop	r0
 130:	0b be       	out	0x3b, r0	; 59
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <chip_init>:

// If using crystal oscillator of 16 Mhz	
// Note - May want to set the CKDIV8 fuse if MCU is only supposed to run 
// at 8MHz so as not to exceed its operating conditions at startup.

	CLKPR = ( 1 << CLKPCE );  		// Set Clock Prescaler change enable
 13c:	e1 e6       	ldi	r30, 0x61	; 97
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 e8       	ldi	r24, 0x80	; 128
 142:	80 83       	st	Z, r24

	CLKPR = 0x00;				// Clock Division Factor of 2
 144:	10 82       	st	Z, r1

	//DDRC = 0x00;    // Inputs, not used

	//DDRD = 0x00; 	// Inputs, not used

	DDRE = 0x10;	// stat led output
 146:	80 e1       	ldi	r24, 0x10	; 16
 148:	8d b9       	out	0x0d, r24	; 13
 14a:	08 95       	ret

0000014c <can_init>:
	//PRR = 0x00;	// Individual peripheral clocks enabled 

}

//***** CAN ialization *****************************************************
void can_init(void){     
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29

	CANGCON = ( 1 << SWRES );   // Software reset
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

	CANTCON = 0x00;         // CAN timing prescaler set to 0;
 156:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	CANBT1 = 0x02;      	// Set baud rate to 500kb (assuming 16Mhz IOclk)
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x0C;          // "
 160:	8c e0       	ldi	r24, 0x0C	; 12
 162:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x37; 			// ""
 166:	87 e3       	ldi	r24, 0x37	; 55
 168:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	for ( int8_t mob=0; mob<14; mob++ ) {  
 16c:	80 e0       	ldi	r24, 0x00	; 0

		CANPAGE = ( mob << 4 );     	// Selects Message Object 0-14
 16e:	cd ee       	ldi	r28, 0xED	; 237
 170:	d0 e0       	ldi	r29, 0x00	; 0

		CANCDMOB = 0x00;       		// Disable mob
 172:	af ee       	ldi	r26, 0xEF	; 239
 174:	b0 e0       	ldi	r27, 0x00	; 0

		CANSTMOB = 0x00;     		// Clear mob status register;
 176:	ee ee       	ldi	r30, 0xEE	; 238
 178:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT2 = 0x0C;          // "
	CANBT3 = 0x37; 			// ""

	for ( int8_t mob=0; mob<14; mob++ ) {  

		CANPAGE = ( mob << 4 );     	// Selects Message Object 0-14
 17a:	98 2f       	mov	r25, r24
 17c:	92 95       	swap	r25
 17e:	90 7f       	andi	r25, 0xF0	; 240
 180:	98 83       	st	Y, r25

		CANCDMOB = 0x00;       		// Disable mob
 182:	1c 92       	st	X, r1

		CANSTMOB = 0x00;     		// Clear mob status register;
 184:	10 82       	st	Z, r1
 186:	8f 5f       	subi	r24, 0xFF	; 255

	CANBT1 = 0x02;      	// Set baud rate to 500kb (assuming 16Mhz IOclk)
	CANBT2 = 0x0C;          // "
	CANBT3 = 0x37; 			// ""

	for ( int8_t mob=0; mob<14; mob++ ) {  
 188:	8e 30       	cpi	r24, 0x0E	; 14
 18a:	b9 f7       	brne	.-18     	; 0x17a <can_init+0x2e>
		CANCDMOB = 0x00;       		// Disable mob

		CANSTMOB = 0x00;     		// Clear mob status register;
	}

	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select 0001 = MOB1
 18c:	80 e1       	ldi	r24, 0x10	; 16
 18e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	CANIE2 = ( 1 << IEMOB1 );   	// IEMOB1 = MOB1 Enable interrupts on mob1 for reception and transmission
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>

	CANGIE = ( 1 << ENIT ) | ( 1 << ENRX ) | ( 1 << ENTX );   // Enable interrupts on receive
 198:	80 eb       	ldi	r24, 0xB0	; 176
 19a:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	
	CANIDM1 = 0x00;   	// Clear Mask, let all IDs pass    
 19e:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

	CANIDM2 = 0x00; 	// ""
 1a2:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>

	CANIDM3 = 0x00; 	// ""
 1a6:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>

	CANIDM4 = 0x00; 	// ""    	
 1aa:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>

	CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 3 << DLC0));  // Enable Reception | 11 bit | IDE DLC8
 1ae:	83 e8       	ldi	r24, 0x83	; 131
 1b0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	
	CANGCON |= ( 1 << 1 );		// ENASTB = 1	// Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
 1b4:	e8 ed       	ldi	r30, 0xD8	; 216
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	80 83       	st	Z, r24

	sei();
 1be:	78 94       	sei

} 
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <can_tx>:

//***** transmit *****************************************************
void can_tx(void) { 

	CANPAGE = 0x00;		// Select MOb0 for transmission
 1c6:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
	while ( CANEN2 & ( 1 << ENMOB0 ) ); // Wait for MOb 0 to be free
 1ca:	ec ed       	ldi	r30, 0xDC	; 220
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 fd       	sbrc	r24, 0
 1d2:	fd cf       	rjmp	.-6      	; 0x1ce <can_tx+0x8>
	
	CANSTMOB = 0x00;    	// Clear mob status register
 1d4:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	
	CANIDT4 = 0x00;     	// Set can id to 0	
 1d8:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = 0x00;		// ""
 1dc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

	CANIDT2 = 0x00;		// ""
 1e0:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	
	CANIDT1 = 0x00;		// ""
 1e4:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
	
	for ( int8_t i = 0; i < 8; ++i ){

		CANMSG = ZendData[i];
 1ec:	aa ef       	ldi	r26, 0xFA	; 250
 1ee:	b0 e0       	ldi	r27, 0x00	; 0
 1f0:	fc 01       	movw	r30, r24
 1f2:	e8 5f       	subi	r30, 0xF8	; 248
 1f4:	fe 4f       	sbci	r31, 0xFE	; 254
 1f6:	20 81       	ld	r18, Z
 1f8:	2c 93       	st	X, r18
 1fa:	01 96       	adiw	r24, 0x01	; 1

	CANIDT2 = 0x00;		// ""
	
	CANIDT1 = 0x00;		// ""
	
	for ( int8_t i = 0; i < 8; ++i ){
 1fc:	88 30       	cpi	r24, 0x08	; 8
 1fe:	91 05       	cpc	r25, r1
 200:	b9 f7       	brne	.-18     	; 0x1f0 <can_tx+0x2a>

		CANMSG = ZendData[i];
  
	} // for
	
	CANCDMOB = ( 1 << CONMOB0 ) | ( 0 << IDE ) | ( 3 << DLC0 ); 	// Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))			
 202:	83 e4       	ldi	r24, 0x43	; 67
 204:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	while ( !( CANSTMOB & ( 1 << TXOK ) ) );	// wait for TXOK flag set
 208:	ee ee       	ldi	r30, 0xEE	; 238
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	86 ff       	sbrs	r24, 6
 210:	fd cf       	rjmp	.-6      	; 0x20c <can_tx+0x46>
	
// todo: have this use interrupts

	//CANCDMOB = ( 1 << CONMOB1) | ( 0 << IDE ) | ( 8 << DLC0);  // Enable Reception | 11 bit | IDE DLC8
	CANCDMOB = 0x00;	// Disable Transmission
 212:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	CANSTMOB = 0x00;	// Clear TXOK flag
 216:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 21a:	08 95       	ret

0000021c <main>:
} 

//***** main *****************************************************
int main(void){ 

    chip_init();	// Chip initialization
 21c:	8f df       	rcall	.-226    	; 0x13c <chip_init>
 	can_init(); 	// Can initialization
 21e:	96 df       	rcall	.-212    	; 0x14c <can_init>
	 
	 uint8_t toggle = 0;
 220:	80 e0       	ldi	r24, 0x00	; 0
			{
				ZendData[0] = 0x00;
				PORTE |= (1<<PE4); 			// LED OFF
				can_tx(); // transmit
			}
			toggle = 0;
 222:	00 e0       	ldi	r16, 0x00	; 0
			toggle = 1;
		}
		else{							// Else if not button "But" is pressed(High) then:
			if(toggle == 1)
			{
				ZendData[0] = 0x00;
 224:	0f 2e       	mov	r0, r31
 226:	f8 e0       	ldi	r31, 0x08	; 8
 228:	ef 2e       	mov	r14, r31
 22a:	f1 e0       	ldi	r31, 0x01	; 1
 22c:	ff 2e       	mov	r15, r31
 22e:	f0 2d       	mov	r31, r0
			{
				ZendData[0] = 0x55;
				PORTE &= ~(1<<PE4);			// LED ON
				can_tx(); // transmit
			}
			toggle = 1;
 230:	11 e0       	ldi	r17, 0x01	; 1
	while(1)
	{
		if ((PINE & (1<<PE5)) == 0){	// If button "But" is pressed (Grounded) then:
			if(toggle == 0)
			{
				ZendData[0] = 0x55;
 232:	0f 2e       	mov	r0, r31
 234:	f5 e5       	ldi	r31, 0x55	; 85
 236:	df 2e       	mov	r13, r31
 238:	f0 2d       	mov	r31, r0
				can_tx(); // transmit
			}
			toggle = 0;
		}
		
		if (OntvangData[0] == 0x55){	// if 1st byta of received data is 0x55
 23a:	c0 e0       	ldi	r28, 0x00	; 0
 23c:	d1 e0       	ldi	r29, 0x01	; 1
	 
	 uint8_t toggle = 0;
	
	while(1)
	{
		if ((PINE & (1<<PE5)) == 0){	// If button "But" is pressed (Grounded) then:
 23e:	65 99       	sbic	0x0c, 5	; 12
 240:	08 c0       	rjmp	.+16     	; 0x252 <main+0x36>
			if(toggle == 0)
 242:	81 11       	cpse	r24, r1
 244:	0e c0       	rjmp	.+28     	; 0x262 <main+0x46>
			{
				ZendData[0] = 0x55;
 246:	f7 01       	movw	r30, r14
 248:	d0 82       	st	Z, r13
				PORTE &= ~(1<<PE4);			// LED ON
 24a:	74 98       	cbi	0x0e, 4	; 14
				can_tx(); // transmit
 24c:	bc df       	rcall	.-136    	; 0x1c6 <can_tx>
			}
			toggle = 1;
 24e:	81 2f       	mov	r24, r17
 250:	0b c0       	rjmp	.+22     	; 0x268 <main+0x4c>
		}
		else{							// Else if not button "But" is pressed(High) then:
			if(toggle == 1)
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	41 f4       	brne	.+16     	; 0x266 <main+0x4a>
			{
				ZendData[0] = 0x00;
 256:	f7 01       	movw	r30, r14
 258:	10 82       	st	Z, r1
				PORTE |= (1<<PE4); 			// LED OFF
 25a:	74 9a       	sbi	0x0e, 4	; 14
				can_tx(); // transmit
 25c:	b4 df       	rcall	.-152    	; 0x1c6 <can_tx>
			}
			toggle = 0;
 25e:	80 2f       	mov	r24, r16
 260:	03 c0       	rjmp	.+6      	; 0x268 <main+0x4c>
			{
				ZendData[0] = 0x55;
				PORTE &= ~(1<<PE4);			// LED ON
				can_tx(); // transmit
			}
			toggle = 1;
 262:	81 2f       	mov	r24, r17
 264:	01 c0       	rjmp	.+2      	; 0x268 <main+0x4c>
			{
				ZendData[0] = 0x00;
				PORTE |= (1<<PE4); 			// LED OFF
				can_tx(); // transmit
			}
			toggle = 0;
 266:	80 2f       	mov	r24, r16
		}
		
		if (OntvangData[0] == 0x55){	// if 1st byta of received data is 0x55
 268:	98 81       	ld	r25, Y
 26a:	95 35       	cpi	r25, 0x55	; 85
 26c:	11 f4       	brne	.+4      	; 0x272 <main+0x56>
			
			PORTE &= ~(1<<PE4);			// LED ON
 26e:	74 98       	cbi	0x0e, 4	; 14
 270:	e6 cf       	rjmp	.-52     	; 0x23e <main+0x22>
		}
		else{
			PORTE |= (1<<PE4); 			// LED OFF
 272:	74 9a       	sbi	0x0e, 4	; 14
 274:	e4 cf       	rjmp	.-56     	; 0x23e <main+0x22>

00000276 <_exit>:
 276:	f8 94       	cli

00000278 <__stop_program>:
 278:	ff cf       	rjmp	.-2      	; 0x278 <__stop_program>
