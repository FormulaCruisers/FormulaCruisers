
CanCommunication_v3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000300  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  00000374  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d66  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5a  00000000  00000000  000011a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000377  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00002074  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c4  00000000  00000000  00002190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027f  00000000  00000000  00002754  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000029d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	39 c0       	rjmp	.+114    	; 0xb4 <__bad_interrupt>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__vector_18>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a0 31       	cpi	r26, 0x10	; 16
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	03 d1       	rcall	.+518    	; 0x2b8 <main>
  b2:	24 c1       	rjmp	.+584    	; 0x2fc <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <USARTInit>:

void USARTInit(uint16_t ubrr_value){

   //Set Baud rate

   UBRR0L = ubrr_value;
  b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
   UBRR0H = (ubrr_value>>8);
  ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>

   >> char size 8

   */

   UCSR0C=(0<<UMSEL0)|(1<<UCSZ00)|(1<<UCSZ01);
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>


   //Enable The receiver and transmitter

   UCSR0B=(1<<RXEN0)|(1<<TXEN0);
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  ca:	08 95       	ret

000000cc <USARTWriteChar>:
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSR0A & (1<<UDRE0)))
  cc:	e0 ec       	ldi	r30, 0xC0	; 192
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	90 81       	ld	r25, Z
  d2:	95 ff       	sbrs	r25, 5
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <USARTWriteChar+0x4>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR0=data;
  d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  da:	08 95       	ret

000000dc <__vector_18>:
   return(0);
}


//***** Reception ISR **********************************
ISR(CANIT_vect){  				// use interrupts
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	0b b6       	in	r0, 0x3b	; 59
  e8:	0f 92       	push	r0
  ea:	cf 92       	push	r12
  ec:	df 92       	push	r13
  ee:	ef 92       	push	r14
  f0:	ff 92       	push	r15
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	2f 93       	push	r18
  f8:	3f 93       	push	r19
  fa:	4f 93       	push	r20
  fc:	5f 93       	push	r21
  fe:	6f 93       	push	r22
 100:	7f 93       	push	r23
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	af 93       	push	r26
 108:	bf 93       	push	r27
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31

  	int8_t length, savecanpage;
	
	savecanpage = CANPAGE;			// Save current MOB
 112:	ed ee       	ldi	r30, 0xED	; 237
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	e0 80       	ld	r14, Z

	CANPAGE = CANHPMOB & 0xF0;		// Selects MOB with highest priority interrupt
 118:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 11c:	80 7f       	andi	r24, 0xF0	; 240
 11e:	80 83       	st	Z, r24

	if ( CANSTMOB & ( 1 << RXOK) ){  	// Interrupt caused by receive finished	
 120:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 124:	85 ff       	sbrs	r24, 5
 126:	25 c0       	rjmp	.+74     	; 0x172 <__vector_18+0x96>
		
  		length = ( CANCDMOB & 0x0F );	// DLC, number of bytes to be received
 128:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	f8 2e       	mov	r15, r24

  		for ( int8_t i = 0; i < length; i++ ){
 130:	18 16       	cp	r1, r24
 132:	c4 f4       	brge	.+48     	; 0x164 <__vector_18+0x88>
 134:	c0 e0       	ldi	r28, 0x00	; 0
 136:	d0 e0       	ldi	r29, 0x00	; 0
			
	    	OntvangData[i] = CANMSG; 		// Get data, INDX auto increments CANMSG
 138:	0f 2e       	mov	r0, r31
 13a:	fa ef       	ldi	r31, 0xFA	; 250
 13c:	cf 2e       	mov	r12, r31
 13e:	d1 2c       	mov	r13, r1
 140:	f0 2d       	mov	r31, r0
 142:	f6 01       	movw	r30, r12
 144:	80 81       	ld	r24, Z
 146:	8e 01       	movw	r16, r28
 148:	00 50       	subi	r16, 0x00	; 0
 14a:	1f 4f       	sbci	r17, 0xFF	; 255
 14c:	f8 01       	movw	r30, r16
 14e:	80 83       	st	Z, r24
			
			USARTWriteChar('[');
 150:	8b e5       	ldi	r24, 0x5B	; 91
 152:	bc df       	rcall	.-136    	; 0xcc <USARTWriteChar>
			USARTWriteChar(OntvangData[i]);
 154:	f8 01       	movw	r30, r16
 156:	80 81       	ld	r24, Z
 158:	b9 df       	rcall	.-142    	; 0xcc <USARTWriteChar>
			USARTWriteChar(']');
 15a:	8d e5       	ldi	r24, 0x5D	; 93
 15c:	b7 df       	rcall	.-146    	; 0xcc <USARTWriteChar>
 15e:	21 96       	adiw	r28, 0x01	; 1

	if ( CANSTMOB & ( 1 << RXOK) ){  	// Interrupt caused by receive finished	
		
  		length = ( CANCDMOB & 0x0F );	// DLC, number of bytes to be received

  		for ( int8_t i = 0; i < length; i++ ){
 160:	cf 15       	cp	r28, r15
 162:	7c f3       	brlt	.-34     	; 0x142 <__vector_18+0x66>
			USARTWriteChar(']');
			

	  	} // for
		  
		USARTWriteChar('\n');
 164:	8a e0       	ldi	r24, 0x0A	; 10
 166:	b2 df       	rcall	.-156    	; 0xcc <USARTWriteChar>

		CANSTMOB &= ~( 1 << RXOK) ; 
 168:	ee ee       	ldi	r30, 0xEE	; 238
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	8f 7d       	andi	r24, 0xDF	; 223
 170:	80 83       	st	Z, r24
		
	}
	
	//CANSTMOB = 0x00; 		// Reset reason on selected channel

	CANPAGE = savecanpage;		// Restore original MOB
 172:	e0 92 ed 00 	sts	0x00ED, r14	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 3 << DLC0));  // Enable Reception 11 bit IDE DLC8
 176:	83 e8       	ldi	r24, 0x83	; 131
 178:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	df 90       	pop	r13
 1a2:	cf 90       	pop	r12
 1a4:	0f 90       	pop	r0
 1a6:	0b be       	out	0x3b, r0	; 59
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <chip_init>:

// If using crystal oscillator of 16 Mhz	
// Note - May want to set the CKDIV8 fuse if MCU is only supposed to run 
// at 8MHz so as not to exceed its operating conditions at startup.

	CLKPR = ( 1 << CLKPCE );  		// Set Clock Prescaler change enable
 1b2:	e1 e6       	ldi	r30, 0x61	; 97
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 e8       	ldi	r24, 0x80	; 128
 1b8:	80 83       	st	Z, r24

	CLKPR = 0x00;				// Clock Division Factor of 2
 1ba:	10 82       	st	Z, r1
 1bc:	08 95       	ret

000001be <can_init>:
	//PRR = 0x00;	// Individual peripheral clocks enabled 

}

//***** CAN ialization *****************************************************
void can_init(void){     
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29

	CANGCON = ( 1 << SWRES );   // Software reset
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	

	CANTCON = 0x00;         // CAN timing prescaler set to 0;	
 1c8:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	
	CANBT1 = 0x02;      	// Set baud rate to 500kb (assuming 16Mhz IOclk)
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x0C;          // "
 1d2:	8c e0       	ldi	r24, 0x0C	; 12
 1d4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x37; 			// ""
 1d8:	87 e3       	ldi	r24, 0x37	; 55
 1da:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	CANBT1 = 0x06;      	// Set baud rate to 250kb (assuming 16Mhz IOclk)
	CANBT2 = 0x0C;          // "
	CANBT3 = 0x37; 			// ""
*/

	for ( int8_t mob=0; mob<14; mob++ ) {  
 1de:	80 e0       	ldi	r24, 0x00	; 0

		CANPAGE = ( mob << 4 );     	// Selects Message Object 0-14
 1e0:	cd ee       	ldi	r28, 0xED	; 237
 1e2:	d0 e0       	ldi	r29, 0x00	; 0

		CANCDMOB = 0x00;       		// Disable mob
 1e4:	af ee       	ldi	r26, 0xEF	; 239
 1e6:	b0 e0       	ldi	r27, 0x00	; 0

		CANSTMOB = 0x00;     		// Clear mob status register;
 1e8:	ee ee       	ldi	r30, 0xEE	; 238
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT3 = 0x37; 			// ""
*/

	for ( int8_t mob=0; mob<14; mob++ ) {  

		CANPAGE = ( mob << 4 );     	// Selects Message Object 0-14
 1ec:	98 2f       	mov	r25, r24
 1ee:	92 95       	swap	r25
 1f0:	90 7f       	andi	r25, 0xF0	; 240
 1f2:	98 83       	st	Y, r25

		CANCDMOB = 0x00;       		// Disable mob
 1f4:	1c 92       	st	X, r1

		CANSTMOB = 0x00;     		// Clear mob status register;
 1f6:	10 82       	st	Z, r1
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
	CANBT1 = 0x06;      	// Set baud rate to 250kb (assuming 16Mhz IOclk)
	CANBT2 = 0x0C;          // "
	CANBT3 = 0x37; 			// ""
*/

	for ( int8_t mob=0; mob<14; mob++ ) {  
 1fa:	8e 30       	cpi	r24, 0x0E	; 14
 1fc:	b9 f7       	brne	.-18     	; 0x1ec <can_init+0x2e>
		CANCDMOB = 0x00;       		// Disable mob

		CANSTMOB = 0x00;     		// Clear mob status register;
	}

	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select 0001 = MOB1
 1fe:	80 e1       	ldi	r24, 0x10	; 16
 200:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	CANIE2 = ( 1 << IEMOB1 );   	// IEMOB1 = MOB1 Enable interrupts on mob1 for reception and transmission
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>

	CANGIE = ( 1 << ENIT ) | ( 1 << ENRX ) | ( 1 << ENTX );   // Enable interrupts on receive
 20a:	80 eb       	ldi	r24, 0xB0	; 176
 20c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	
	CANIDM1 = 0x00;   	// Clear Mask, let all IDs pass    
 210:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

	CANIDM2 = 0x00; 	// ""
 214:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>

	CANIDM3 = 0x00; 	// ""
 218:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>

	CANIDM4 = 0x00; 	// ""    	
 21c:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>

	CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 3 << DLC0));  // Enable Reception | 11 bit | IDE DLC8
 220:	83 e8       	ldi	r24, 0x83	; 131
 222:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	
	CANGCON |= ( 1 << 1 );		// ENASTB = 1	// Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
 226:	e8 ed       	ldi	r30, 0xD8	; 216
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	80 83       	st	Z, r24

	sei();
 230:	78 94       	sei

} 
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <can_tx>:


//***** transmit *****************************************************
void can_tx(void) { 

	CANPAGE = 0x00;		// Select MOb0 for transmission
 238:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
	while ( CANEN2 & ( 1 << ENMOB0 ) ); // Wait for MOb 0 to be free
 23c:	ec ed       	ldi	r30, 0xDC	; 220
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	80 fd       	sbrc	r24, 0
 244:	fd cf       	rjmp	.-6      	; 0x240 <can_tx+0x8>
	
	CANSTMOB = 0x00;    	// Clear mob status register
 246:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	
	uint16_t Adress = 513;	// 0x201
	
	CANIDT4 = 0x00;     		// 
 24a:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = 0x00;				// 
 24e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = Adress << 5;		// 
 252:	80 e2       	ldi	r24, 0x20	; 32
 254:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = Adress >> 3;		// 
 258:	80 e4       	ldi	r24, 0x40	; 64
 25a:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	90 e0       	ldi	r25, 0x00	; 0
	
	
	for ( int8_t i = 0; i < 8; ++i ){

		CANMSG = ZendData[i];
 262:	aa ef       	ldi	r26, 0xFA	; 250
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	fc 01       	movw	r30, r24
 268:	e8 5f       	subi	r30, 0xF8	; 248
 26a:	fe 4f       	sbci	r31, 0xFE	; 254
 26c:	20 81       	ld	r18, Z
 26e:	2c 93       	st	X, r18
 270:	01 96       	adiw	r24, 0x01	; 1
	CANIDT3 = 0x00;				// 
	CANIDT2 = Adress << 5;		// 
	CANIDT1 = Adress >> 3;		// 
	
	
	for ( int8_t i = 0; i < 8; ++i ){
 272:	88 30       	cpi	r24, 0x08	; 8
 274:	91 05       	cpc	r25, r1
 276:	b9 f7       	brne	.-18     	; 0x266 <can_tx+0x2e>

		CANMSG = ZendData[i];
  
	} // for
	
	CANCDMOB = ( 1 << CONMOB0 ) | ( 0 << IDE ) | ( 3 << DLC0 ); 	// Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))			
 278:	83 e4       	ldi	r24, 0x43	; 67
 27a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 27e:	08 95       	ret

00000280 <USARTReadChar>:

//This function is used to read the available data
//from USART. This function will wait untill data is
//available.
char USARTReadChar( void )
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
   //Wait untill a data is available

   if(!(UCSR0A & (1<<RXC0)))
 284:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 288:	88 23       	and	r24, r24
 28a:	94 f4       	brge	.+36     	; 0x2b0 <USARTReadChar+0x30>

   //Now USART has got data from host
   //and is available is buffer
   
   
   USARTWriteChar('[');
 28c:	8b e5       	ldi	r24, 0x5B	; 91
 28e:	1e df       	rcall	.-452    	; 0xcc <USARTWriteChar>
   USARTWriteChar(UDR0);
 290:	c6 ec       	ldi	r28, 0xC6	; 198
 292:	d0 e0       	ldi	r29, 0x00	; 0
 294:	88 81       	ld	r24, Y
 296:	1a df       	rcall	.-460    	; 0xcc <USARTWriteChar>
   USARTWriteChar(']');
 298:	8d e5       	ldi	r24, 0x5D	; 93
 29a:	18 df       	rcall	.-464    	; 0xcc <USARTWriteChar>
   //USARTWriteChar('\n');
   
   ZendData[0] = 0x3D;
 29c:	e8 e0       	ldi	r30, 0x08	; 8
 29e:	f1 e0       	ldi	r31, 0x01	; 1
 2a0:	8d e3       	ldi	r24, 0x3D	; 61
 2a2:	80 83       	st	Z, r24
   ZendData[1] = 0x1B;
 2a4:	8b e1       	ldi	r24, 0x1B	; 27
 2a6:	81 83       	std	Z+1, r24	; 0x01
   ZendData[2] = 0x00;
 2a8:	12 82       	std	Z+2, r1	; 0x02
   can_tx(); // transmit
 2aa:	c6 df       	rcall	.-116    	; 0x238 <can_tx>
   

   return UDR0;
 2ac:	88 81       	ld	r24, Y
 2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <USARTReadChar+0x32>
{
   //Wait untill a data is available

   if(!(UCSR0A & (1<<RXC0)))
   {
	   return 0;
 2b0:	80 e0       	ldi	r24, 0x00	; 0
   ZendData[2] = 0x00;
   can_tx(); // transmit
   

   return UDR0;
}
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <main>:
int main( void )
{
   char data;
   uint8_t dinges;

   USARTInit(51);    //UBRR = 51
 2b8:	83 e3       	ldi	r24, 0x33	; 51
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	fc de       	rcall	.-520    	; 0xb6 <USARTInit>
   chip_init();	// Chip initialization
 2be:	79 df       	rcall	.-270    	; 0x1b2 <chip_init>
   can_init(); 	// Can initialization
 2c0:	7e df       	rcall	.-260    	; 0x1be <can_init>
   DDRE = 0x10;
 2c2:	80 e1       	ldi	r24, 0x10	; 16
 2c4:	8d b9       	out	0x0d, r24	; 13
   PORTE &= ~(1<<PORTE4);
 2c6:	74 98       	cbi	0x0e, 4	; 14

   //Loop forever

	dinges = CANSTMOB;
 2c8:	10 91 ee 00 	lds	r17, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>

   while(1)
   {
      data=USARTReadChar();
	  
	  if(dinges==CANSTMOB){
 2cc:	ce ee       	ldi	r28, 0xEE	; 238
 2ce:	d0 e0       	ldi	r29, 0x00	; 0
		  
	  }
	  else{
		dinges = CANSTMOB;
		  if ( CANSTMOB & ( 1 << TXOK ) ){
		  		CANCDMOB = 0x00;	// Disable Transmission
 2d0:	0f 2e       	mov	r0, r31
 2d2:	ff ee       	ldi	r31, 0xEF	; 239
 2d4:	ef 2e       	mov	r14, r31
 2d6:	f1 2c       	mov	r15, r1
 2d8:	f0 2d       	mov	r31, r0

	dinges = CANSTMOB;

   while(1)
   {
      data=USARTReadChar();
 2da:	d2 df       	rcall	.-92     	; 0x280 <USARTReadChar>
	  
	  if(dinges==CANSTMOB){
 2dc:	98 81       	ld	r25, Y
 2de:	91 17       	cp	r25, r17
 2e0:	e1 f3       	breq	.-8      	; 0x2da <main+0x22>
		  
	  }
	  else{
		dinges = CANSTMOB;
 2e2:	18 81       	ld	r17, Y
		  if ( CANSTMOB & ( 1 << TXOK ) ){
 2e4:	88 81       	ld	r24, Y
 2e6:	86 ff       	sbrs	r24, 6
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <main+0x36>
		  		CANCDMOB = 0x00;	// Disable Transmission
 2ea:	f7 01       	movw	r30, r14
 2ec:	10 82       	st	Z, r1
		  }
		USARTWriteChar('{');
 2ee:	8b e7       	ldi	r24, 0x7B	; 123
 2f0:	ed de       	rcall	.-550    	; 0xcc <USARTWriteChar>
		USARTWriteChar(dinges);
 2f2:	81 2f       	mov	r24, r17
 2f4:	eb de       	rcall	.-554    	; 0xcc <USARTWriteChar>
		USARTWriteChar('}');
 2f6:	8d e7       	ldi	r24, 0x7D	; 125
 2f8:	e9 de       	rcall	.-558    	; 0xcc <USARTWriteChar>
 2fa:	ef cf       	rjmp	.-34     	; 0x2da <main+0x22>

000002fc <_exit>:
 2fc:	f8 94       	cli

000002fe <__stop_program>:
 2fe:	ff cf       	rjmp	.-2      	; 0x2fe <__stop_program>
