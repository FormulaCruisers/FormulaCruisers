
CanCommunication_v7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002fc  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800102  00800102  00000392  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d43  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5a  00000000  00000000  0000119f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f6  00000000  00000000  00001cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  000021f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061d  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000270  00000000  00000000  000028fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002b6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	56 c0       	rjmp	.+172    	; 0xf6 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ec ef       	ldi	r30, 0xFC	; 252
  a8:	f2 e0       	ldi	r31, 0x02	; 2
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a2 30       	cpi	r26, 0x02	; 2
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a2 e0       	ldi	r26, 0x02	; 2
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	ae 33       	cpi	r26, 0x3E	; 62
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	02 d1       	rcall	.+516    	; 0x2d0 <main>
  cc:	15 c1       	rjmp	.+554    	; 0x2f8 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <USARTInit>:
	//Now USART has got data from host
	//and is available is buffer
	

	return UDR0;
}
  d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  d4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  de:	88 e1       	ldi	r24, 0x18	; 24
  e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  e4:	08 95       	ret

000000e6 <USARTWriteChar>:
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
	//Wait until the transmitter is ready

	while(!(UCSR0A & (1<<UDRE0)))
  e6:	e0 ec       	ldi	r30, 0xC0	; 192
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	90 81       	ld	r25, Z
  ec:	95 ff       	sbrs	r25, 5
  ee:	fd cf       	rjmp	.-6      	; 0xea <USARTWriteChar+0x4>
		//Do nothing
	}

	//Now write the data to USART buffer

	UDR0=data;
  f0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  f4:	08 95       	ret

000000f6 <__vector_18>:
	return(0);
}


//***** Reception ISR **********************************
ISR(CANIT_vect){  				// use interrupts
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	0b b6       	in	r0, 0x3b	; 59
 102:	0f 92       	push	r0
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	4f 93       	push	r20
 10a:	5f 93       	push	r21
 10c:	6f 93       	push	r22
 10e:	7f 93       	push	r23
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	
	
	TCNT1H = 0;
 120:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = 0;
 124:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	int8_t length, savecanpage;
	savecanpage = CANPAGE;			// Save current MOB
 128:	ed ee       	ldi	r30, 0xED	; 237
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	50 81       	ld	r21, Z
	CANPAGE = CANHPMOB & 0xF0;		// Selects MOB with highest priority interrupt
 12e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 132:	80 7f       	andi	r24, 0xF0	; 240
 134:	80 83       	st	Z, r24


	uint16_t ReceiveAddress = (CANIDT1 << 3) | ((CANIDT2 & 0b11100000) >> 5);
 136:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 13a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>

	if ( CANSTMOB & ( 1 << RXOK) ){  	// Interrupt caused by receive finished
 13e:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 142:	95 ff       	sbrs	r25, 5
 144:	57 c0       	rjmp	.+174    	; 0x1f4 <__vector_18+0xfe>
	int8_t length, savecanpage;
	savecanpage = CANPAGE;			// Save current MOB
	CANPAGE = CANHPMOB & 0xF0;		// Selects MOB with highest priority interrupt


	uint16_t ReceiveAddress = (CANIDT1 << 3) | ((CANIDT2 & 0b11100000) >> 5);
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	22 0f       	add	r18, r18
 14a:	33 1f       	adc	r19, r19
 14c:	22 0f       	add	r18, r18
 14e:	33 1f       	adc	r19, r19
 150:	22 0f       	add	r18, r18
 152:	33 1f       	adc	r19, r19
 154:	82 95       	swap	r24
 156:	86 95       	lsr	r24
 158:	87 70       	andi	r24, 0x07	; 7
 15a:	28 2b       	or	r18, r24

	if ( CANSTMOB & ( 1 << RXOK) ){  	// Interrupt caused by receive finished
		length = ( CANCDMOB & 0x0F );	// DLC, number of bytes to be received
 15c:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 160:	9f 70       	andi	r25, 0x0F	; 15
		//USARTWriteChar((ReceiveAddress >> 8) & 0xFF);
		
		RS232BufferCountRead = RS232BufferCountRead * (RS232BufferCountRead < RS232BufferBuffer) + 1;
 162:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <RS232BufferCountRead>
 166:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <RS232BufferBuffer>
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	e4 17       	cp	r30, r20
 16e:	08 f0       	brcs	.+2      	; 0x172 <__vector_18+0x7c>
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	8e 9f       	mul	r24, r30
 174:	e0 2d       	mov	r30, r0
 176:	11 24       	eor	r1, r1
 178:	ef 5f       	subi	r30, 0xFF	; 255
		RS232Buffer[RS232BufferCountRead] = (ReceiveAddress >> 8) & 0xFF;
 17a:	ae 2f       	mov	r26, r30
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	aa 5f       	subi	r26, 0xFA	; 250
 180:	be 4f       	sbci	r27, 0xFE	; 254
 182:	3c 93       	st	X, r19
		RS232BufferCountRead = RS232BufferCountRead * (RS232BufferCountRead < RS232BufferBuffer) + 1;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	e4 17       	cp	r30, r20
 188:	08 f0       	brcs	.+2      	; 0x18c <__vector_18+0x96>
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	8e 9f       	mul	r24, r30
 18e:	e0 2d       	mov	r30, r0
 190:	11 24       	eor	r1, r1
 192:	ef 5f       	subi	r30, 0xFF	; 255
 194:	e0 93 01 01 	sts	0x0101, r30	; 0x800101 <RS232BufferCountRead>
		RS232Buffer[RS232BufferCountRead] = ReceiveAddress & 0xFF;
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	ea 5f       	subi	r30, 0xFA	; 250
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	20 83       	st	Z, r18
		for ( int8_t i = 0; i < length; i++ ){
 1a0:	19 16       	cp	r1, r25
 1a2:	1c f5       	brge	.+70     	; 0x1ea <__vector_18+0xf4>
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 e0       	ldi	r19, 0x00	; 0
			OntvangData[i] = CANMSG; 		// Get data, INDX auto increments CANMSG
 1a8:	ca ef       	ldi	r28, 0xFA	; 250
 1aa:	d0 e0       	ldi	r29, 0x00	; 0
			RS232BufferCountRead = RS232BufferCountRead * (RS232BufferCountRead < RS232BufferBuffer) + 1;
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	70 e0       	ldi	r23, 0x00	; 0
		RS232BufferCountRead = RS232BufferCountRead * (RS232BufferCountRead < RS232BufferBuffer) + 1;
		RS232Buffer[RS232BufferCountRead] = (ReceiveAddress >> 8) & 0xFF;
		RS232BufferCountRead = RS232BufferCountRead * (RS232BufferCountRead < RS232BufferBuffer) + 1;
		RS232Buffer[RS232BufferCountRead] = ReceiveAddress & 0xFF;
		for ( int8_t i = 0; i < length; i++ ){
			OntvangData[i] = CANMSG; 		// Get data, INDX auto increments CANMSG
 1b0:	d9 01       	movw	r26, r18
 1b2:	88 81       	ld	r24, Y
 1b4:	f9 01       	movw	r30, r18
 1b6:	e2 5d       	subi	r30, 0xD2	; 210
 1b8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ba:	80 83       	st	Z, r24
			RS232BufferCountRead = RS232BufferCountRead * (RS232BufferCountRead < RS232BufferBuffer) + 1;
 1bc:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <RS232BufferCountRead>
 1c0:	86 2f       	mov	r24, r22
 1c2:	e4 17       	cp	r30, r20
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <__vector_18+0xd2>
 1c6:	87 2f       	mov	r24, r23
 1c8:	8e 9f       	mul	r24, r30
 1ca:	e0 2d       	mov	r30, r0
 1cc:	11 24       	eor	r1, r1
 1ce:	ef 5f       	subi	r30, 0xFF	; 255
 1d0:	e0 93 01 01 	sts	0x0101, r30	; 0x800101 <RS232BufferCountRead>
			RS232Buffer[RS232BufferCountRead] = OntvangData[i];
 1d4:	a2 5d       	subi	r26, 0xD2	; 210
 1d6:	be 4f       	sbci	r27, 0xFE	; 254
 1d8:	8c 91       	ld	r24, X
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	ea 5f       	subi	r30, 0xFA	; 250
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
 1e0:	80 83       	st	Z, r24
 1e2:	2f 5f       	subi	r18, 0xFF	; 255
 1e4:	3f 4f       	sbci	r19, 0xFF	; 255
		
		RS232BufferCountRead = RS232BufferCountRead * (RS232BufferCountRead < RS232BufferBuffer) + 1;
		RS232Buffer[RS232BufferCountRead] = (ReceiveAddress >> 8) & 0xFF;
		RS232BufferCountRead = RS232BufferCountRead * (RS232BufferCountRead < RS232BufferBuffer) + 1;
		RS232Buffer[RS232BufferCountRead] = ReceiveAddress & 0xFF;
		for ( int8_t i = 0; i < length; i++ ){
 1e6:	29 17       	cp	r18, r25
 1e8:	1c f3       	brlt	.-58     	; 0x1b0 <__vector_18+0xba>
			OntvangData[i] = CANMSG; 		// Get data, INDX auto increments CANMSG
			RS232BufferCountRead = RS232BufferCountRead * (RS232BufferCountRead < RS232BufferBuffer) + 1;
			RS232Buffer[RS232BufferCountRead] = OntvangData[i];
		}
		
		CANSTMOB = 0x00;
 1ea:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 3 << DLC0));
 1ee:	83 e8       	ldi	r24, 0x83	; 131
 1f0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	}

	CANPAGE = savecanpage;		// Restore original MOB
 1f4:	50 93 ed 00 	sts	0x00ED, r21	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
	
	TimerH = TCNT1H;
 1f8:	e5 e8       	ldi	r30, 0x85	; 133
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <TimerH+0x1>
 204:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <TimerH>
	TimerL = TCNT1L;
 208:	c4 e8       	ldi	r28, 0x84	; 132
 20a:	d0 e0       	ldi	r29, 0x00	; 0
 20c:	88 81       	ld	r24, Y
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 214:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	
	USARTWriteChar(TCNT1H);
 218:	80 81       	ld	r24, Z
 21a:	65 df       	rcall	.-310    	; 0xe6 <USARTWriteChar>
	USARTWriteChar(TCNT1L);
 21c:	88 81       	ld	r24, Y
 21e:	63 df       	rcall	.-314    	; 0xe6 <USARTWriteChar>
}
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0b be       	out	0x3b, r0	; 59
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <chip_init>:

	// If using crystal oscillator of 16 Mhz
	// Note - May want to set the CKDIV8 fuse if MCU is only supposed to run
	// at 8MHz so as not to exceed its operating conditions at startup.

	CLKPR = ( 1 << CLKPCE );  		// Set Clock Prescaler change enable
 24a:	e1 e6       	ldi	r30, 0x61	; 97
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 e8       	ldi	r24, 0x80	; 128
 250:	80 83       	st	Z, r24

	CLKPR = 0x00;				// Clock Division Factor of 2
 252:	10 82       	st	Z, r1
 254:	08 95       	ret

00000256 <can_init>:
	//PRR = 0x00;	// Individual peripheral clocks enabled

}

//***** CAN ialization *****************************************************
void can_init(void){
 256:	cf 93       	push	r28
 258:	df 93       	push	r29

	CANGCON = ( 1 << SWRES );   // Software reset
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	

	CANTCON = 0x00;         // CAN timing prescaler set to 0;
 260:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	
	CANBT1 = 0x02;      	// Set baud rate to 500kb (assuming 16Mhz IOclk)
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x0C;          // "
 26a:	8c e0       	ldi	r24, 0x0C	; 12
 26c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x37; 			// ""
 270:	87 e3       	ldi	r24, 0x37	; 55
 272:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	CANBT1 = 0x06;      	// Set baud rate to 250kb (assuming 16Mhz IOclk)
	CANBT2 = 0x0C;          // "
	CANBT3 = 0x37; 			// ""
	*/

	for ( int8_t mob=0; mob<14; mob++ ) {
 276:	80 e0       	ldi	r24, 0x00	; 0

		CANPAGE = ( mob << 4 );     	// Selects Message Object 0-14
 278:	cd ee       	ldi	r28, 0xED	; 237
 27a:	d0 e0       	ldi	r29, 0x00	; 0

		CANCDMOB = 0x00;       		// Disable mob
 27c:	af ee       	ldi	r26, 0xEF	; 239
 27e:	b0 e0       	ldi	r27, 0x00	; 0

		CANSTMOB = 0x00;     		// Clear mob status register;
 280:	ee ee       	ldi	r30, 0xEE	; 238
 282:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT3 = 0x37; 			// ""
	*/

	for ( int8_t mob=0; mob<14; mob++ ) {

		CANPAGE = ( mob << 4 );     	// Selects Message Object 0-14
 284:	98 2f       	mov	r25, r24
 286:	92 95       	swap	r25
 288:	90 7f       	andi	r25, 0xF0	; 240
 28a:	98 83       	st	Y, r25

		CANCDMOB = 0x00;       		// Disable mob
 28c:	1c 92       	st	X, r1

		CANSTMOB = 0x00;     		// Clear mob status register;
 28e:	10 82       	st	Z, r1
 290:	8f 5f       	subi	r24, 0xFF	; 255
	CANBT1 = 0x06;      	// Set baud rate to 250kb (assuming 16Mhz IOclk)
	CANBT2 = 0x0C;          // "
	CANBT3 = 0x37; 			// ""
	*/

	for ( int8_t mob=0; mob<14; mob++ ) {
 292:	8e 30       	cpi	r24, 0x0E	; 14
 294:	b9 f7       	brne	.-18     	; 0x284 <can_init+0x2e>
		CANCDMOB = 0x00;       		// Disable mob

		CANSTMOB = 0x00;     		// Clear mob status register;
	}
	
	CANIE2 = (( 1 << IEMOB1 ) | ( 0 << IEMOB0 ));   	// IEMOB1 = RX -- IEMOB0 = TX
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>

	CANGIE = ( 1 << ENIT ) | ( 1 << ENRX ) | ( 0 << ENTX );   // Enable interrupts on receive
 29c:	80 ea       	ldi	r24, 0xA0	; 160
 29e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select 0001 = MOB1
 2a2:	80 e1       	ldi	r24, 0x10	; 16
 2a4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	CANIDM1 = 0x00;   	// Clear Mask, let all IDs pass
 2a8:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDM2 = 0x00; 	// ""
 2ac:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM3 = 0x00; 	// ""
 2b0:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
	CANIDM4 = 0x00; 	// ""
 2b4:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>

	CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 3 << DLC0));  // Enable Reception | 11 bit | IDE DLC8
 2b8:	83 e8       	ldi	r24, 0x83	; 131
 2ba:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	
	CANGCON |= ( 1 << 1 );		// ENASTB = 1	// Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
 2be:	e8 ed       	ldi	r30, 0xD8	; 216
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	82 60       	ori	r24, 0x02	; 2
 2c6:	80 83       	st	Z, r24

	sei();
 2c8:	78 94       	sei

}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <main>:
uint16_t TimerH = 0;
uint16_t TimerL = 0;

int main( void )
{
	USARTInit(51);    //UBRR = 51
 2d0:	83 e3       	ldi	r24, 0x33	; 51
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	fd de       	rcall	.-518    	; 0xd0 <USARTInit>
	chip_init();	// Chip initialization
 2d6:	b9 df       	rcall	.-142    	; 0x24a <chip_init>
	can_init(); 	// Can initialization
 2d8:	be df       	rcall	.-132    	; 0x256 <can_init>
	DDRE = 0x10;
 2da:	80 e1       	ldi	r24, 0x10	; 16
 2dc:	8d b9       	out	0x0d, r24	; 13
	PORTE &= ~(1<<PORTE4);
 2de:	74 98       	cbi	0x0e, 4	; 14
	
	TCCR1A = 0;
 2e0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (0 << CS12) | (0 << CS11) | (1 << CS10);
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCCR1C = 0;
 2ea:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	TCNT1H = 0;
 2ee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = 0;
 2f2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
		USARTWriteChar(0xDD);
		
		can_tx(adres, 3);
		*/
		
	}
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <main+0x26>

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
