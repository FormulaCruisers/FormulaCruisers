
CanCommunication_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  000002a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cc3  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b2f  00000000  00000000  0000102f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048a  00000000  00000000  00001b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bd  00000000  00000000  000020d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000201  00000000  00000000  00002691  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002892  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	39 c0       	rjmp	.+114    	; 0xb4 <__bad_interrupt>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	51 c0       	rjmp	.+162    	; 0xec <__vector_18>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a0 31       	cpi	r26, 0x10	; 16
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	b0 d0       	rcall	.+352    	; 0x212 <main>
  b2:	bb c0       	rjmp	.+374    	; 0x22a <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <USARTInit>:

void USARTInit(uint16_t ubrr_value){

   //Set Baud rate

   UBRR0L = ubrr_value;
  b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
   UBRR0H = (ubrr_value>>8);
  ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>

   >> char size 8

   */

   UCSR0C=(0<<UMSEL0)|(1<<UCSZ00)|(1<<UCSZ01);
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>


   //Enable The receiver and transmitter

   UCSR0B=(1<<RXEN0)|(1<<TXEN0);
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  ca:	08 95       	ret

000000cc <USARTReadChar>:
//available.
char USARTReadChar( void )
{
   //Wait untill a data is available

   while(!(UCSR0A & (1<<RXC0)))
  cc:	e0 ec       	ldi	r30, 0xC0	; 192
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 23       	and	r24, r24
  d4:	ec f7       	brge	.-6      	; 0xd0 <USARTReadChar+0x4>
   }

   //Now USART has got data from host
   //and is available is buffer

   return UDR0;
  d6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  da:	08 95       	ret

000000dc <USARTWriteChar>:
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSR0A & (1<<UDRE0)))
  dc:	e0 ec       	ldi	r30, 0xC0	; 192
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	90 81       	ld	r25, Z
  e2:	95 ff       	sbrs	r25, 5
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <USARTWriteChar+0x4>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR0=data;
  e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ea:	08 95       	ret

000000ec <__vector_18>:
   return(0);
}


//***** Reception ISR **********************************
ISR(CANIT_vect){  				// use interrupts
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	0b b6       	in	r0, 0x3b	; 59
  f8:	0f 92       	push	r0
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	6f 93       	push	r22
 104:	7f 93       	push	r23
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
 10e:	cf 93       	push	r28
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31

  	int8_t length, savecanpage;
	
	savecanpage = CANPAGE;			// Save current MOB
 114:	ed ee       	ldi	r30, 0xED	; 237
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	c0 81       	ld	r28, Z

	CANPAGE = CANHPMOB & 0xF0;		// Selects MOB with highest priority interrupt
 11a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	80 83       	st	Z, r24

	if ( CANSTMOB & ( 1 << RXOK) ){  	// Interrupt caused by receive finished	
 122:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 126:	85 ff       	sbrs	r24, 5
 128:	1b c0       	rjmp	.+54     	; 0x160 <__vector_18+0x74>
		
		//CANSTMOB &= ~( 1 << RXOK); 		// Reset reason on selected channel					

  		length = ( CANCDMOB & 0x0F );	// DLC, number of bytes to be received
 12a:	30 91 ef 00 	lds	r19, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 12e:	3f 70       	andi	r19, 0x0F	; 15

  		for ( int8_t i = 0; i < length; i++ ){
 130:	13 16       	cp	r1, r19
 132:	64 f4       	brge	.+24     	; 0x14c <__vector_18+0x60>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
			
	    	OntvangData[i] = CANMSG; 		// Get data, INDX auto increments CANMSG
 138:	aa ef       	ldi	r26, 0xFA	; 250
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	2c 91       	ld	r18, X
 13e:	fc 01       	movw	r30, r24
 140:	e0 50       	subi	r30, 0x00	; 0
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	20 83       	st	Z, r18
 146:	01 96       	adiw	r24, 0x01	; 1
		
		//CANSTMOB &= ~( 1 << RXOK); 		// Reset reason on selected channel					

  		length = ( CANCDMOB & 0x0F );	// DLC, number of bytes to be received

  		for ( int8_t i = 0; i < length; i++ ){
 148:	83 17       	cp	r24, r19
 14a:	c4 f3       	brlt	.-16     	; 0x13c <__vector_18+0x50>
			//USARTWriteChar(']');
			

	  	} // for
		  
		USARTWriteChar('\n');
 14c:	8a e0       	ldi	r24, 0x0A	; 10
 14e:	c6 df       	rcall	.-116    	; 0xdc <USARTWriteChar>

		CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 8 << DLC0));  // Enable Reception 11 bit IDE DLC8
 150:	88 e8       	ldi	r24, 0x88	; 136
 152:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		
		CANSTMOB &= ~( 1 << RXOK) ; 
 156:	ee ee       	ldi	r30, 0xEE	; 238
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	8f 7d       	andi	r24, 0xDF	; 223
 15e:	80 83       	st	Z, r24
		
	}
	
	//CANSTMOB = 0x00; 		// Reset reason on selected channel

	CANPAGE = savecanpage;		// Restore original MOB
 160:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

}
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	cf 91       	pop	r28
 16a:	bf 91       	pop	r27
 16c:	af 91       	pop	r26
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	7f 91       	pop	r23
 174:	6f 91       	pop	r22
 176:	5f 91       	pop	r21
 178:	4f 91       	pop	r20
 17a:	3f 91       	pop	r19
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0b be       	out	0x3b, r0	; 59
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <chip_init>:

// If using crystal oscillator of 16 Mhz	
// Note - May want to set the CKDIV8 fuse if MCU is only supposed to run 
// at 8MHz so as not to exceed its operating conditions at startup.

	CLKPR = ( 1 << CLKPCE );  		// Set Clock Prescaler change enable
 18c:	e1 e6       	ldi	r30, 0x61	; 97
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 e8       	ldi	r24, 0x80	; 128
 192:	80 83       	st	Z, r24

	CLKPR = 0x00;				// Clock Division Factor of 2
 194:	10 82       	st	Z, r1
 196:	08 95       	ret

00000198 <can_init>:
	//PRR = 0x00;	// Individual peripheral clocks enabled 

}

//***** CAN ialization *****************************************************
void can_init(void){     
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29

	CANGCON = ( 1 << SWRES );   // Software reset
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	

	CANTCON = 0x00;         // CAN timing prescaler set to 0;	
 1a2:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	
	
	CANBT1 = 0x0E;      	// Set baud rate to 250kb (assuming 16Mhz IOclk)
 1a6:	8e e0       	ldi	r24, 0x0E	; 14
 1a8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x04;          // "
 1ac:	84 e0       	ldi	r24, 0x04	; 4
 1ae:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x13; 			// ""		
 1b2:	83 e1       	ldi	r24, 0x13	; 19
 1b4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	CANBT1 = 0x06;      	// Set baud rate to 250kb (assuming 16Mhz IOclk)
	CANBT2 = 0x0C;          // "
	CANBT3 = 0x37; 			// ""

*/
	for ( int8_t mob=0; mob<14; mob++ ) {  
 1b8:	80 e0       	ldi	r24, 0x00	; 0

		CANPAGE = ( mob << 4 );     	// Selects Message Object 0-5
 1ba:	cd ee       	ldi	r28, 0xED	; 237
 1bc:	d0 e0       	ldi	r29, 0x00	; 0

		CANCDMOB = 0x00;       		// Disable mob
 1be:	af ee       	ldi	r26, 0xEF	; 239
 1c0:	b0 e0       	ldi	r27, 0x00	; 0

		CANSTMOB = 0x00;     		// Clear mob status register;
 1c2:	ee ee       	ldi	r30, 0xEE	; 238
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT3 = 0x37; 			// ""

*/
	for ( int8_t mob=0; mob<14; mob++ ) {  

		CANPAGE = ( mob << 4 );     	// Selects Message Object 0-5
 1c6:	98 2f       	mov	r25, r24
 1c8:	92 95       	swap	r25
 1ca:	90 7f       	andi	r25, 0xF0	; 240
 1cc:	98 83       	st	Y, r25

		CANCDMOB = 0x00;       		// Disable mob
 1ce:	1c 92       	st	X, r1

		CANSTMOB = 0x00;     		// Clear mob status register;
 1d0:	10 82       	st	Z, r1
 1d2:	8f 5f       	subi	r24, 0xFF	; 255
	CANBT1 = 0x06;      	// Set baud rate to 250kb (assuming 16Mhz IOclk)
	CANBT2 = 0x0C;          // "
	CANBT3 = 0x37; 			// ""

*/
	for ( int8_t mob=0; mob<14; mob++ ) {  
 1d4:	8e 30       	cpi	r24, 0x0E	; 14
 1d6:	b9 f7       	brne	.-18     	; 0x1c6 <can_init+0x2e>
		CANCDMOB = 0x00;       		// Disable mob

		CANSTMOB = 0x00;     		// Clear mob status register;
	}

	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select 0001 = MOB1
 1d8:	80 e1       	ldi	r24, 0x10	; 16
 1da:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	CANIE2 = ( 1 << IEMOB1 );   	// IEMOB1 = MOB1 Enable interrupts on mob1 for reception and transmission
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>

	CANGIE = ( 1 << ENIT ) | ( 1 << ENRX ) | ( 1 << ENTX );   // Enable interrupts on receive
 1e4:	80 eb       	ldi	r24, 0xB0	; 176
 1e6:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	
	CANIDM1 = 0x00;   	// Clear Mask, let all IDs pass    
 1ea:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

	CANIDM2 = 0x00; 	// ""
 1ee:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>

	CANIDM3 = 0x00; 	// ""
 1f2:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>

	CANIDM4 = 0x00; 	// ""    	
 1f6:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>

	CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 8 << DLC0));  // Enable Reception | 11 bit | IDE DLC8
 1fa:	88 e8       	ldi	r24, 0x88	; 136
 1fc:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	
	CANGCON |= ( 1 << 1 );		// ENASTB = 1	// Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
 200:	e8 ed       	ldi	r30, 0xD8	; 216
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	82 60       	ori	r24, 0x02	; 2
 208:	80 83       	st	Z, r24

	sei();
 20a:	78 94       	sei

} 
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <main>:

int main( void )
{
   char data;

   USARTInit(51);    //UBRR = 51
 212:	83 e3       	ldi	r24, 0x33	; 51
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	4f df       	rcall	.-354    	; 0xb6 <USARTInit>
   chip_init();	// Chip initialization
 218:	b9 df       	rcall	.-142    	; 0x18c <chip_init>
   can_init(); 	// Can initialization
 21a:	be df       	rcall	.-132    	; 0x198 <can_init>
   DDRE = 0x10;
 21c:	80 e1       	ldi	r24, 0x10	; 16
 21e:	8d b9       	out	0x0d, r24	; 13
   PORTE &= ~(1<<PORTE4);
 220:	74 98       	cbi	0x0e, 4	; 14



   while(1)
   {
      data=USARTReadChar();
 222:	54 df       	rcall	.-344    	; 0xcc <USARTReadChar>

      //USARTWriteChar('[');
      //USARTWriteChar(data);
      USARTWriteChar('1D');	  
 224:	84 e4       	ldi	r24, 0x44	; 68
 226:	5a df       	rcall	.-332    	; 0xdc <USARTWriteChar>
	  //ZendData[0] = 0x01;
	  //ZendData[1] = 0x00;
	  //ZendData[2] = 0x00;
	  //can_tx(); // transmit
	  
   }   
 228:	fc cf       	rjmp	.-8      	; 0x222 <main+0x10>

0000022a <_exit>:
 22a:	f8 94       	cli

0000022c <__stop_program>:
 22c:	ff cf       	rjmp	.-2      	; 0x22c <__stop_program>
