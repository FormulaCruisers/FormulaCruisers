
CanCommunication_v6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  00000390  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dc2  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b54  00000000  00000000  0000121a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ff  00000000  00000000  00001d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00002270  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d2  00000000  00000000  00002374  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000355  00000000  00000000  00002946  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002c9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	39 c0       	rjmp	.+114    	; 0xb4 <__bad_interrupt>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	51 c0       	rjmp	.+162    	; 0xec <__vector_18>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a0 31       	cpi	r26, 0x10	; 16
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	07 d1       	rcall	.+526    	; 0x2c0 <main>
  b2:	32 c1       	rjmp	.+612    	; 0x318 <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <USARTInit>:

void USARTInit(uint16_t ubrr_value){

	//Set Baud rate

	UBRR0L = ubrr_value;
  b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR0H = (ubrr_value>>8);
  ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>

	>> char size 8

	*/

	UCSR0C=(0<<UMSEL0)|(1<<UCSZ00)|(1<<UCSZ01);
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>


	//Enable The receiver and transmitter

	UCSR0B=(1<<RXEN0)|(1<<TXEN0);
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  ca:	08 95       	ret

000000cc <USARTReadChar>:
//available.
char USARTReadChar( void )
{
	//Wait until a data is available

	while(!(UCSR0A & (1<<RXC0)))
  cc:	e0 ec       	ldi	r30, 0xC0	; 192
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 23       	and	r24, r24
  d4:	ec f7       	brge	.-6      	; 0xd0 <USARTReadChar+0x4>

	//Now USART has got data from host
	//and is available is buffer
	

	return UDR0;
  d6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  da:	08 95       	ret

000000dc <USARTWriteChar>:
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
	//Wait until the transmitter is ready

	while(!(UCSR0A & (1<<UDRE0)))
  dc:	e0 ec       	ldi	r30, 0xC0	; 192
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	90 81       	ld	r25, Z
  e2:	95 ff       	sbrs	r25, 5
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <USARTWriteChar+0x4>
		//Do nothing
	}

	//Now write the data to USART buffer

	UDR0=data;
  e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ea:	08 95       	ret

000000ec <__vector_18>:
	return(0);
}


//***** Reception ISR **********************************
ISR(CANIT_vect){  				// use interrupts
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	0b b6       	in	r0, 0x3b	; 59
  f8:	0f 92       	push	r0
  fa:	ef 92       	push	r14
  fc:	ff 92       	push	r15
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	2f 93       	push	r18
 104:	3f 93       	push	r19
 106:	4f 93       	push	r20
 108:	5f 93       	push	r21
 10a:	6f 93       	push	r22
 10c:	7f 93       	push	r23
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31

	int8_t length, savecanpage;
	savecanpage = CANPAGE;			// Save current MOB
 11e:	ed ee       	ldi	r30, 0xED	; 237
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	00 81       	ld	r16, Z
	CANPAGE = CANHPMOB & 0xF0;		// Selects MOB with highest priority interrupt
 124:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 128:	80 7f       	andi	r24, 0xF0	; 240
 12a:	80 83       	st	Z, r24
	
	uint16_t ReceiveAddress = (CANIDT1 << 3) | ((CANIDT2 & 0b11100000) >> 5);
 12c:	c0 91 f3 00 	lds	r28, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 130:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 134:	82 95       	swap	r24
 136:	86 95       	lsr	r24
 138:	87 70       	andi	r24, 0x07	; 7
 13a:	d0 e0       	ldi	r29, 0x00	; 0
 13c:	cc 0f       	add	r28, r28
 13e:	dd 1f       	adc	r29, r29
 140:	cc 0f       	add	r28, r28
 142:	dd 1f       	adc	r29, r29
 144:	cc 0f       	add	r28, r28
 146:	dd 1f       	adc	r29, r29
 148:	c8 2b       	or	r28, r24
	
	USARTWriteChar((ReceiveAddress >> 8) & 0xFF);
 14a:	8d 2f       	mov	r24, r29
 14c:	c7 df       	rcall	.-114    	; 0xdc <USARTWriteChar>
	USARTWriteChar(ReceiveAddress & 0xFF);
 14e:	8c 2f       	mov	r24, r28
 150:	c5 df       	rcall	.-118    	; 0xdc <USARTWriteChar>
	

	if ( CANSTMOB & ( 1 << RXOK) ){  	// Interrupt caused by receive finished
 152:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 156:	85 ff       	sbrs	r24, 5
 158:	1c c0       	rjmp	.+56     	; 0x192 <__vector_18+0xa6>
		length = ( CANCDMOB & 0x0F );	// DLC, number of bytes to be received
 15a:	10 91 ef 00 	lds	r17, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 15e:	1f 70       	andi	r17, 0x0F	; 15
		for ( int8_t i = 0; i < length; i++ ){
 160:	11 16       	cp	r1, r17
 162:	94 f4       	brge	.+36     	; 0x188 <__vector_18+0x9c>
 164:	c0 e0       	ldi	r28, 0x00	; 0
 166:	d0 e0       	ldi	r29, 0x00	; 0
			OntvangData[i] = CANMSG; 		// Get data, INDX auto increments CANMSG
 168:	0f 2e       	mov	r0, r31
 16a:	fa ef       	ldi	r31, 0xFA	; 250
 16c:	ef 2e       	mov	r14, r31
 16e:	f1 2c       	mov	r15, r1
 170:	f0 2d       	mov	r31, r0
 172:	f7 01       	movw	r30, r14
 174:	80 81       	ld	r24, Z
 176:	fe 01       	movw	r30, r28
 178:	e0 50       	subi	r30, 0x00	; 0
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	80 83       	st	Z, r24
			USARTWriteChar(OntvangData[i]);
 17e:	80 81       	ld	r24, Z
 180:	ad df       	rcall	.-166    	; 0xdc <USARTWriteChar>
 182:	21 96       	adiw	r28, 0x01	; 1
	USARTWriteChar(ReceiveAddress & 0xFF);
	

	if ( CANSTMOB & ( 1 << RXOK) ){  	// Interrupt caused by receive finished
		length = ( CANCDMOB & 0x0F );	// DLC, number of bytes to be received
		for ( int8_t i = 0; i < length; i++ ){
 184:	c1 17       	cp	r28, r17
 186:	ac f3       	brlt	.-22     	; 0x172 <__vector_18+0x86>
			OntvangData[i] = CANMSG; 		// Get data, INDX auto increments CANMSG
			USARTWriteChar(OntvangData[i]);
		}
		
		CANSTMOB = 0x00;
 188:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 3 << DLC0));
 18c:	83 e8       	ldi	r24, 0x83	; 131
 18e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	}

	CANPAGE = savecanpage;		// Restore original MOB
 192:	00 93 ed 00 	sts	0x00ED, r16	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
}
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	bf 91       	pop	r27
 1a0:	af 91       	pop	r26
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	7f 91       	pop	r23
 1a8:	6f 91       	pop	r22
 1aa:	5f 91       	pop	r21
 1ac:	4f 91       	pop	r20
 1ae:	3f 91       	pop	r19
 1b0:	2f 91       	pop	r18
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	0f 90       	pop	r0
 1bc:	0b be       	out	0x3b, r0	; 59
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <chip_init>:

	// If using crystal oscillator of 16 Mhz
	// Note - May want to set the CKDIV8 fuse if MCU is only supposed to run
	// at 8MHz so as not to exceed its operating conditions at startup.

	CLKPR = ( 1 << CLKPCE );  		// Set Clock Prescaler change enable
 1c8:	e1 e6       	ldi	r30, 0x61	; 97
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 e8       	ldi	r24, 0x80	; 128
 1ce:	80 83       	st	Z, r24

	CLKPR = 0x00;				// Clock Division Factor of 2
 1d0:	10 82       	st	Z, r1
 1d2:	08 95       	ret

000001d4 <can_init>:
	//PRR = 0x00;	// Individual peripheral clocks enabled

}

//***** CAN ialization *****************************************************
void can_init(void){
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29

	CANGCON = ( 1 << SWRES );   // Software reset
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	

	CANTCON = 0x00;         // CAN timing prescaler set to 0;
 1de:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	
	CANBT1 = 0x02;      	// Set baud rate to 500kb (assuming 16Mhz IOclk)
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x0C;          // "
 1e8:	8c e0       	ldi	r24, 0x0C	; 12
 1ea:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x37; 			// ""
 1ee:	87 e3       	ldi	r24, 0x37	; 55
 1f0:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	CANBT1 = 0x06;      	// Set baud rate to 250kb (assuming 16Mhz IOclk)
	CANBT2 = 0x0C;          // "
	CANBT3 = 0x37; 			// ""
	*/

	for ( int8_t mob=0; mob<14; mob++ ) {
 1f4:	80 e0       	ldi	r24, 0x00	; 0

		CANPAGE = ( mob << 4 );     	// Selects Message Object 0-14
 1f6:	cd ee       	ldi	r28, 0xED	; 237
 1f8:	d0 e0       	ldi	r29, 0x00	; 0

		CANCDMOB = 0x00;       		// Disable mob
 1fa:	af ee       	ldi	r26, 0xEF	; 239
 1fc:	b0 e0       	ldi	r27, 0x00	; 0

		CANSTMOB = 0x00;     		// Clear mob status register;
 1fe:	ee ee       	ldi	r30, 0xEE	; 238
 200:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT3 = 0x37; 			// ""
	*/

	for ( int8_t mob=0; mob<14; mob++ ) {

		CANPAGE = ( mob << 4 );     	// Selects Message Object 0-14
 202:	98 2f       	mov	r25, r24
 204:	92 95       	swap	r25
 206:	90 7f       	andi	r25, 0xF0	; 240
 208:	98 83       	st	Y, r25

		CANCDMOB = 0x00;       		// Disable mob
 20a:	1c 92       	st	X, r1

		CANSTMOB = 0x00;     		// Clear mob status register;
 20c:	10 82       	st	Z, r1
 20e:	8f 5f       	subi	r24, 0xFF	; 255
	CANBT1 = 0x06;      	// Set baud rate to 250kb (assuming 16Mhz IOclk)
	CANBT2 = 0x0C;          // "
	CANBT3 = 0x37; 			// ""
	*/

	for ( int8_t mob=0; mob<14; mob++ ) {
 210:	8e 30       	cpi	r24, 0x0E	; 14
 212:	b9 f7       	brne	.-18     	; 0x202 <can_init+0x2e>
		CANCDMOB = 0x00;       		// Disable mob

		CANSTMOB = 0x00;     		// Clear mob status register;
	}
	
	CANIE2 = (( 1 << IEMOB1 ) | ( 0 << IEMOB0 ));   	// IEMOB1 = RX -- IEMOB0 = TX
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>

	CANGIE = ( 1 << ENIT ) | ( 1 << ENRX ) | ( 0 << ENTX );   // Enable interrupts on receive
 21a:	80 ea       	ldi	r24, 0xA0	; 160
 21c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select 0001 = MOB1
 220:	80 e1       	ldi	r24, 0x10	; 16
 222:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	CANIDM1 = 0x00;   	// Clear Mask, let all IDs pass
 226:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDM2 = 0x00; 	// ""
 22a:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM3 = 0x00; 	// ""
 22e:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
	CANIDM4 = 0x00; 	// ""
 232:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>

	CANCDMOB = (( 1 << CONMOB1 ) | ( 0 << IDE ) | ( 3 << DLC0));  // Enable Reception | 11 bit | IDE DLC8
 236:	83 e8       	ldi	r24, 0x83	; 131
 238:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	
	CANGCON |= ( 1 << 1 );		// ENASTB = 1	// Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
 23c:	e8 ed       	ldi	r30, 0xD8	; 216
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	82 60       	ori	r24, 0x02	; 2
 244:	80 83       	st	Z, r24

	sei();
 246:	78 94       	sei

}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <can_tx>:




//***** transmit *****************************************************
void can_tx(uint16_t Address, uint8_t DLC) {
 24e:	9c 01       	movw	r18, r24
	
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 0 << MOBNB0 ); // select 0000 = CANMOB0
 250:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	while ( CANEN2 & ( 1 << ENMOB0 ) ); // Wait for MOb 0 to be free
 254:	ec ed       	ldi	r30, 0xDC	; 220
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	90 81       	ld	r25, Z
 25a:	90 fd       	sbrc	r25, 0
 25c:	fd cf       	rjmp	.-6      	; 0x258 <can_tx+0xa>
	
	CANSTMOB = 0x00;   // Clear mob status register
 25e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	
	CANIDT4 = 0x00;     		//
 262:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = 0x00;				//
 266:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = Address << 5;		//
 26a:	82 2f       	mov	r24, r18
 26c:	82 95       	swap	r24
 26e:	88 0f       	add	r24, r24
 270:	80 7e       	andi	r24, 0xE0	; 224
 272:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = Address >> 3;		//
 276:	36 95       	lsr	r19
 278:	27 95       	ror	r18
 27a:	36 95       	lsr	r19
 27c:	27 95       	ror	r18
 27e:	36 95       	lsr	r19
 280:	27 95       	ror	r18
 282:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
	
	for ( int8_t i = 0; i < 8; i++ ){
		CANMSG = ZendData[i]; //CAN Data Message Register: setting the data in the message register
 28a:	aa ef       	ldi	r26, 0xFA	; 250
 28c:	b0 e0       	ldi	r27, 0x00	; 0
 28e:	fc 01       	movw	r30, r24
 290:	e8 5f       	subi	r30, 0xF8	; 248
 292:	fe 4f       	sbci	r31, 0xFE	; 254
 294:	20 81       	ld	r18, Z
 296:	2c 93       	st	X, r18
 298:	01 96       	adiw	r24, 0x01	; 1
	CANIDT4 = 0x00;     		//
	CANIDT3 = 0x00;				//
	CANIDT2 = Address << 5;		//
	CANIDT1 = Address >> 3;		//
	
	for ( int8_t i = 0; i < 8; i++ ){
 29a:	88 30       	cpi	r24, 0x08	; 8
 29c:	91 05       	cpc	r25, r1
 29e:	b9 f7       	brne	.-18     	; 0x28e <can_tx+0x40>
		CANMSG = ZendData[i]; //CAN Data Message Register: setting the data in the message register
	}
	
	CANCDMOB = (( 1 << CONMOB0 ) | ( 0 << IDE ) | ( DLC << DLC0)); //CAN MOb Control and DLC Register: (1<<CONMOB1) = enable reception. (0<<IDE) = can standard rev 2.0A ( id length = 11 bits), (DLC << DLC0) Set *DLC* Bytes in the data field of the message.
 2a0:	60 64       	ori	r22, 0x40	; 64
 2a2:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	while ( ! ( CANSTMOB & ( 1 << TXOK ) ) );	// wait for TXOK flag set
 2a6:	ee ee       	ldi	r30, 0xEE	; 238
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	86 ff       	sbrs	r24, 6
 2ae:	fd cf       	rjmp	.-6      	; 0x2aa <can_tx+0x5c>
	
	CANCDMOB = 0x00; //Clear CAN Mob Control and DLC Register
 2b0:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	CANSTMOB = 0x00; // Clear TXOK flag
 2b4:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	
	CANPAGE = ( 0 << MOBNB3 ) | ( 0 << MOBNB2 ) | ( 0 << MOBNB1 ) | ( 1 << MOBNB0 ); // select 0001 = MOB1
 2b8:	80 e1       	ldi	r24, 0x10	; 16
 2ba:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 2be:	08 95       	ret

000002c0 <main>:
	0		= 1000000



	*/
	USARTInit(8);    // 51 = 19200 |  8 = 115200
 2c0:	88 e0       	ldi	r24, 0x08	; 8
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	f8 de       	rcall	.-528    	; 0xb6 <USARTInit>
	chip_init();	// Chip initialization
 2c6:	80 df       	rcall	.-256    	; 0x1c8 <chip_init>
	can_init(); 	// Can initialization
 2c8:	85 df       	rcall	.-246    	; 0x1d4 <can_init>
	DDRE = 0x10;
 2ca:	80 e1       	ldi	r24, 0x10	; 16
 2cc:	8d b9       	out	0x0d, r24	; 13
	PORTE &= ~(1<<PORTE4);
 2ce:	74 98       	cbi	0x0e, 4	; 14
		
		data=USARTReadChar();
		USARTWriteChar(data);
		adres += data;
		
		for(uint8_t i = 0; i < Bytes; i++){
 2d0:	c1 2c       	mov	r12, r1
 2d2:	d1 2c       	mov	r13, r1
	uint8_t Bytes = 0;


	while(1)
	{
		data=USARTReadChar();
 2d4:	fb de       	rcall	.-522    	; 0xcc <USARTReadChar>
 2d6:	08 2f       	mov	r16, r24
		USARTWriteChar(data);
 2d8:	01 df       	rcall	.-510    	; 0xdc <USARTWriteChar>
		Bytes = data;
		
		data=USARTReadChar();
 2da:	f8 de       	rcall	.-528    	; 0xcc <USARTReadChar>
 2dc:	e8 2e       	mov	r14, r24
		USARTWriteChar(data);
 2de:	fe de       	rcall	.-516    	; 0xdc <USARTWriteChar>
		adres = data << 8;
 2e0:	f1 2c       	mov	r15, r1
 2e2:	fe 2c       	mov	r15, r14
 2e4:	ee 24       	eor	r14, r14
		
		data=USARTReadChar();
 2e6:	f2 de       	rcall	.-540    	; 0xcc <USARTReadChar>
 2e8:	c8 2f       	mov	r28, r24
		USARTWriteChar(data);
 2ea:	f8 de       	rcall	.-528    	; 0xdc <USARTWriteChar>
		adres += data;
 2ec:	ec 0e       	add	r14, r28
 2ee:	f1 1c       	adc	r15, r1
		
		for(uint8_t i = 0; i < Bytes; i++){
 2f0:	00 23       	and	r16, r16
 2f2:	61 f0       	breq	.+24     	; 0x30c <main+0x4c>
 2f4:	cc 2d       	mov	r28, r12
 2f6:	dd 2d       	mov	r29, r13
			data=USARTReadChar();
 2f8:	e9 de       	rcall	.-558    	; 0xcc <USARTReadChar>
 2fa:	18 2f       	mov	r17, r24
			USARTWriteChar(data);
 2fc:	ef de       	rcall	.-546    	; 0xdc <USARTWriteChar>
			ZendData[i] = data;
 2fe:	fe 01       	movw	r30, r28
 300:	e8 5f       	subi	r30, 0xF8	; 248
 302:	fe 4f       	sbci	r31, 0xFE	; 254
 304:	10 83       	st	Z, r17
 306:	21 96       	adiw	r28, 0x01	; 1
		
		data=USARTReadChar();
		USARTWriteChar(data);
		adres += data;
		
		for(uint8_t i = 0; i < Bytes; i++){
 308:	c0 17       	cp	r28, r16
 30a:	b0 f3       	brcs	.-20     	; 0x2f8 <main+0x38>
			data=USARTReadChar();
			USARTWriteChar(data);
			ZendData[i] = data;
		}
		
		USARTWriteChar(0xDD);
 30c:	8d ed       	ldi	r24, 0xDD	; 221
 30e:	e6 de       	rcall	.-564    	; 0xdc <USARTWriteChar>
		
		can_tx(adres, Bytes);
 310:	60 2f       	mov	r22, r16
 312:	c7 01       	movw	r24, r14
 314:	9c df       	rcall	.-200    	; 0x24e <can_tx>
		
		
	}
 316:	de cf       	rjmp	.-68     	; 0x2d4 <main+0x14>

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
